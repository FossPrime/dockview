{"version":3,"file":"assets/js/dfb2590f.b772bc09.js","mappings":"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","sources":["webpack://dockview-docs/./src/components/simpleSplitview.tsx","webpack://dockview-docs/./src/components/simpleSplitview2.tsx","webpack://dockview-docs/./docs/basics.mdx"],"sourcesContent":["import {\n    ISplitviewPanelProps,\n    Orientation,\n    SplitviewReact,\n    SplitviewReadyEvent,\n} from 'dockview';\nimport * as React from 'react';\n\nconst components = {\n    default: (props: ISplitviewPanelProps<{ title: string }>) => {\n        return <div style={{ padding: '20px' }}>{props.params.title}</div>;\n    },\n};\n\nexport const SimpleSplitview = (props: { proportional?: boolean }) => {\n    const onReady = (event: SplitviewReadyEvent) => {\n        event.api.addPanel({\n            id: 'panel_1',\n            component: 'default',\n            params: {\n                title: 'Panel 1',\n            },\n            minimumSize: 100,\n        });\n\n        event.api.addPanel({\n            id: 'panel_2',\n            component: 'default',\n            params: {\n                title: 'Panel 2',\n            },\n            minimumSize: 100,\n        });\n\n        event.api.addPanel({\n            id: 'panel_3',\n            component: 'default',\n            params: {\n                title: 'Panel 3',\n            },\n            minimumSize: 100,\n        });\n    };\n\n    return (\n        <SplitviewReact\n            components={components}\n            proportionalLayout={props.proportional}\n            onReady={onReady}\n            orientation={Orientation.HORIZONTAL}\n            className=\"dockview-theme-dark\"\n        />\n    );\n};\n","import { SimpleSplitview } from './simpleSplitview';\nimport * as React from 'react';\n\nexport const SimpleSplitview2 = (props: { proportional?: boolean }) => {\n    const [value, setValue] = React.useState<number>(50);\n\n    const onChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n        setValue(Number(event.target.value));\n    };\n\n    return (\n        <div\n            style={{\n                display: 'flex',\n                flexDirection: 'column',\n                height: '100px',\n                margin: '10px 0px',\n            }}\n        >\n            <div\n                style={{\n                    height: '25px',\n                    display: 'flex',\n                    alignItems: 'center',\n                }}\n            >\n                <input\n                    type={'range'}\n                    min={20}\n                    max={100}\n                    defaultValue={50}\n                    value={value}\n                    onChange={onChange}\n                />\n                <span style={{ padding: '0px 8px' }}>\n                    Slide to resize the splitview container\n                </span>\n            </div>\n            <div\n                style={{\n                    flexGrow: 1,\n                    display: 'grid',\n                    gridTemplateColumns: `${value}fr ${100 - value}fr`,\n                }}\n            >\n                <div\n                    style={{\n                        backgroundColor: 'rgb(30,30,30)',\n                        color: 'white',\n                        flexGrow: 1,\n                        border: '1px solid grey',\n                    }}\n                >\n                    <SimpleSplitview proportional={props.proportional} />\n                </div>\n                <div></div>\n            </div>\n        </div>\n    );\n};\n","\n\n/* @jsxRuntime classic */\n/* @jsx mdx */\n/* @jsxFrag mdx.Fragment */\n\nimport React from 'react';\nimport { mdx } from '@mdx-js/react';\n\n\nexport const frontMatter = {\n\tsidebar_position: 1\n};\nexport const contentTitle = 'Basics';\nexport const metadata = {\n  \"unversionedId\": \"basics\",\n  \"id\": \"basics\",\n  \"title\": \"Basics\",\n  \"description\": \"This section will take you through a number of concepts that can be applied to all dockview components.\",\n  \"source\": \"@site/docs/basics.mdx\",\n  \"sourceDirName\": \".\",\n  \"slug\": \"/basics\",\n  \"permalink\": \"/docs/next/basics\",\n  \"draft\": false,\n  \"editUrl\": \"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/basics.mdx\",\n  \"tags\": [],\n  \"version\": \"current\",\n  \"sidebarPosition\": 1,\n  \"frontMatter\": {\n    \"sidebar_position\": 1\n  },\n  \"sidebar\": \"tutorialSidebar\",\n  \"previous\": {\n    \"title\": \"Dockview\",\n    \"permalink\": \"/docs/next/\"\n  },\n  \"next\": {\n    \"title\": \"Theme\",\n    \"permalink\": \"/docs/next/theme\"\n  }\n};\nexport const assets = {\n\n};\n\nimport { SimpleSplitview } from '@site/src/components/simpleSplitview';\nimport { SimpleSplitview2 } from '@site/src/components/simpleSplitview2';\nexport const toc = [{\n  value: 'Panels',\n  id: 'panels',\n  level: 2\n}, {\n  value: 'Adding a panel with parameters',\n  id: 'adding-a-panel-with-parameters',\n  level: 3\n}, {\n  value: 'API',\n  id: 'api',\n  level: 2\n}, {\n  value: 'Serialization',\n  id: 'serialization',\n  level: 3\n}, {\n  value: 'Auto resizing',\n  id: 'auto-resizing',\n  level: 2\n}, {\n  value: 'Events',\n  id: 'events',\n  level: 2\n}, {\n  value: 'Proportional layout',\n  id: 'proportional-layout',\n  level: 2\n}, {\n  value: 'Browser support',\n  id: 'browser-support',\n  level: 2\n}];\n\nconst layoutProps = {\n  toc\n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"basics\"\n    }}>{`Basics`}</h1>\n    <p>{`This section will take you through a number of concepts that can be applied to all dockview components.`}</p>\n    <h2 {...{\n      \"id\": \"panels\"\n    }}>{`Panels`}</h2>\n    <p>{`The below examples use `}<inlineCode parentName=\"p\">{`ReactSplitview`}</inlineCode>{` but the logic holds for `}<inlineCode parentName=\"p\">{`ReactPaneview`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`ReactGridview`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`ReactDockview`}</inlineCode>{` using their respective implementations and interfaces.\nAll components require you to provide an `}<inlineCode parentName=\"p\">{`onReady`}</inlineCode>{` prop which you can use to build and control your component.`}</p>\n    <h3 {...{\n      \"id\": \"adding-a-panel-with-parameters\"\n    }}>{`Adding a panel with parameters`}</h3>\n    <p>{`You can pass parameters to a panel through the `}<inlineCode parentName=\"p\">{`params`}</inlineCode>{` object`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`const onReady = (event: SplitviewReadyEvent) => {\n    event.api.addPanel({\n        id: 'panel_1',\n        component: 'myComponent',\n        params: {\n            title: 'My Title',\n        },\n    });\n};\n`}</code></pre>\n    <p>{`and you can access those properties through the `}<inlineCode parentName=\"p\">{`props.params`}</inlineCode>{` object. The TypeScript interface accepts an optional generic type `}<inlineCode parentName=\"p\">{`T`}</inlineCode>{` that corresponds to the params objects type.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`const MyComponent = (props: ISplitviewPanelProps<{ title: string }>) => {\n    return <div>{\\`My first panel has the title: \\${props.params.title}\\`}</div>;\n};\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"api\"\n    }}>{`API`}</h2>\n    <p>{`There are two types of API you will interact with using `}<inlineCode parentName=\"p\">{`dockview`}</inlineCode>{`.`}</p>\n    <ul>\n      <li parentName=\"ul\">{`The `}<inlineCode parentName=\"li\">{`panel API`}</inlineCode>{` is accessible via `}<inlineCode parentName=\"li\">{`props.api`}</inlineCode>{` in user defined panels and via the `}<inlineCode parentName=\"li\">{`.api`}</inlineCode>{` variable found on panel instances. This API contains actions and variable related to the the individual panel.`}</li>\n      <li parentName=\"ul\">{`The `}<inlineCode parentName=\"li\">{`container API`}</inlineCode>{` is accessible via `}<inlineCode parentName=\"li\">{`event.api`}</inlineCode>{` in the `}<inlineCode parentName=\"li\">{`onReady`}</inlineCode>{` events and `}<inlineCode parentName=\"li\">{`props.containerApi`}</inlineCode>{` in user defined panels. This API contains actions and variable related to the component as a whole.`}</li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`const MyComponent = (props: ISplitviewPanelProps<{ title: string }>) => {\n    React.useEffect(() => {\n        const disposable = props.api.onDidActiveChange((event) => {\n            console.log(\\`is panel active: \\${event.isActive}\\`);\n        });\n\n        return () => {\n            disposable.dispose(); // remember to dispose of any subscriptions\n        };\n    }, [props.api]);\n\n    const addAnotherPanel = React.useCallback(() => {\n        props.containerApi.addPanel({\n            id: 'another_id',\n            component: 'anotherComponent',\n        });\n    }, [props.containerApi]);\n\n    return (\n        <div>\n            <span>{\\`My first panel has the title: \\${props.params.title}\\`}</span>\n            <button onClick={addAnotherPanel}>Add Panel</button>\n        </div>\n    );\n};\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"serialization\"\n    }}>{`Serialization`}</h3>\n    <p>{`All components support `}<inlineCode parentName=\"p\">{`toJSON(): T`}</inlineCode>{` which returns a Typed object representation of the components state. This same Typed object can be used to deserialize a view using `}<inlineCode parentName=\"p\">{`fromJSON(object: T): void`}</inlineCode>{`.`}</p>\n    <h2 {...{\n      \"id\": \"auto-resizing\"\n    }}>{`Auto resizing`}</h2>\n    <p><inlineCode parentName=\"p\">{`SplitviewReact`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`GridviewReact`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`PaneviewReact`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`DockviewReact`}</inlineCode>{` will all automatically resize to fill the size of their parent element.\nInternally this is achieved using a `}<a parentName=\"p\" {...{\n        \"href\": \"https://developer.mozilla.org/en-US/docs/Web/API/ResizeObserver\"\n      }}>{`ResizeObserver`}</a>{` which some users may need to polyfill.\nYou can disable this by settings the `}<inlineCode parentName=\"p\">{`disableAutoResizing`}</inlineCode>{` prop to be `}<inlineCode parentName=\"p\">{`true`}</inlineCode>{`.`}</p>\n    <p>{`You can manually resize a component using the API method `}<inlineCode parentName=\"p\">{`layout(width: number, height: number): void`}</inlineCode>{`.\nAn advanced case may use this in conjunction with `}<inlineCode parentName=\"p\">{`disableAutoResizing=true`}</inlineCode>{` to allow a parent component to have ultimate control over the dimensions of the component.`}</p>\n    <h2 {...{\n      \"id\": \"events\"\n    }}>{`Events`}</h2>\n    <p>{`Many API properties can be listened on using the `}<inlineCode parentName=\"p\">{`Event`}</inlineCode>{` pattern. For example `}<inlineCode parentName=\"p\">{`api.onDidFocusChange(() => {...})`}</inlineCode>{`.\nYou should dispose of any event listeners you create cleaning up any listeners you would have created.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`React.useEffect(() => {\n    const disposable = api.onDidFocusChange(() => {\n        // write some code\n    });\n\n    return () => {\n        disposable.dispose();\n    };\n}, []);\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"proportional-layout\"\n    }}>{`Proportional layout`}</h2>\n    <p>{`The `}<inlineCode parentName=\"p\">{`proportionalLayout`}</inlineCode>{` property indicates the expected behaviour of the component as it's container resizes, should all views resize equally or should just one view expand to fill the new space. `}<inlineCode parentName=\"p\">{`proportionalLayout`}</inlineCode>{` can be set as a property on `}<inlineCode parentName=\"p\">{`SplitviewReact`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`GridviewReact`}</inlineCode>{` components.\nAlthough not configurable on `}<inlineCode parentName=\"p\">{`DockviewReact`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`PaneviewReact`}</inlineCode>{` these both behave as if `}<inlineCode parentName=\"p\">{`proportionalLayout=true`}</inlineCode>{` was set for them.`}</p>\n    <SimpleSplitview2 proportional={false} mdxType=\"SimpleSplitview2\" />\n    <SimpleSplitview2 proportional={true} mdxType=\"SimpleSplitview2\" />\n    <h2 {...{\n      \"id\": \"browser-support\"\n    }}>{`Browser support`}</h2>\n    <p>{`dockview is intended to support all major browsers. Some users may require a polyfill for `}<a parentName=\"p\" {...{\n        \"href\": \"https://developer.mozilla.org/en-US/docs/Web/API/ResizeObserver\"\n      }}>{`ResizeObserver`}</a>{`.`}</p>\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;\n"],"names":["components","default","props","style","padding","params","title","SimpleSplitview","proportionalLayout","proportional","onReady","event","api","addPanel","id","component","minimumSize","orientation","Orientation","className","SimpleSplitview2","React","value","setValue","display","flexDirection","height","margin","alignItems","type","min","max","defaultValue","onChange","Number","target","flexGrow","gridTemplateColumns","backgroundColor","color","border","frontMatter","sidebar_position","contentTitle","metadata","assets","toc","level","layoutProps","MDXContent","mdxType","parentName","isMDXComponent"],"sourceRoot":""}