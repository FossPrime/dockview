{"version":3,"file":"assets/js/3567d693.1a526a85.js","mappings":"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","sources":["webpack://dockview-docs/./src/components/simpleDockview.tsx","webpack://dockview-docs/./src/components/simpleGridview.tsx","webpack://dockview-docs/./src/components/simplePaneview.tsx","webpack://dockview-docs/./src/components/simpleSplitview.tsx","webpack://dockview-docs/./versioned_docs/version-1.5.1/examples.mdx"],"sourcesContent":["import {\n    DockviewReact,\n    DockviewReadyEvent,\n    IDockviewPanelProps,\n    PanelApi,\n} from 'dockview';\nimport * as React from 'react';\n\nconst components = {\n    default: (props: IDockviewPanelProps<{ title: string }>) => {\n        return <div style={{ padding: '20px' }}>{props.params.title}</div>;\n    },\n};\n\nconst RenderWhenVisible = <T,>(\n    props: T & {\n        children: React.FunctionComponent<T>;\n        api: Pick<PanelApi, 'isVisible' | 'onDidVisibilityChange'>;\n    }\n) => {\n    const [visible, setVisible] = React.useState<boolean>(props.api.isVisible);\n\n    React.useEffect(() => {\n        const disposable = props.api.onDidVisibilityChange((event) =>\n            setVisible(event.isVisible)\n        );\n\n        return () => {\n            disposable.dispose();\n        };\n    }, [props.api]);\n\n    if (!visible) {\n        return null;\n    }\n\n    return React.createElement(props.children, props);\n};\n\nexport const SimpleDockview = () => {\n    const onReady = (event: DockviewReadyEvent) => {\n        const panel = event.api.addPanel({\n            id: 'panel_1',\n            component: 'default',\n            params: {\n                title: 'Panel 1',\n            },\n        });\n\n        panel.group.locked = true;\n        panel.group.header.hidden = true;\n\n        event.api.addPanel({\n            id: 'panel_2',\n            component: 'default',\n            params: {\n                title: 'Panel 2',\n            },\n        });\n\n        event.api.addPanel({\n            id: 'panel_3',\n            component: 'default',\n            params: {\n                title: 'Panel 3',\n            },\n        });\n\n        event.api.addPanel({\n            id: 'panel_4',\n            component: 'default',\n            params: {\n                title: 'Panel 4',\n            },\n            position: { referencePanel: 'panel_1', direction: 'right' },\n        });\n\n        const panel5 = event.api.addPanel({\n            id: 'panel_5',\n            component: 'default',\n            params: {\n                title: 'Panel 5',\n            },\n            position: { referencePanel: 'panel_3', direction: 'right' },\n        });\n\n        // panel5.group!.model.header.hidden = true;\n        // panel5.group!.model.locked = true;\n\n        event.api.addPanel({\n            id: 'panel_6',\n            component: 'default',\n            params: {\n                title: 'Panel 6',\n            },\n            position: { referencePanel: 'panel_5', direction: 'below' },\n        });\n\n        event.api.addPanel({\n            id: 'panel_7',\n            component: 'default',\n            params: {\n                title: 'Panel 7',\n            },\n            position: { referencePanel: 'panel_6', direction: 'right' },\n        });\n    };\n\n    return (\n        <DockviewReact\n            components={components}\n            onReady={onReady}\n            className=\"dockview-theme-abyss\"\n        />\n    );\n};\n","import {\n    IGridviewPanelProps,\n    Orientation,\n    GridviewReact,\n    GridviewReadyEvent,\n} from 'dockview';\nimport * as React from 'react';\n\nconst components = {\n    default: (props: IGridviewPanelProps<{ title: string }>) => {\n        return <div style={{ padding: '20px' }}>{props.params.title}</div>;\n    },\n};\n\nexport const SimpleGridview = () => {\n    const onReady = (event: GridviewReadyEvent) => {\n        event.api.addPanel({\n            id: 'panel_1',\n            component: 'default',\n            params: {\n                title: 'Panel 1',\n            },\n        });\n\n        event.api.addPanel({\n            id: 'panel_2',\n            component: 'default',\n            params: {\n                title: 'Panel 2',\n            },\n        });\n\n        event.api.addPanel({\n            id: 'panel_3',\n            component: 'default',\n            params: {\n                title: 'Panel 3',\n            },\n        });\n\n        event.api.addPanel({\n            id: 'panel_4',\n            component: 'default',\n            params: {\n                title: 'Panel 4',\n            },\n            position: { referencePanel: 'panel_1', direction: 'right' },\n        });\n\n        event.api.addPanel({\n            id: 'panel_5',\n            component: 'default',\n            params: {\n                title: 'Panel 5',\n            },\n            position: { referencePanel: 'panel_3', direction: 'right' },\n        });\n\n        event.api.addPanel({\n            id: 'panel_6',\n            component: 'default',\n            params: {\n                title: 'Panel 6',\n            },\n            position: { referencePanel: 'panel_5', direction: 'below' },\n            minimumWidth: 10,\n        });\n\n        event.api.addPanel({\n            id: 'panel_7',\n            component: 'default',\n            params: {\n                title: 'Panel 7',\n            },\n            position: { referencePanel: 'panel_6', direction: 'right' },\n            minimumWidth: 10,\n        });\n\n        event.api.addPanel({\n            id: 'panel_8',\n            component: 'default',\n            params: {\n                title: 'Panel 8',\n            },\n            position: { referencePanel: 'panel_6', direction: 'right' },\n            minimumWidth: 10,\n        });\n    };\n\n    return (\n        <GridviewReact\n            components={components}\n            onReady={onReady}\n            proportionalLayout={false}\n            orientation={Orientation.VERTICAL}\n            className=\"dockview-theme-abyss\"\n        />\n    );\n};\n","import {\n    IPaneviewPanelProps,\n    PaneviewReact,\n    PaneviewReadyEvent,\n} from 'dockview';\nimport * as React from 'react';\n\nconst components = {\n    default: (props: IPaneviewPanelProps<{ title: string }>) => {\n        return (\n            <div\n                style={{\n                    padding: '10px',\n                    height: '100%',\n                    backgroundColor: 'rgb(60,60,60)',\n                }}\n            >\n                {props.params.title}\n            </div>\n        );\n    },\n};\n\nconst MyHeaderComponent = (props: IPaneviewPanelProps<{ title: string }>) => {\n    const [expanded, setExpanded] = React.useState<boolean>(\n        props.api.isExpanded\n    );\n\n    React.useEffect(() => {\n        const disposable = props.api.onDidExpansionChange((event) => {\n            setExpanded(event.isExpanded);\n        });\n\n        return () => {\n            disposable.dispose();\n        };\n    }, []);\n\n    const onClick = () => {\n        props.api.setExpanded(!expanded);\n    };\n\n    return (\n        <div\n            style={{\n                padding: '10px',\n                height: '100%',\n                backgroundColor: 'rgb(60,60,60)',\n            }}\n        >\n            <a\n                onClick={onClick}\n                className={expanded ? 'expanded' : 'collapsed'}\n            />\n            <span>{props.params.title}</span>\n        </div>\n    );\n};\n\nconst headerComponents = {\n    myHeaderComponent: MyHeaderComponent,\n};\n\nexport const SimplePaneview = () => {\n    const onReady = (event: PaneviewReadyEvent) => {\n        event.api.addPanel({\n            id: 'panel_1',\n            component: 'default',\n            params: {\n                title: 'Panel 1',\n            },\n            title: 'Panel 1',\n        });\n\n        event.api.addPanel({\n            id: 'panel_2',\n            component: 'default',\n            params: {\n                title: 'Panel 2',\n            },\n            title: 'Panel 2',\n        });\n\n        event.api.addPanel({\n            id: 'panel_3',\n            component: 'default',\n            params: {\n                title: 'Panel 3',\n            },\n            title: 'Panel 3',\n        });\n    };\n\n    return (\n        <PaneviewReact\n            components={components}\n            headerComponents={headerComponents}\n            onReady={onReady}\n            className=\"dockview-theme-abyss\"\n        />\n    );\n};\n","import {\n    ISplitviewPanelProps,\n    Orientation,\n    SplitviewReact,\n    SplitviewReadyEvent,\n} from 'dockview';\nimport * as React from 'react';\n\nconst components = {\n    default: (props: ISplitviewPanelProps<{ title: string }>) => {\n        return <div style={{ padding: '20px' }}>{props.params.title}</div>;\n    },\n};\n\nexport const SimpleSplitview = (props: { proportional?: boolean }) => {\n    const onReady = (event: SplitviewReadyEvent) => {\n        event.api.addPanel({\n            id: 'panel_1',\n            component: 'default',\n            params: {\n                title: 'Panel 1',\n            },\n            minimumSize: 100,\n        });\n\n        event.api.addPanel({\n            id: 'panel_2',\n            component: 'default',\n            params: {\n                title: 'Panel 2',\n            },\n            minimumSize: 100,\n        });\n\n        event.api.addPanel({\n            id: 'panel_3',\n            component: 'default',\n            params: {\n                title: 'Panel 3',\n            },\n            minimumSize: 100,\n        });\n    };\n\n    return (\n        <SplitviewReact\n            components={components}\n            proportionalLayout={props.proportional}\n            onReady={onReady}\n            orientation={Orientation.HORIZONTAL}\n            className=\"dockview-theme-abyss\"\n        />\n    );\n};\n","\n\n/* @jsxRuntime classic */\n/* @jsx mdx */\n/* @jsxFrag mdx.Fragment */\n\nimport React from 'react';\nimport { mdx } from '@mdx-js/react';\n\n\nexport const frontMatter = {\n\tsidebar_position: 4,\n\tdescription: 'Dockview examples'\n};\nexport const contentTitle = 'Examples';\nexport const metadata = {\n  \"unversionedId\": \"examples\",\n  \"id\": \"version-1.5.1/examples\",\n  \"title\": \"Examples\",\n  \"description\": \"Dockview examples\",\n  \"source\": \"@site/versioned_docs/version-1.5.1/examples.mdx\",\n  \"sourceDirName\": \".\",\n  \"slug\": \"/examples\",\n  \"permalink\": \"/docs/examples\",\n  \"draft\": false,\n  \"editUrl\": \"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/versioned_docs/version-1.5.1/examples.mdx\",\n  \"tags\": [],\n  \"version\": \"1.5.1\",\n  \"sidebarPosition\": 4,\n  \"frontMatter\": {\n    \"sidebar_position\": 4,\n    \"description\": \"Dockview examples\"\n  },\n  \"sidebar\": \"tutorialSidebar\",\n  \"previous\": {\n    \"title\": \"Theme\",\n    \"permalink\": \"/docs/theme\"\n  },\n  \"next\": {\n    \"title\": \"Components\",\n    \"permalink\": \"/docs/category/components\"\n  }\n};\nexport const assets = {\n\n};\n\nimport { SimpleSplitview } from '@site/src/components/simpleSplitview';\nimport { SimpleGridview } from '@site/src/components/simpleGridview';\nimport { SimplePaneview } from '@site/src/components/simplePaneview';\nimport { SimpleDockview } from '@site/src/components/simpleDockview';\nexport const toc = [];\n\nconst layoutProps = {\n  toc\n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"examples\"\n    }}>{`Examples`}</h1>\n    <iframe src=\"https://codesandbox.io/embed/dockview-template-mdc9f7?fontsize=14&hidenavigation=1&theme=dark\" style={{\n      width: '100%',\n      height: '500px',\n      border: 0,\n      borderRaduis: '4px',\n      overflow: 'hidden'\n    }} title=\"dockview-template\" allow=\"accelerometer; ambient-light-sensor; camera; encrypted-media; geolocation; gyroscope; hid; microphone; midi; payment; usb; vr; xr-spatial-tracking\" sandbox=\"allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts\"></iframe>\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;\n"],"names":["components","default","props","style","padding","params","title","SimpleDockview","onReady","event","panel","api","addPanel","id","component","group","locked","header","hidden","position","referencePanel","direction","className","SimpleGridview","minimumWidth","proportionalLayout","orientation","Orientation","height","backgroundColor","headerComponents","myHeaderComponent","expanded","setExpanded","React","isExpanded","disposable","onDidExpansionChange","dispose","onClick","SimplePaneview","SimpleSplitview","proportional","minimumSize","frontMatter","sidebar_position","description","contentTitle","metadata","assets","toc","layoutProps","MDXContent","mdxType","src","width","border","borderRaduis","overflow","allow","sandbox","isMDXComponent"],"sourceRoot":""}