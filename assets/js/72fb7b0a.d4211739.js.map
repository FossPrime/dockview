{"version":3,"file":"assets/js/72fb7b0a.d4211739.js","mappings":"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","sources":["webpack://dockview-docs/./src/components/simpleSplitview.tsx","webpack://dockview-docs/./src/components/splitview/active.tsx","webpack://dockview-docs/./versioned_docs/version-1.4.3/components/splitview.mdx"],"sourcesContent":["import {\n    ISplitviewPanelProps,\n    Orientation,\n    SplitviewReact,\n    SplitviewReadyEvent,\n} from 'dockview';\nimport * as React from 'react';\n\nconst components = {\n    default: (props: ISplitviewPanelProps<{ title: string }>) => {\n        return <div style={{ padding: '20px' }}>{props.params.title}</div>;\n    },\n};\n\nexport const SimpleSplitview = (props: { proportional?: boolean }) => {\n    const onReady = (event: SplitviewReadyEvent) => {\n        event.api.addPanel({\n            id: 'panel_1',\n            component: 'default',\n            params: {\n                title: 'Panel 1',\n            },\n            minimumSize: 100,\n        });\n\n        event.api.addPanel({\n            id: 'panel_2',\n            component: 'default',\n            params: {\n                title: 'Panel 2',\n            },\n            minimumSize: 100,\n        });\n\n        event.api.addPanel({\n            id: 'panel_3',\n            component: 'default',\n            params: {\n                title: 'Panel 3',\n            },\n            minimumSize: 100,\n        });\n    };\n\n    return (\n        <SplitviewReact\n            components={components}\n            proportionalLayout={props.proportional}\n            onReady={onReady}\n            orientation={Orientation.HORIZONTAL}\n            className=\"dockview-theme-dark\"\n        />\n    );\n};\n","import {\n    ISplitviewPanel,\n    ISplitviewPanelProps,\n    Orientation,\n    SplitviewReact,\n    SplitviewReadyEvent,\n} from 'dockview';\nimport * as React from 'react';\n\nconst components = {\n    default: (props: ISplitviewPanelProps<{ title: string }>) => {\n        const [active, setActive] = React.useState<boolean>(props.api.isActive);\n        const [visible, setVisible] = React.useState<boolean>(\n            props.api.isVisible\n        );\n        const [focused, setFocused] = React.useState<boolean>(\n            props.api.isFocused\n        );\n        const [dimensions, setDimensions] = React.useState<{\n            height: number;\n            width: number;\n        }>({\n            height: props.api.height,\n            width: props.api.width,\n        });\n\n        React.useEffect(() => {\n            const disposable1 = props.api.onDidActiveChange((event) =>\n                setActive(event.isActive)\n            );\n            const disposable2 = props.api.onDidVisibilityChange((event) =>\n                setVisible(event.isVisible)\n            );\n            const disposable3 = props.api.onDidFocusChange((event) =>\n                setFocused(event.isFocused)\n            );\n            const disposable4 = props.api.onDidDimensionsChange((event) => {\n                setDimensions({ height: event.height, width: event.width });\n            });\n\n            return () => {\n                disposable1.dispose();\n                disposable2.dispose();\n                disposable3.dispose();\n                disposable4.dispose();\n            };\n        }, []);\n\n        return (\n            <div\n                style={{\n                    padding: '20px',\n                    display: 'grid',\n                    gridTemplateColumns: '100px 100px',\n                    lineHeight: '20px',\n                    gridTemplateRows: 'repeat(6, 20px)',\n                }}\n            >\n                <span>{'Panel ID: '}</span>\n                <span>{props.api.id}</span>\n                <span>{'Height: '}</span>\n                <span>{`${dimensions.height}px`}</span>\n                <span>{'Width: '}</span>\n                <span>{`${dimensions.width}px`}</span>\n                <span>{'Focused: '}</span>\n                <span style={{ color: focused ? 'green' : 'red' }}>{`${\n                    focused ? 'True' : 'False'\n                }`}</span>\n\n                <span>{'Active: '}</span>\n                <span style={{ color: active ? 'green' : 'red' }}>{`${\n                    active ? 'True' : 'False'\n                }`}</span>\n\n                <span>{'Visible: '}</span>\n                <span style={{ color: visible ? 'green' : 'red' }}>{`${\n                    visible ? 'True' : 'False'\n                }`}</span>\n            </div>\n        );\n    },\n};\n\nexport const SplitviewExample1 = (props: { proportional?: boolean }) => {\n    const [panels, setPanels] = React.useState<ISplitviewPanel[]>([]);\n\n    const onReady = React.useCallback((event: SplitviewReadyEvent) => {\n        event.api.onDidAddView((panel) => setPanels(event.api.panels));\n        event.api.onDidRemoveView((panel) => setPanels(event.api.panels));\n\n        event.api.addPanel({\n            id: 'panel_1',\n            component: 'default',\n            params: {\n                title: 'Panel 1',\n            },\n            minimumSize: 100,\n        });\n\n        event.api.addPanel({\n            id: 'panel_2',\n            component: 'default',\n            params: {\n                title: 'Panel 2',\n            },\n            minimumSize: 100,\n        });\n\n        event.api.addPanel({\n            id: 'panel_3',\n            component: 'default',\n            params: {\n                title: 'Panel 3',\n            },\n            minimumSize: 100,\n        });\n    }, []);\n\n    return (\n        <>\n            <div\n                style={{\n                    height: '150px',\n                    backgroundColor: 'rgb(30,30,30)',\n                    color: 'white',\n                }}\n            >\n                <SplitviewReact\n                    components={components}\n                    proportionalLayout={props.proportional}\n                    onReady={onReady}\n                    orientation={Orientation.HORIZONTAL}\n                    className=\"dockview-theme-dark\"\n                />\n            </div>\n            <div style={{ height: '20px', display: 'flex' }}>\n                {panels.map((panel) => {\n                    return (\n                        <div style={{ padding: '0px 20px' }}>\n                            <div>{panel.id}</div>\n                            <div>\n                                <button\n                                    onClick={() =>\n                                        panel.api.setVisible(\n                                            !panel.api.isVisible\n                                        )\n                                    }\n                                >\n                                    Toggle Visiblity\n                                </button>\n                                <button onClick={() => panel.api.setActive()}>\n                                    Set Active\n                                </button>\n                            </div>\n                        </div>\n                    );\n                })}\n            </div>\n        </>\n    );\n};\n","\n\n/* @jsxRuntime classic */\n/* @jsx mdx */\n/* @jsxFrag mdx.Fragment */\n\nimport React from 'react';\nimport { mdx } from '@mdx-js/react';\n\n\nexport const frontMatter = {};\nexport const contentTitle = 'Splitview';\nexport const metadata = {\n  \"unversionedId\": \"components/splitview\",\n  \"id\": \"version-1.4.3/components/splitview\",\n  \"title\": \"Splitview\",\n  \"description\": \"Introduction\",\n  \"source\": \"@site/versioned_docs/version-1.4.3/components/splitview.mdx\",\n  \"sourceDirName\": \"components\",\n  \"slug\": \"/components/splitview\",\n  \"permalink\": \"/docs/components/splitview\",\n  \"draft\": false,\n  \"editUrl\": \"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/versioned_docs/version-1.4.3/components/splitview.mdx\",\n  \"tags\": [],\n  \"version\": \"1.4.3\",\n  \"frontMatter\": {},\n  \"sidebar\": \"tutorialSidebar\",\n  \"previous\": {\n    \"title\": \"Paneview\",\n    \"permalink\": \"/docs/components/paneview\"\n  }\n};\nexport const assets = {\n\n};\n\nimport { SimpleSplitview } from '@site/src/components/simpleSplitview';\nimport { SplitviewExample1 } from '@site/src/components/splitview/active';\nimport Link from '@docusaurus/Link';\nexport const toc = [{\n  value: 'Introduction',\n  id: 'introduction',\n  level: 2\n}, {\n  value: 'SplitviewReact Component',\n  id: 'splitviewreact-component',\n  level: 2\n}, {\n  value: 'Splitview API',\n  id: 'splitview-api',\n  level: 2\n}, {\n  value: 'Splitview Panel API',\n  id: 'splitview-panel-api',\n  level: 2\n}, {\n  value: 'Advanced Features',\n  id: 'advanced-features',\n  level: 2\n}, {\n  value: 'Visibility',\n  id: 'visibility',\n  level: 3\n}, {\n  value: 'Active',\n  id: 'active',\n  level: 3\n}, {\n  value: 'Contraints',\n  id: 'contraints',\n  level: 3\n}];\n\nconst layoutProps = {\n  toc\n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"splitview\"\n    }}>{`Splitview`}</h1>\n    <h2 {...{\n      \"id\": \"introduction\"\n    }}>{`Introduction`}</h2>\n    <p>{`A Splitview is a collection of resizable horizontally or vertically stacked panels.`}</p>\n    <div style={{\n      height: '100px',\n      backgroundColor: 'rgb(30,30,30)',\n      color: 'white',\n      margin: '20px 0px'\n    }}>\n    <SimpleSplitview mdxType=\"SimpleSplitview\" />\n    </div>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\",\n        \"metastring\": \"title=\\\"Simple Splitview example\\\"\",\n        \"title\": \"\\\"Simple\",\n        \"Splitview\": true,\n        \"example\\\"\": true\n      }}>{`import {\n    ISplitviewPanelProps,\n    Orientation,\n    SplitviewReact,\n    SplitviewReadyEvent,\n} from 'dockview';\n\nconst components = {\n    default: (props: ISplitviewPanelProps<{ title: string }>) => {\n        return <div style={{ padding: '20px' }}>{props.params.title}</div>;\n    },\n};\n\nexport const SimpleSplitview = () => {\n    const onReady = (event: SplitviewReadyEvent) => {\n        event.api.addPanel({\n            id: 'panel_1',\n            component: 'default',\n            params: {\n                title: 'Panel 1',\n            },\n        });\n\n        event.api.addPanel({\n            id: 'panel_2',\n            component: 'default',\n            params: {\n                title: 'Panel 2',\n            },\n        });\n\n        event.api.addPanel({\n            id: 'panel_3',\n            component: 'default',\n            params: {\n                title: 'Panel 3',\n            },\n        });\n    };\n\n    return (\n        <SplitviewReact\n            components={components}\n            onReady={onReady}\n            orientation={Orientation.HORIZONTAL}\n            className=\"dockview-theme-dark\"\n        />\n    );\n};\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"splitviewreact-component\"\n    }}>{`SplitviewReact Component`}</h2>\n    <p>{`You can create a Splitview through the use of the `}<inlineCode parentName=\"p\">{`ReactSplitview`}</inlineCode>{` component.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`import { ReactSplitview } from 'dockview';\n`}</code></pre>\n    <p>{`Using the `}<inlineCode parentName=\"p\">{`onReady`}</inlineCode>{` prop you can access to the component `}<inlineCode parentName=\"p\">{`api`}</inlineCode>{` and add panels either through deserialization or the individual addition of panels.`}</p>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Property`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Type`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Optional`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Default`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Description`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`onReady`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`(event: SplitviewReadyEvent) => void`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`No`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Function`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`components`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`Record<string, ISplitviewPanelProps>`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`No`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Panel renderers`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`orientation`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`Orientation`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Yes`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`Orientation.HORIZONTAL`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Orientation of the Splitview`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`proportionalLayout`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`boolean`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Yes`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`true`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`See `}<Link to=\"../basics/#proportional-layout\" mdxType=\"Link\">{`Proportional layout`}</Link></td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`hideBorders`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`boolean`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Yes`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`false`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Hide the borders between panels`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`className`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`string`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Yes`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`''`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Attaches a classname`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`disableAutoResizing`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`boolean`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Yes`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`false`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`See `}<Link to=\"../basics/#auto-resizing\" mdxType=\"Link\">{`Auto Resizing`}</Link></td>\n        </tr>\n      </tbody>\n    </table>\n    <h2 {...{\n      \"id\": \"splitview-api\"\n    }}>{`Splitview API`}</h2>\n    <p>{`The Splitview API is exposed both at the `}<inlineCode parentName=\"p\">{`onReady`}</inlineCode>{` event and on each panel through `}<inlineCode parentName=\"p\">{`props.containerApi`}</inlineCode>{`.\nThrough this API you can control general features of the component and access all added panels.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\",\n        \"metastring\": \"title=\\\"Splitview API via Panel component\\\"\",\n        \"title\": \"\\\"Splitview\",\n        \"API\": true,\n        \"via\": true,\n        \"Panel\": true,\n        \"component\\\"\": true\n      }}>{`const MyComponent = (props: ISplitviewPanelProps<{ title: string }>) => {\n    // props.containerApi...\n\n    return <div>{\\`My first panel has the title: \\${props.params.title}\\`}</div>;\n};\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\",\n        \"metastring\": \"title=\\\"Splitview API via the onReady callback\\\"\",\n        \"title\": \"\\\"Splitview\",\n        \"API\": true,\n        \"via\": true,\n        \"the\": true,\n        \"onReady\": true,\n        \"callback\\\"\": true\n      }}>{`const onReady = (event: SplitviewReadyEvent) => {\n    // event.api...\n};\n`}</code></pre>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Property`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Type`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Description`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`height`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`number`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Component pixel height`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`width`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`number`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Component pixel width`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`minimumSize`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`number`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`The sum of the `}<inlineCode parentName=\"td\">{`minimumSize`}</inlineCode>{` property for each panel`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`maximumSize`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`number`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`The sum of the `}<inlineCode parentName=\"td\">{`maximumSize`}</inlineCode>{` property for each panel`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`length`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`number`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Number of panels`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`panels`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`ISplitviewPanel[]`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`All panels`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`onDidLayoutChange`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`Event<void>`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Fires on layout change`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`onDidLayoutFromJSON`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`Event<void>`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Fires of layout change caused by a fromJSON deserialization call`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`onDidAddView`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`Event<IView>`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Fires when a view is added`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`onDidRemoveView`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`Event<IView>`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Fires when a view is removed`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`addPanel`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`addPanel(options: AddSplitviewComponentOptions): ISplitviewPanel`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`removePanel`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`(panel: ISplitviewPanel, sizing?: Sizing): void`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`getPanel`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`(id:string): ISplitviewPanel \\\\| undefined`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`movePanel`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`(from: number, to: number): void`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`updateOptions`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`(options: SplitviewComponentUpdateOptions): void`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`focus`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`(): void`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Focus the active panel, if exists`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`layout`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`(width: number, height:number): void`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`See `}<Link to=\"../basics/#auto-resizing\" mdxType=\"Link\">{`Auto Resizing`}</Link></td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`fromJSON`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`(data: SerializedSplitview): void`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><Link to=\"../basics/#serialization\" mdxType=\"Link\">{`Serialization`}</Link></td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`toJSON`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`(): SerializedSplitview`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><Link to=\"../basics/#serialization\" mdxType=\"Link\">{`Serialization`}</Link></td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`clear`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`(): void`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Clears the current layout`}</td>\n        </tr>\n      </tbody>\n    </table>\n    <h2 {...{\n      \"id\": \"splitview-panel-api\"\n    }}>{`Splitview Panel API`}</h2>\n    <p>{`The Splitview panel API is exposed on each panel containing actions and variables specific to that panel.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\",\n        \"metastring\": \"title=\\\"Splitview panel API via Panel component\\\"\",\n        \"title\": \"\\\"Splitview\",\n        \"panel\": true,\n        \"API\": true,\n        \"via\": true,\n        \"Panel\": true,\n        \"component\\\"\": true\n      }}>{`const MyComponent = (props: ISplitviewPanelProps<{ title: string }>) => {\n    // props.api...\n\n    return <div>{\\`My first panel has the title: \\${props.params.title}\\`}</div>;\n};\n`}</code></pre>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Property`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Type`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Description`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`id`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`string`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Panel id`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`isFocused`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`boolean`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Is panel focsed`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`isActive`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`boolean`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Is panel active`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`isVisible`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`boolean`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Is panel visible`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`width`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`number`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Panel width`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`height`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`number`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Panel height`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`onDidDimensionsChange`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`Event<PanelDimensionChangeEvent>`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Fires when panel dimensions change`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`onDidFocusChange`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`Event<FocusEvent>`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Fire when panel is focused and blurred`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`onDidVisibilityChange`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`Event<VisibilityEvent>`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Fires when the panels visiblity property is changed (see `}<Link to=\"./splitview/#visibility\" mdxType=\"Link\">{`Panel Visibility`}</Link>{`)`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`onDidActiveChange`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`Event<ActiveEvent>`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Fires when the panels active property is changed (see `}<Link to=\"./splitview/#active\" mdxType=\"Link\">{`Active Panel`}</Link>{`)`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`onDidConstraintsChange`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`onDidConstraintsChange: Event<PanelConstraintChangeEvent>`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Fires when the panels size contrainsts change (see `}<Link to=\"./splitview/#contraints\" mdxType=\"Link\">{`Panel Constraints`}</Link>{`)`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`setVisible`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`(isVisible: boolean): void`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`setActive`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`(): void`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`setConstraints`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`(value: PanelConstraintChangeEvent2): void;`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`setSize`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`(event: PanelSizeEvent): void`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n        </tr>\n      </tbody>\n    </table>\n    <h2 {...{\n      \"id\": \"advanced-features\"\n    }}>{`Advanced Features`}</h2>\n    <p>{`Listed below are some functionalities avalaible through both the panel and component APIs. The live demo shows examples of these in real-time.`}</p>\n    <div style={{\n      height: '200px',\n      margin: '20px 0px'\n    }}>\n    <SplitviewExample1 mdxType=\"SplitviewExample1\" />\n    </div>\n    <h3 {...{\n      \"id\": \"visibility\"\n    }}>{`Visibility`}</h3>\n    <p>{`A panels visibility can be controlled and monitored through the following code.\nA panel with visibility set to `}<inlineCode parentName=\"p\">{`false`}</inlineCode>{` will remain as a part of the components list of panels but will not be rendered.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`const disposable = props.api.onDidVisibilityChange(({ isVisible }) => {\n    //\n});\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`api.setVisible(true);\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"active\"\n    }}>{`Active`}</h3>\n    <p>{`Only one panel in the `}<inlineCode parentName=\"p\">{`splitview`}</inlineCode>{` can be the active panel at any one time.\nSetting a panel as active will set all the others as inactive.\nA focused panel is always the active panel but an active panel is not always focused.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`const disposable = props.api.onDidActiveChange(({ isActive }) => {\n    //\n});\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`api.setActive();\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"contraints\"\n    }}>{`Contraints`}</h3>\n    <p>{`When adding a panel you can specify pixel size contraints`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`event.api.addPanel({\n    id: 'panel_3',\n    component: 'default',\n    minimumSize: 100,\n    maximumSize: 1000,\n});\n`}</code></pre>\n    <p>{`These contraints can be updated throughout the lifecycle of the `}<inlineCode parentName=\"p\">{`splitview`}</inlineCode>{` using the panel API`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`props.api.onDidConstraintsChange(({ maximumSize, minimumSize }) => {\n    //\n});\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`api.setConstraints({\n    maximumSize: 200,\n    minimumSize: 400,\n});\n`}</code></pre>\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;\n"],"names":["components","default","props","style","padding","params","title","SimpleSplitview","proportionalLayout","proportional","onReady","event","api","addPanel","id","component","minimumSize","orientation","Orientation","className","React","isActive","active","setActive","isVisible","visible","setVisible","isFocused","focused","setFocused","height","width","dimensions","setDimensions","disposable1","onDidActiveChange","disposable2","onDidVisibilityChange","disposable3","onDidFocusChange","disposable4","onDidDimensionsChange","dispose","display","gridTemplateColumns","lineHeight","gridTemplateRows","color","SplitviewExample1","panels","setPanels","onDidAddView","panel","onDidRemoveView","backgroundColor","map","onClick","frontMatter","contentTitle","metadata","assets","toc","value","level","layoutProps","MDXContent","mdxType","margin","parentName","to","isMDXComponent"],"sourceRoot":""}