{"version":3,"file":"assets/js/e3ad1f13.7b4fc1fd.js","mappings":"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","sources":["webpack://dockview-docs/./src/components/console/console.tsx","webpack://dockview-docs/./src/components/dockview/contextMenu.tsx","webpack://dockview-docs/./src/components/dockview/customHeaders.tsx","webpack://dockview-docs/./src/components/dockview/dnd.tsx","webpack://dockview-docs/./src/components/dockview/events.tsx","webpack://dockview-docs/./src/components/dockview/nested.tsx","webpack://dockview-docs/./src/components/dockview/rendering.tsx","webpack://dockview-docs/./src/components/simpleDockview.tsx","webpack://dockview-docs/./docs/components/dockview.mdx"],"sourcesContent":["import * as React from 'react';\nimport './console.scss';\n\nconst formatTime = (now: Date) => {\n    const pad = (x: number) => (x < 10 ? `0${x}` : `${x}`);\n\n    return `${pad(now.getHours())}:${pad(now.getMinutes())}:${pad(\n        now.getSeconds()\n    )}.${now.getMilliseconds()}`;\n};\n\nexport interface Line {\n    timestamp: Date;\n    text: string;\n    css?: React.CSSProperties;\n}\n\nexport interface IConsoleProps {\n    lines: Line[];\n}\n\nexport const Console = (props: IConsoleProps) => {\n    const ref = React.useRef<HTMLDivElement>();\n\n    React.useLayoutEffect(() => {\n        if (!ref.current) {\n            return;\n        }\n\n        ref.current.scrollTop = Math.max(\n            0,\n            ref.current.scrollHeight - ref.current.clientHeight\n        );\n    }, [props.lines]);\n\n    return (\n        <div ref={ref} className=\"console-container\">\n            {props.lines.map((line, i) => {\n                return (\n                    <div key={i} className=\"console-line\">\n                        <span className=\"console-line-timestamp\">\n                            {formatTime(line.timestamp)}\n                        </span>\n                        <span className=\"console-line-text\" style={line.css}>\n                            {line.text}\n                        </span>\n                    </div>\n                );\n            })}\n        </div>\n    );\n};\n","import {\n    DockviewReact,\n    DockviewReadyEvent,\n    IDockviewPanelHeaderProps,\n    IDockviewPanelProps,\n    TabContextMenuEvent,\n} from 'dockview';\nimport * as React from 'react';\n\nconst components = {\n    default: (props: IDockviewPanelProps<{ title: string }>) => {\n        return <div style={{ padding: '20px' }}>{props.params.title}</div>;\n    },\n};\n\nconst CustomTab = (\n    props: IDockviewPanelHeaderProps & React.DOMAttributes<HTMLDivElement>\n) => {\n    const onClose = React.useCallback(\n        (event: React.MouseEvent<HTMLSpanElement>) => {\n            event.stopPropagation();\n            props.api.close();\n        },\n        [props.api]\n    );\n\n    const onClick = React.useCallback(\n        (event: React.MouseEvent<HTMLDivElement>) => {\n            props.api.setActive();\n\n            if (props.onClick) {\n                props.onClick(event);\n            }\n        },\n        [props.api, props.onClick]\n    );\n\n    return (\n        <div {...props} onClick={onClick} className=\"dockview-react-tab\">\n            <span className=\"dockview-react-tab-title\">{props.api.title}</span>\n            <span onClick={onClose} className=\"dockview-react-tab-action\">\n                {'✕'}\n            </span>\n        </div>\n    );\n};\n\nconst Test = (props: IDockviewPanelHeaderProps) => {\n    const onContextMenu = (event: React.MouseEvent) => {\n        event.preventDefault();\n        alert('hiya');\n    };\n    return <CustomTab onContextMenu={onContextMenu} {...props} />;\n};\n\nconst tabComponents = {\n    default: Test,\n};\n\nexport const ContextMenuDockview = () => {\n    const onReady = (event: DockviewReadyEvent) => {\n        event.api.addPanel({\n            id: 'panel_1',\n            component: 'default',\n            tabComponent: 'default',\n            params: {\n                title: 'Panel 1',\n            },\n        });\n\n        event.api.addPanel({\n            id: 'panel_2',\n            component: 'default',\n            tabComponent: 'default',\n            params: {\n                title: 'Panel 2',\n            },\n        });\n\n        event.api.addPanel({\n            id: 'panel_3',\n            component: 'default',\n            tabComponent: 'default',\n            params: {\n                title: 'Panel 3',\n            },\n        });\n\n        event.api.addPanel({\n            id: 'panel_4',\n            component: 'default',\n            tabComponent: 'default',\n            params: {\n                title: 'Panel 4',\n            },\n            position: { referencePanel: 'panel_1', direction: 'right' },\n        });\n    };\n\n    const onContextMenu = (event: TabContextMenuEvent) => {\n        event.event.preventDefault();\n        alert(`Content appear event fired for panel ${event.panel.id}`);\n    };\n\n    return (\n        <DockviewReact\n            components={components}\n            tabComponents={tabComponents}\n            onReady={onReady}\n            className=\"dockview-theme-abyss\"\n            onTabContextMenu={onContextMenu}\n        />\n    );\n};\n","import {\n    DockviewDefaultTab,\n    DockviewReact,\n    DockviewReadyEvent,\n    IDockviewPanelHeaderProps,\n    IDockviewPanelProps,\n} from 'dockview';\nimport * as React from 'react';\n\nconst components = {\n    default: (props: IDockviewPanelProps<{ title: string }>) => {\n        return <div style={{ padding: '20px' }}>{props.params.title}</div>;\n    },\n};\n\nconst MyCustomheader = (props: IDockviewPanelHeaderProps) => {\n    const onContextMenu = (event: React.MouseEvent) => {\n        event.preventDefault();\n        alert('context menu');\n    };\n    return <DockviewDefaultTab onContextMenu={onContextMenu} {...props} />;\n};\n\nconst headerComponents = {\n    default: (props: IDockviewPanelHeaderProps) => {\n        const onContextMenu = (event: React.MouseEvent) => {\n            event.preventDefault();\n            alert('context menu');\n        };\n        return <DockviewDefaultTab onContextMenu={onContextMenu} {...props} />;\n    },\n};\n\nexport const CustomHeadersDockview = () => {\n    const onReady = (event: DockviewReadyEvent) => {\n        const d = localStorage.getItem('test');\n\n        event.api.addPanel({\n            id: 'panel_1',\n            component: 'default',\n            title: 'Panel 1',\n        });\n        event.api.addPanel({\n            id: 'panel_2',\n            component: 'default',\n            title: 'Panel 2',\n        });\n        event.api.addPanel({\n            id: 'panel_3',\n            component: 'default',\n            title: 'Panel 3',\n        });\n        event.api.addPanel({\n            id: 'panel_4',\n            component: 'default',\n            title: 'Panel 4',\n            position: { referencePanel: 'panel_3', direction: 'right' },\n        });\n        event.api.addPanel({\n            id: 'panel_5',\n            component: 'default',\n            title: 'Panel 5',\n            position: { referencePanel: 'panel_4', direction: 'within' },\n        });\n        const panel6 = event.api.addPanel({\n            id: 'panel_6',\n            component: 'default',\n            title: 'Panel 6',\n            position: { referencePanel: 'panel_4', direction: 'below' },\n        });\n        panel6.group.locked = true;\n        panel6.group.header.hidden = true;\n        event.api.addPanel({\n            id: 'panel_7',\n            component: 'default',\n            title: 'Panel 7',\n            position: { referencePanel: 'panel_6', direction: 'right' },\n        });\n        event.api.addPanel({\n            id: 'panel_8',\n            component: 'default',\n\n            title: 'Panel 8',\n            position: { referencePanel: 'panel_7', direction: 'within' },\n        });\n\n        event.api.addEmptyGroup();\n    };\n\n    return (\n        <div\n            style={{\n                height: '500px',\n                margin: '40px 0px',\n                display: 'flex',\n                flexDirection: 'column',\n            }}\n        >\n            <DockviewReact\n                components={components}\n                defaultTabComponent={headerComponents.default}\n                onReady={onReady}\n                className=\"dockview-theme-abyss\"\n            />\n        </div>\n    );\n};\n","import {\n    DockviewDndOverlayEvent,\n    DockviewDropEvent,\n    DockviewReact,\n    DockviewReadyEvent,\n    IDockviewPanelProps,\n} from 'dockview';\nimport * as React from 'react';\n\nconst components = {\n    default: (props: IDockviewPanelProps<{ title: string }>) => {\n        return (\n            <div style={{ padding: '20px' }}>\n                <div>{props.params.title}</div>\n            </div>\n        );\n    },\n};\n\nexport const DndDockview = (props: { renderVisibleOnly: boolean }) => {\n    const onReady = (event: DockviewReadyEvent) => {\n        event.api.addPanel({\n            id: 'panel_1',\n            component: 'default',\n            params: {\n                title: 'Panel 1',\n            },\n        });\n\n        event.api.addPanel({\n            id: 'panel_2',\n            component: 'default',\n            params: {\n                title: 'Panel 2',\n            },\n        });\n\n        event.api.addPanel({\n            id: 'panel_3',\n            component: 'default',\n            params: {\n                title: 'Panel 3',\n            },\n        });\n\n        event.api.addPanel({\n            id: 'panel_4',\n            component: 'default',\n            params: {\n                title: 'Panel 4',\n            },\n            position: { referencePanel: 'panel_1', direction: 'right' },\n        });\n    };\n\n    const onDidDrop = (event: DockviewDropEvent) => {\n        const { group } = event;\n\n        event.api.addPanel({\n            id: 'test',\n            component: 'default',\n            position: {\n                referencePanel: group.activePanel.id,\n                direction: 'within',\n            },\n        });\n    };\n\n    const showDndOverlay = (event: DockviewDndOverlayEvent) => {\n        return true;\n    };\n\n    return (\n        <>\n            <div\n                style={{\n                    backgroundColor: 'orange',\n                    padding: '0px 8px',\n                    borderRadius: '4px',\n                    width: '100px',\n                    cursor: 'pointer',\n                }}\n                draggable={true}\n            >\n                Drag me\n            </div>\n            <div\n                style={{\n                    height: '300px',\n                    backgroundColor: 'rgb(30,30,30)',\n                    color: 'white',\n                    margin: '20px 0px',\n                }}\n            >\n                <DockviewReact\n                    components={components}\n                    onReady={onReady}\n                    className=\"dockview-theme-abyss\"\n                    onDidDrop={onDidDrop}\n                    showDndOverlay={showDndOverlay}\n                />\n            </div>\n        </>\n    );\n};\n","import {\n    Orientation,\n    DockviewReact,\n    DockviewReadyEvent,\n    DockviewApi,\n    IDockviewPanelProps,\n} from 'dockview';\nimport * as React from 'react';\nimport { Console, Line } from '../console/console';\n\nconst components = {\n    default: (props: IDockviewPanelProps<{ title: string }>) => {\n        return <div style={{ padding: '20px' }}>{props.params.title}</div>;\n    },\n};\n\nexport const EventsDockview = () => {\n    const [lines, setLines] = React.useState<Line[]>([]);\n    const [checked, setChecked] = React.useState<boolean>(false);\n\n    const [api, setApi] = React.useState<DockviewApi | undefined>();\n\n    React.useEffect(() => {\n        if (!api) {\n            return () => {\n                //noop\n            };\n        }\n\n        const disposables = [\n            api.onDidAddPanel((panel) => {\n                setLines((lines) => [\n                    ...lines,\n                    {\n                        timestamp: new Date(),\n                        text: `onDidAddPanel: ${panel.id}`,\n                    },\n                ]);\n            }),\n            api.onDidRemovePanel((panel) => {\n                setLines((lines) => [\n                    ...lines,\n                    {\n                        timestamp: new Date(),\n                        text: `onDidRemovePanel: ${panel.id}`,\n                    },\n                ]);\n            }),\n            api.onDidActivePanelChange((panel) => {\n                setLines((lines) => [\n                    ...lines,\n                    {\n                        timestamp: new Date(),\n                        text: `onDidActivePanelChange: ${panel?.id}`,\n                    },\n                ]);\n            }),\n            api.onDidAddGroup((panel) => {\n                setLines((lines) => [\n                    ...lines,\n                    {\n                        timestamp: new Date(),\n                        text: `onDidAddGroup: ${panel.id}`,\n                    },\n                ]);\n            }),\n            api.onDidRemoveGroup((panel) => {\n                setLines((lines) => [\n                    ...lines,\n                    {\n                        timestamp: new Date(),\n                        text: `onDidRemoveGroup: ${panel.id}`,\n                    },\n                ]);\n            }),\n            api.onDidActiveGroupChange((panel) => {\n                setLines((lines) => [\n                    ...lines,\n                    {\n                        timestamp: new Date(),\n                        text: `onDidActiveGroupChange: ${panel?.id}`,\n                    },\n                ]);\n            }),\n            api.onDidLayoutChange((panel) => {\n                setLines((lines) => [\n                    ...lines,\n                    { timestamp: new Date(), text: `onDidLayoutChange` },\n                ]);\n            }),\n            api.onDidLayoutFromJSON((panel) => {\n                setLines((lines) => [\n                    ...lines,\n                    { timestamp: new Date(), text: `onDidLayoutFromJSON` },\n                ]);\n            }),\n        ];\n\n        return () => {\n            disposables.forEach((disposable) => disposable.dispose());\n        };\n    }, [api]);\n\n    React.useEffect(() => {\n        if (!api) {\n            return;\n        }\n\n        setLines((lines) => [\n            ...lines,\n            {\n                timestamp: new Date(),\n                text: `Rebuilding view fromJSON:${checked}`,\n                css: { color: 'yellow', backgroundColor: 'grey' },\n            },\n        ]);\n\n        if (checked) {\n            api.fromJSON({\n                grid: {\n                    root: {\n                        type: 'branch',\n                        data: [\n                            {\n                                type: 'leaf',\n                                data: {\n                                    views: ['panel_1', 'panel_2', 'panel_3'],\n                                    activeView: 'panel_3',\n                                    id: '77',\n                                },\n                                size: 262,\n                            },\n                            {\n                                type: 'branch',\n                                data: [\n                                    {\n                                        type: 'leaf',\n                                        data: {\n                                            views: ['panel_5'],\n                                            activeView: 'panel_5',\n                                            id: '79',\n                                        },\n                                        size: 100,\n                                    },\n                                    {\n                                        type: 'leaf',\n                                        data: {\n                                            views: ['panel_6', 'panel_8'],\n                                            activeView: 'panel_8',\n                                            id: '80',\n                                        },\n                                        size: 100,\n                                    },\n                                    {\n                                        type: 'leaf',\n                                        data: {\n                                            views: ['panel_7'],\n                                            activeView: 'panel_7',\n                                            id: '81',\n                                        },\n                                        size: 100,\n                                    },\n                                ],\n                                size: 262,\n                            },\n                            {\n                                type: 'leaf',\n                                data: {\n                                    views: ['panel_4'],\n                                    activeView: 'panel_4',\n                                    id: '78',\n                                },\n                                size: 263.75,\n                            },\n                        ],\n                        size: 300,\n                    },\n                    width: 787.75,\n                    height: 300,\n                    orientation: Orientation.HORIZONTAL,\n                },\n                panels: {\n                    panel_1: {\n                        id: 'panel_1',\n                        view: { content: { id: 'default' } },\n                        params: { title: 'Panel 1' },\n                        title: 'panel_1',\n                    },\n                    panel_2: {\n                        id: 'panel_2',\n                        view: { content: { id: 'default' } },\n                        params: { title: 'Panel 2' },\n                        title: 'panel_2',\n                    },\n                    panel_3: {\n                        id: 'panel_3',\n                        view: { content: { id: 'default' } },\n                        params: { title: 'Panel 3' },\n                        title: 'panel_3',\n                    },\n                    panel_4: {\n                        id: 'panel_4',\n                        view: { content: { id: 'default' } },\n                        params: { title: 'Panel 4' },\n                        title: 'panel_4',\n                    },\n                    panel_5: {\n                        id: 'panel_5',\n                        view: { content: { id: 'default' } },\n                        params: { title: 'Panel 5' },\n                        title: 'panel_5',\n                    },\n                    panel_6: {\n                        id: 'panel_6',\n                        view: { content: { id: 'default' } },\n                        params: { title: 'Panel 6' },\n                        title: 'panel_6',\n                    },\n                    panel_8: {\n                        id: 'panel_8',\n                        view: { content: { id: 'default' } },\n                        params: { title: 'Panel 8' },\n                        title: 'panel_8',\n                    },\n                    panel_7: {\n                        id: 'panel_7',\n                        view: { content: { id: 'default' } },\n                        params: { title: 'Panel 7' },\n                        title: 'panel_7',\n                    },\n                },\n                activeGroup: '80',\n                options: {},\n            });\n            return;\n        }\n\n        api.clear();\n\n        api.addPanel({\n            id: 'panel_1',\n            component: 'default',\n            params: {\n                title: 'Panel 1',\n            },\n        });\n\n        api.addPanel({\n            id: 'panel_2',\n            component: 'default',\n            params: {\n                title: 'Panel 2',\n            },\n        });\n\n        api.addPanel({\n            id: 'panel_3',\n            component: 'default',\n            params: {\n                title: 'Panel 3',\n            },\n        });\n\n        api.addPanel({\n            id: 'panel_4',\n            component: 'default',\n            params: {\n                title: 'Panel 4',\n            },\n            position: { referencePanel: 'panel_1', direction: 'right' },\n        });\n\n        api.addPanel({\n            id: 'panel_5',\n            component: 'default',\n            params: {\n                title: 'Panel 5',\n            },\n            position: { referencePanel: 'panel_3', direction: 'right' },\n        });\n\n        api.addPanel({\n            id: 'panel_6',\n            component: 'default',\n            params: {\n                title: 'Panel 6',\n            },\n            position: { referencePanel: 'panel_5', direction: 'below' },\n        });\n\n        api.addPanel({\n            id: 'panel_7',\n            component: 'default',\n            params: {\n                title: 'Panel 7',\n            },\n            position: { referencePanel: 'panel_6', direction: 'below' },\n        });\n\n        api.addPanel({\n            id: 'panel_8',\n            component: 'default',\n            params: {\n                title: 'Panel 8',\n            },\n            position: { referencePanel: 'panel_6', direction: 'within' },\n        });\n    }, [api, checked]);\n\n    const onReady = (event: DockviewReadyEvent) => {\n        setApi(event.api);\n    };\n\n    return (\n        <>\n            <label>\n                <input\n                    type=\"checkbox\"\n                    checked={checked}\n                    onChange={(e) => setChecked(e.target.checked)}\n                />\n                <span>{'fromJSON'}</span>\n            </label>\n            <div\n                style={{\n                    height: '300px',\n                    backgroundColor: 'rgb(30,30,30)',\n                    color: 'white',\n                    margin: '20px 0px',\n                }}\n            >\n                <DockviewReact\n                    components={components}\n                    onReady={onReady}\n                    className=\"dockview-theme-abyss\"\n                />\n            </div>\n\n            <Console lines={lines} />\n        </>\n    );\n};\n","import {\n    DockviewDndOverlayEvent,\n    DockviewDropEvent,\n    DockviewReact,\n    DockviewReadyEvent,\n    IDockviewPanelProps,\n} from 'dockview';\nimport * as React from 'react';\nimport './nested.scss';\n\nconst InnerDockview = () => {\n    const onReady = (event: DockviewReadyEvent) => {\n        event.api.addPanel({\n            id: 'panel_1',\n            component: 'default',\n        });\n\n        event.api.addPanel({\n            id: 'panel_2',\n            component: 'default',\n        });\n\n        event.api.addPanel({\n            id: 'panel_3',\n            component: 'default',\n        });\n    };\n\n    return (\n        <DockviewReact\n            onReady={onReady}\n            components={components}\n            className=\"dockview-theme-abyss nested-dockview\"\n        />\n    );\n};\n\nconst components = {\n    default: (props: IDockviewPanelProps<{ title: string }>) => {\n        return (\n            <div\n                style={{\n                    height: '100%',\n                    padding: '20px',\n                    background: 'var(--dv-group-view-background-color)',\n                }}\n            >\n                {props.params.title}\n            </div>\n        );\n    },\n    innerDockview: InnerDockview,\n};\n\nexport const NestedDockview = () => {\n    const onReady = (event: DockviewReadyEvent) => {\n        event.api.addPanel({\n            id: 'panel_1',\n            component: 'default',\n        });\n\n        event.api.addPanel({\n            id: 'panel_2',\n            component: 'default',\n        });\n\n        event.api.addPanel({\n            id: 'panel_3',\n            component: 'innerDockview',\n            position: { referencePanel: 'panel_2', direction: 'right' },\n        });\n    };\n\n    const showDndOverlay = (event: DockviewDndOverlayEvent) => {\n        // console.log(event.getData());\n\n        return false;\n    };\n\n    const onDidDrop = (event: DockviewDropEvent) => {\n        // event.getData();\n    };\n\n    return (\n        <div\n            style={{\n                height: '500px',\n                display: 'flex',\n                flexDirection: 'column',\n            }}\n        >\n            <DockviewReact\n                onReady={onReady}\n                components={components}\n                className=\"dockview-theme-abyss\"\n                showDndOverlay={showDndOverlay}\n                onDidDrop={onDidDrop}\n            />\n        </div>\n    );\n};\n","import {\n    DockviewReact,\n    DockviewReadyEvent,\n    IDockviewPanelProps,\n    PanelApi,\n} from 'dockview';\nimport * as React from 'react';\n\nimport { atom, useRecoilState, useRecoilValue } from 'recoil';\n\nconst renderVisibleComponentsOnlyAtom = atom<boolean>({\n    key: 'renderVisibleComponentsOnlyAtom',\n    default: false,\n});\n\nfunction RenderWhenVisible<\n    T extends { api: Pick<PanelApi, 'isVisible' | 'onDidVisibilityChange'> }\n>(component: React.FunctionComponent<T>) {\n    const HigherOrderComponent = (props: T) => {\n        const [visible, setVisible] = React.useState<boolean>(\n            props.api.isVisible\n        );\n\n        const render = useRecoilValue(renderVisibleComponentsOnlyAtom);\n\n        React.useEffect(() => {\n            const disposable = props.api.onDidVisibilityChange((event) =>\n                setVisible(event.isVisible)\n            );\n\n            return () => {\n                disposable.dispose();\n            };\n        }, [props.api]);\n\n        if (!visible && render) {\n            return null;\n        }\n\n        return React.createElement(component, props);\n    };\n    return HigherOrderComponent;\n}\n\nconst formatLine = (line: string) => {\n    const now = new Date();\n\n    const pad = (x: number) => (x < 10 ? `0${x}` : `${x}`);\n\n    const time = `${pad(now.getHours())}:${pad(now.getMinutes())}:${pad(\n        now.getSeconds()\n    )}`;\n\n    return `[${time}] ${line}`;\n};\n\nconst components = {\n    default: RenderWhenVisible(\n        (props: IDockviewPanelProps<{ title: string }>) => {\n            const [lines, setLines] = React.useState<string[]>([\n                formatLine('Component created'),\n            ]);\n\n            React.useEffect(() => {\n                setLines((lines) => [\n                    ...lines,\n                    formatLine('Running task for 5 seconds'),\n                ]);\n                const timeout = setTimeout(() => {\n                    setLines((lines) => [\n                        ...lines,\n                        formatLine('Task completed'),\n                    ]);\n                }, 5000);\n\n                return () => {\n                    clearTimeout(timeout);\n                };\n            }, []);\n\n            return (\n                <div style={{ padding: '20px' }}>\n                    <div>{props.params.title}</div>\n                    {lines.map((line, i) => (\n                        <div key={i}>{line}</div>\n                    ))}\n                </div>\n            );\n        }\n    ),\n};\n\nexport const RenderingDockview = (props: { renderVisibleOnly: boolean }) => {\n    const [render, setRender] = useRecoilState(renderVisibleComponentsOnlyAtom);\n\n    React.useEffect(\n        () => setRender(props.renderVisibleOnly),\n        [props.renderVisibleOnly]\n    );\n\n    const onReady = (event: DockviewReadyEvent) => {\n        event.api.addPanel({\n            id: 'panel_1',\n            component: 'default',\n            params: {\n                title: 'Panel 1',\n            },\n        });\n\n        event.api.addPanel({\n            id: 'panel_2',\n            component: 'default',\n            params: {\n                title: 'Panel 2',\n            },\n        });\n\n        event.api.addPanel({\n            id: 'panel_3',\n            component: 'default',\n            params: {\n                title: 'Panel 3',\n            },\n        });\n\n        event.api.addPanel({\n            id: 'panel_4',\n            component: 'default',\n            params: {\n                title: 'Panel 4',\n            },\n            position: { referencePanel: 'panel_1', direction: 'right' },\n        });\n    };\n\n    return (\n        <DockviewReact\n            components={components}\n            onReady={onReady}\n            className=\"dockview-theme-abyss\"\n        />\n    );\n};\n\nexport const Checkbox = () => {\n    const [render, setRender] = useRecoilState(renderVisibleComponentsOnlyAtom);\n\n    return (\n        <label>\n            Render only when visible\n            <input\n                type=\"checkbox\"\n                checked={render}\n                onChange={(e) => setRender(e.target.checked)}\n            />\n        </label>\n    );\n};\n","import {\n    DockviewReact,\n    DockviewReadyEvent,\n    IDockviewPanelProps,\n    PanelApi,\n} from 'dockview';\nimport * as React from 'react';\n\nconst components = {\n    default: (props: IDockviewPanelProps<{ title: string }>) => {\n        return <div style={{ padding: '20px' }}>{props.params.title}</div>;\n    },\n};\n\nconst RenderWhenVisible = <T,>(\n    props: T & {\n        children: React.FunctionComponent<T>;\n        api: Pick<PanelApi, 'isVisible' | 'onDidVisibilityChange'>;\n    }\n) => {\n    const [visible, setVisible] = React.useState<boolean>(props.api.isVisible);\n\n    React.useEffect(() => {\n        const disposable = props.api.onDidVisibilityChange((event) =>\n            setVisible(event.isVisible)\n        );\n\n        return () => {\n            disposable.dispose();\n        };\n    }, [props.api]);\n\n    if (!visible) {\n        return null;\n    }\n\n    return React.createElement(props.children, props);\n};\n\nexport const SimpleDockview = () => {\n    const onReady = (event: DockviewReadyEvent) => {\n        const panel = event.api.addPanel({\n            id: 'panel_1',\n            component: 'default',\n            params: {\n                title: 'Panel 1',\n            },\n        });\n\n        panel.group.locked = true;\n        panel.group.header.hidden = true;\n\n        event.api.addPanel({\n            id: 'panel_2',\n            component: 'default',\n            params: {\n                title: 'Panel 2',\n            },\n        });\n\n        event.api.addPanel({\n            id: 'panel_3',\n            component: 'default',\n            params: {\n                title: 'Panel 3',\n            },\n        });\n\n        event.api.addPanel({\n            id: 'panel_4',\n            component: 'default',\n            params: {\n                title: 'Panel 4',\n            },\n            position: { referencePanel: 'panel_1', direction: 'right' },\n        });\n\n        const panel5 = event.api.addPanel({\n            id: 'panel_5',\n            component: 'default',\n            params: {\n                title: 'Panel 5',\n            },\n            position: { referencePanel: 'panel_3', direction: 'right' },\n        });\n\n        // panel5.group!.model.header.hidden = true;\n        // panel5.group!.model.locked = true;\n\n        event.api.addPanel({\n            id: 'panel_6',\n            component: 'default',\n            params: {\n                title: 'Panel 6',\n            },\n            position: { referencePanel: 'panel_5', direction: 'below' },\n        });\n\n        event.api.addPanel({\n            id: 'panel_7',\n            component: 'default',\n            params: {\n                title: 'Panel 7',\n            },\n            position: { referencePanel: 'panel_6', direction: 'right' },\n        });\n    };\n\n    return (\n        <DockviewReact\n            components={components}\n            onReady={onReady}\n            className=\"dockview-theme-abyss\"\n        />\n    );\n};\n","\n\n/* @jsxRuntime classic */\n/* @jsx mdx */\n/* @jsxFrag mdx.Fragment */\n\nimport React from 'react';\nimport { mdx } from '@mdx-js/react';\n\n\nexport const frontMatter = {\n\tdescription: 'Dockview Documentation'\n};\nexport const contentTitle = 'Dockview';\nexport const metadata = {\n  \"unversionedId\": \"components/dockview\",\n  \"id\": \"components/dockview\",\n  \"title\": \"Dockview\",\n  \"description\": \"Dockview Documentation\",\n  \"source\": \"@site/docs/components/dockview.mdx\",\n  \"sourceDirName\": \"components\",\n  \"slug\": \"/components/dockview\",\n  \"permalink\": \"/docs/next/components/dockview\",\n  \"draft\": false,\n  \"editUrl\": \"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/components/dockview.mdx\",\n  \"tags\": [],\n  \"version\": \"current\",\n  \"frontMatter\": {\n    \"description\": \"Dockview Documentation\"\n  },\n  \"sidebar\": \"tutorialSidebar\",\n  \"previous\": {\n    \"title\": \"Components\",\n    \"permalink\": \"/docs/next/category/components\"\n  },\n  \"next\": {\n    \"title\": \"Gridview\",\n    \"permalink\": \"/docs/next/components/gridview\"\n  }\n};\nexport const assets = {\n\n};\n\nimport { SimpleDockview } from '@site/src/components/simpleDockview';\nimport {\n    RenderingDockview,\n    Checkbox,\n} from '@site/src/components/dockview/rendering';\nimport { DndDockview } from '@site/src/components/dockview/dnd';\nimport { EventsDockview } from '@site/src/components/dockview/events';\nimport { ContextMenuDockview } from '@site/src/components/dockview/contextMenu';\nimport { NestedDockview } from '@site/src/components/dockview/nested';\nimport { CustomHeadersDockview } from '@site/src/components/dockview/customHeaders';\nimport Link from '@docusaurus/Link';\nexport const toc = [{\n  value: 'Introduction',\n  id: 'introduction',\n  level: 2\n}, {\n  value: 'DockviewReact Component',\n  id: 'dockviewreact-component',\n  level: 2\n}, {\n  value: 'Dockview API',\n  id: 'dockview-api',\n  level: 2\n}, {\n  value: 'Dockview Panel API',\n  id: 'dockview-panel-api',\n  level: 2\n}, {\n  value: 'Advanced Features',\n  id: 'advanced-features',\n  level: 2\n}, {\n  value: 'Locked group',\n  id: 'locked-group',\n  level: 3\n}, {\n  value: 'Group header',\n  id: 'group-header',\n  level: 3\n}, {\n  value: 'Custom Tab Headers',\n  id: 'custom-tab-headers',\n  level: 3\n}, {\n  value: 'Rendering',\n  id: 'rendering',\n  level: 3\n}, {\n  value: 'Drag And Drop',\n  id: 'drag-and-drop',\n  level: 3\n}, {\n  value: 'Events',\n  id: 'events',\n  level: 3\n}, {\n  value: 'Nested Dockviews',\n  id: 'nested-dockviews',\n  level: 3\n}, {\n  value: 'Group Controls Panel',\n  id: 'group-controls-panel',\n  level: 3\n}];\n\nconst layoutProps = {\n  toc\n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"dockview\"\n    }}>{`Dockview`}</h1>\n    <h2 {...{\n      \"id\": \"introduction\"\n    }}>{`Introduction`}</h2>\n    <p>{`Dockview is an abstraction built on top of `}<a parentName=\"p\" {...{\n        \"href\": \"./gridview\"\n      }}>{`Gridviews`}</a>{` where each view is a container of many tabbed panels.`}</p>\n    <div style={{\n      height: '300px',\n      backgroundColor: 'rgb(30,30,30)',\n      color: 'white',\n      margin: '20px 0px'\n    }}>\n    <SimpleDockview mdxType=\"SimpleDockview\" />\n    </div>\n    <p>{`You can access the panels associated group through the `}<inlineCode parentName=\"p\">{`panel.group`}</inlineCode>{` variable.\nThe group will always be defined and will change if a panel is moved into another group.`}</p>\n    <h2 {...{\n      \"id\": \"dockviewreact-component\"\n    }}>{`DockviewReact Component`}</h2>\n    <p>{`You can create a Dockview through the use of the `}<inlineCode parentName=\"p\">{`ReactDockview`}</inlineCode>{` component.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`import { ReactDockview } from 'dockview';\n`}</code></pre>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Property`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Type`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Optional`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Default`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Description`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`onReady`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`(event: SplitviewReadyEvent) => void`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`No`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`components`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`object`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`No`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`tabComponents`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`object`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Yes`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`watermarkComponent`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`object`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Yes`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`hideBorders`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`boolean`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Yes`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`false`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`className`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`string`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Yes`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`''`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`disableAutoResizing`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`boolean`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Yes`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`false`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`See `}<Link to=\"../basics/#auto-resizing\" mdxType=\"Link\">{`Auto Resizing`}</Link></td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`onDidDrop`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Event`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Yes`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`false`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`showDndOverlay`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Event`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Yes`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`false`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n        </tr>\n      </tbody>\n    </table>\n    <h2 {...{\n      \"id\": \"dockview-api\"\n    }}>{`Dockview API`}</h2>\n    <p>{`The Dockview API is exposed both at the `}<inlineCode parentName=\"p\">{`onReady`}</inlineCode>{` event and on each panel through `}<inlineCode parentName=\"p\">{`props.containerApi`}</inlineCode>{`.\nThrough this API you can control general features of the component and access all added panels.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\",\n        \"metastring\": \"title=\\\"Dockview API via Panel component\\\"\",\n        \"title\": \"\\\"Dockview\",\n        \"API\": true,\n        \"via\": true,\n        \"Panel\": true,\n        \"component\\\"\": true\n      }}>{`const MyComponent = (props: IDockviewPanelProps<{ title: string }>) => {\n    // props.containerApi...\n\n    return <div>{\\`My first panel has the title: \\${props.params.title}\\`}</div>;\n};\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\",\n        \"metastring\": \"title=\\\"Dockview API via the onReady callback\\\"\",\n        \"title\": \"\\\"Dockview\",\n        \"API\": true,\n        \"via\": true,\n        \"the\": true,\n        \"onReady\": true,\n        \"callback\\\"\": true\n      }}>{`const onReady = (event: DockviewReadyEvent) => {\n    // event.api...\n};\n`}</code></pre>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Property`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Type`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Description`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`height`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`number`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Component pixel height`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`width`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`number`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Component pixel width`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`minimumHeight`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`number`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`maximumHeight`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`number`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`maximumWidth`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`number`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`maximumWidth`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`number`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`length`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`number`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Number of panels`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`size`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`number`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Number of Groups`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`panels`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`IDockviewPanel[]`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`groups`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`GroupPanel[]`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`activePanel`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`IDockviewPanel \\\\| undefined`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`activeGroup`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`IDockviewPanel \\\\| undefined`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`onDidLayoutChange`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`Event<void>`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`onDidLayoutFromJSON`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`Event<void>`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`onDidAddGroup`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`Event<GroupPanel>`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`onDidRemoveGroup`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`Event<GroupPanel>`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`onDidActiveGroupChange`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`Event<GroupPanel \\\\| undefined>`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`onDidAddPanel`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`Event<IDockviewPanel>`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`onDidRemovePanel`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`Event<IDockviewPanel>`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`onDidActivePanelChange`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`Event<IDockviewPanel \\\\| undefined>`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`onDidDrop`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`Event<DockviewDropEvent`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`addPanel`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`addPanel(options: AddPanelOptions): IDockviewPanel`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`getPanel`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`(id: string) \\\\| IDockviewPanel \\\\| undefined`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`addEmptyGroup`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`(options? AddGroupOptions): void`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`closeAllGroups`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`(): void`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`removeGroup`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`(group: GroupPanel): void`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`getGroup`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`(id: string): GroupPanel \\\\| undefined`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`getTabHeight`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`(): number \\\\| undefined`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`setTabHeight`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`(hegiht: number \\\\| undefined): void`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`updateOptions`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`(options:SplitviewComponentUpdateOptions): void`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`focus`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`(): void`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`layout`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`(width: number, height:number): void`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><Link to=\"../basics/#auto-resizing\" mdxType=\"Link\">{`Auto Resizing`}</Link></td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`fromJSON`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`(data: SerializedDockview): void`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><Link to=\"../basics/#serialization\" mdxType=\"Link\">{`Serialization`}</Link></td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`toJSON`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`(): SerializedDockview`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><Link to=\"../basics/#serialization\" mdxType=\"Link\">{`Serialization`}</Link></td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`clear`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`(): void`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Clears the current layout`}</td>\n        </tr>\n      </tbody>\n    </table>\n    <h2 {...{\n      \"id\": \"dockview-panel-api\"\n    }}>{`Dockview Panel API`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`const MyComponent = (props: IDockviewPanelProps<{ title: string }>) => {\n    // props.api...\n\n    return <div>{\\`My first panel has the title: \\${props.params.title}\\`}</div>;\n};\n`}</code></pre>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Property`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Type`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Description`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`id`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`string`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Panel id`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`isFocused`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`boolean`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Is panel focsed`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`isActive`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`boolean`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Is panel active`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`width`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`number`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Panel width`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`height`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`number`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Panel height`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`onDidDimensionsChange`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`Event<PanelDimensionChangeEvent>`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`onDidFocusChange`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`Event<FocusEvent>`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`onDidVisibilityChange`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`Event<VisibilityEvent>`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`onDidActiveChange`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`Event<ActiveEvent>`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`setActive`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`(): void`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`onDidConstraintsChange`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`onDidConstraintsChange: Event<PanelConstraintChangeEvent>`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`setConstraints`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`(value: PanelConstraintChangeEvent2): void;`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`setSize`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`(event: SizeEvent): void`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`group`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`\\`GroupPanel`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`undefined\\``}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`isGroupActive`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`boolean`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`title`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`string`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`suppressClosable`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`boolean`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`close`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`(): void`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`setTitle`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`(title: string): void`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n        </tr>\n      </tbody>\n    </table>\n    <h2 {...{\n      \"id\": \"advanced-features\"\n    }}>{`Advanced Features`}</h2>\n    <h3 {...{\n      \"id\": \"locked-group\"\n    }}>{`Locked group`}</h3>\n    <p>{`Locking a group will disable all drop events for this group ensuring a user can not add additional panels to the group.\nYou can still add groups to a locked panel programatically using the API.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`panel.group.locked = true;\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"group-header\"\n    }}>{`Group header`}</h3>\n    <p>{`You may wish to hide the header section of a group. This can achieved through setting the `}<inlineCode parentName=\"p\">{`hidden`}</inlineCode>{` variable on `}<inlineCode parentName=\"p\">{`panel.group.header`}</inlineCode>{`.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`panel.group.header.hidden = true;\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"custom-tab-headers\"\n    }}>{`Custom Tab Headers`}</h3>\n    <p>{`You can provide custom renderers for your tab headers.\nA default implementation of `}<inlineCode parentName=\"p\">{`DockviewDefaultTab`}</inlineCode>{` is provided should you only wish to attach minor\nchanges and events that do not alter the default behaviour, for example to add a custom context menu event\nhandler.`}</p>\n    <p>{`You are also free to define a custom renderer entirely from scratch and not make use of the `}<inlineCode parentName=\"p\">{`DockviewDefaultTab`}</inlineCode>{` component.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\",\n        \"metastring\": \"title=\\\"Attaching a custom context menu event handlers to a custom header\\\"\",\n        \"title\": \"\\\"Attaching\",\n        \"a\": true,\n        \"custom\": true,\n        \"context\": true,\n        \"menu\": true,\n        \"event\": true,\n        \"handlers\": true,\n        \"to\": true,\n        \"header\\\"\": true\n      }}>{`import { IDockviewPanelHeaderProps, DockviewDefaultTab } from 'dockview';\n\nconst MyCustomheader = (props: IDockviewPanelHeaderProps) => {\n    const onContextMenu = (event: React.MouseEvent) => {\n        event.preventDefault();\n        alert('context menu');\n    };\n    return <DockviewDefaultTab onContextMenu={onContextMenu} {...props} />;\n};\n`}</code></pre>\n    <p>{`To use a custom renderer you can must register a collection of tab components`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`const tabComponents = {\n    myCustomHeader: MyCustomHeader,\n};\n\nreturn <DockviewReact tabComponents={tabComponents}  ... />;\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`api.addPanel({\n    id: 'panel_1',\n    component: 'default',\n    tabComponent: 'myCustomHeader', // <--\n    title: 'Panel 1',\n});\n`}</code></pre>\n    <p>{`You can also override the default tab renderer which will be used when no `}<inlineCode parentName=\"p\">{`tabComponent`}</inlineCode>{` is provided to the `}<inlineCode parentName=\"p\">{`addPanel`}</inlineCode>{` function.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`<DockviewReact defaultTabComponent={MyCustomHeader}  ... />;\n`}</code></pre>\n    <p>{`As a simple example the below attachs a custom event handler for the context menu on all tabs as a default tab renderer`}</p>\n    <CustomHeadersDockview mdxType=\"CustomHeadersDockview\" />\n    <h3 {...{\n      \"id\": \"rendering\"\n    }}>{`Rendering`}</h3>\n    <p>{`Although `}<inlineCode parentName=\"p\">{`DockviewReact`}</inlineCode>{` will only add those tabs that are visible to the DOM all associated React Components for each tab including those that\nare not initially visible will be created.\nThis will mean that any hooks in those components will run and if you running expensive operations in the tabs you may end up doing a lot of initial\nwork for what are hidden tabs.`}</p>\n    <p>{`This is the default behaviour to ensure the greatest flexibility for the user but you can create a Higher-Order component wrapping your components that\nwill ensure the component is only created if the tab is visible as below:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`import { PanelApi } from 'dockview';\nimport * as React from 'react';\n\nfunction RenderWhenVisible<\n    T extends { api: Pick<PanelApi, 'isVisible' | 'onDidVisibilityChange'> }\n>(component: React.FunctionComponent<T>) {\n    const HigherOrderComponent = (props: T) => {\n        const [visible, setVisible] = React.useState<boolean>(\n            props.api.isVisible\n        );\n\n        React.useEffect(() => {\n            const disposable = props.api.onDidVisibilityChange((event) =>\n                setVisible(event.isVisible)\n            );\n\n            return () => {\n                disposable.dispose();\n            };\n        }, [props.api]);\n\n        if (!visible) {\n            return null;\n        }\n\n        return React.createElement(component, props);\n    };\n    return HigherOrderComponent;\n}\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`const component = RenderWhenVisible(MyComponent);\n`}</code></pre>\n    <p>{`Through toggling the checkbox you can see that when you only render those panels which are visible the underling React component is destroyed when it becomes hidden and re-created when it becomes visible.`}</p>\n    <Checkbox mdxType=\"Checkbox\" />\n    <div style={{\n      height: '300px',\n      backgroundColor: 'rgb(30,30,30)',\n      color: 'white',\n      margin: '20px 0px'\n    }}>\n    <RenderingDockview renderVisibleOnly={false} mdxType=\"RenderingDockview\" />\n    </div>\n    <h3 {...{\n      \"id\": \"drag-and-drop\"\n    }}>{`Drag And Drop`}</h3>\n    <p>{`The component exposes some method to help determine whether external drag events should be interacted with or not.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`/**\n * called when an ondrop event which does not originate from the dockview libray and\n * passes the showDndOverlay condition occurs\n **/\nconst onDidDrop = (event: DockviewDropEvent) => {\n    const { group } = event;\n\n    event.api.addPanel({\n        id: 'test',\n        component: 'default',\n        position: {\n            referencePanel: group.activePanel.id,\n            direction: 'within',\n        },\n    });\n};\n\n/**\n * called for drag over events which do not originate from the dockview library\n * allowing the developer to decide where the overlay should be shown for a\n * particular drag event\n **/\nconst showDndOverlay = (event: DockviewDndOverlayEvent) => {\n    return true;\n};\n\nreturn (\n    <DockviewReact\n        components={components}\n        onReady={onReady}\n        className=\"dockview-theme-abyss\"\n        onDidDrop={onDidDrop}\n        showDndOverlay={showDndOverlay}\n    />\n);\n`}</code></pre>\n    <DndDockview mdxType=\"DndDockview\" />\n    <h3 {...{\n      \"id\": \"events\"\n    }}>{`Events`}</h3>\n    <EventsDockview mdxType=\"EventsDockview\" />\n    <h3 {...{\n      \"id\": \"nested-dockviews\"\n    }}>{`Nested Dockviews`}</h3>\n    <p>{`You can safely create multiple dockview instances within one page and nest dockviews within other dockviews.\nIf you wish to interact with the drop event from one dockview instance in another dockview instance you can implement the `}<inlineCode parentName=\"p\">{`showDndOverlay`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`onDidDrop`}</inlineCode>{` props on `}<inlineCode parentName=\"p\">{`DockviewReact`}</inlineCode>{`.`}</p>\n    <NestedDockview mdxType=\"NestedDockview\" />\n    <h3 {...{\n      \"id\": \"group-controls-panel\"\n    }}>{`Group Controls Panel`}</h3>\n    <p><inlineCode parentName=\"p\">{`DockviewReact`}</inlineCode>{` accepts a prop `}<inlineCode parentName=\"p\">{`groupControlComponent`}</inlineCode>{` which expects a React component whos props are `}<inlineCode parentName=\"p\">{`IDockviewGroupControlProps`}</inlineCode>{`.\nThis control will be rendered inside the header bar on the right hand side for each group of tabs.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`const Component: React.FunctionComponent<IDockviewGroupControlProps> = () => {\n    return <div>{'...'}</div>;\n};\n\nreturn <DockviewReact {...props} groupControlComponent={Component} />;\n`}</code></pre>\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;\n"],"names":["Console","props","ref","React","current","scrollTop","Math","max","scrollHeight","clientHeight","lines","className","map","line","i","key","now","pad","x","getHours","getMinutes","getSeconds","getMilliseconds","formatTime","timestamp","style","css","text","components","default","padding","params","title","CustomTab","onClose","event","stopPropagation","api","close","onClick","setActive","tabComponents","onContextMenu","preventDefault","alert","ContextMenuDockview","onReady","addPanel","id","component","tabComponent","position","referencePanel","direction","onTabContextMenu","panel","headerComponents","CustomHeadersDockview","height","margin","display","flexDirection","defaultTabComponent","localStorage","getItem","panel6","group","locked","header","hidden","addEmptyGroup","DndDockview","backgroundColor","borderRadius","width","cursor","draggable","color","onDidDrop","activePanel","showDndOverlay","EventsDockview","setLines","checked","setChecked","setApi","disposables","onDidAddPanel","Date","onDidRemovePanel","onDidActivePanelChange","onDidAddGroup","onDidRemoveGroup","onDidActiveGroupChange","onDidLayoutChange","onDidLayoutFromJSON","forEach","disposable","dispose","fromJSON","grid","root","type","data","views","activeView","size","orientation","Orientation","panels","panel_1","view","content","panel_2","panel_3","panel_4","panel_5","panel_6","panel_8","panel_7","activeGroup","options","clear","onChange","e","target","background","innerDockview","NestedDockview","renderVisibleComponentsOnlyAtom","atom","formatLine","timeout","setTimeout","clearTimeout","visible","setVisible","isVisible","render","useRecoilValue","onDidVisibilityChange","RenderingDockview","setRender","useRecoilState","renderVisibleOnly","Checkbox","SimpleDockview","frontMatter","description","contentTitle","metadata","assets","toc","value","level","layoutProps","MDXContent","mdxType","parentName","to","isMDXComponent"],"sourceRoot":""}