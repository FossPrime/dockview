{"version":3,"file":"assets/js/ec070bfe.37069d41.js","mappings":"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","sources":["webpack://dockview-docs/./src/components/console/console.tsx","webpack://dockview-docs/./src/components/paneview/customHeader.tsx","webpack://dockview-docs/./src/components/paneview/dragAndDrop.tsx","webpack://dockview-docs/./src/components/paneview/sideBySide.tsx","webpack://dockview-docs/./src/components/simplePaneview.tsx","webpack://dockview-docs/./versioned_docs/version-1.5.1/components/paneview.mdx"],"sourcesContent":["import * as React from 'react';\nimport './console.scss';\n\nconst formatTime = (now: Date) => {\n    const pad = (x: number) => (x < 10 ? `0${x}` : `${x}`);\n\n    return `${pad(now.getHours())}:${pad(now.getMinutes())}:${pad(\n        now.getSeconds()\n    )}.${now.getMilliseconds()}`;\n};\n\nexport interface Line {\n    timestamp: Date;\n    text: string;\n    css?: React.CSSProperties;\n}\n\nexport interface IConsoleProps {\n    lines: Line[];\n}\n\nexport const Console = (props: IConsoleProps) => {\n    const ref = React.useRef<HTMLDivElement>();\n\n    React.useLayoutEffect(() => {\n        if (!ref.current) {\n            return;\n        }\n\n        ref.current.scrollTop = Math.max(\n            0,\n            ref.current.scrollHeight - ref.current.clientHeight\n        );\n    }, [props.lines]);\n\n    return (\n        <div ref={ref} className=\"console-container\">\n            {props.lines.map((line, i) => {\n                return (\n                    <div key={i} className=\"console-line\">\n                        <span className=\"console-line-timestamp\">\n                            {formatTime(line.timestamp)}\n                        </span>\n                        <span className=\"console-line-text\" style={line.css}>\n                            {line.text}\n                        </span>\n                    </div>\n                );\n            })}\n        </div>\n    );\n};\n","import {\n    IPaneviewPanelProps,\n    PaneviewReact,\n    PaneviewReadyEvent,\n} from 'dockview';\nimport * as React from 'react';\n\nconst components = {\n    default: (props: IPaneviewPanelProps<{ title: string }>) => {\n        return (\n            <div\n                style={{\n                    padding: '10px',\n                    height: '100%',\n                    backgroundColor: 'rgb(60,60,60)',\n                }}\n            >\n                {props.params.title}\n            </div>\n        );\n    },\n};\n\nconst MyHeaderComponent = (props: IPaneviewPanelProps<{ title: string }>) => {\n    const [expanded, setExpanded] = React.useState<boolean>(\n        props.api.isExpanded\n    );\n\n    React.useEffect(() => {\n        const disposable = props.api.onDidExpansionChange((event) => {\n            setExpanded(event.isExpanded);\n        });\n\n        return () => {\n            disposable.dispose();\n        };\n    }, []);\n\n    const onClick = () => {\n        props.api.setExpanded(!expanded);\n    };\n\n    return (\n        <div\n            style={{\n                padding: '0px 8px',\n                height: '100%',\n                backgroundColor: 'rgb(60,60,60)',\n            }}\n        >\n            <span>{`Custom header for ${props.title}`}</span>\n            <button onClick={onClick}>\n                {expanded ? 'Collapse' : 'Expand'}\n            </button>\n        </div>\n    );\n};\n\nconst headerComponents = {\n    myHeaderComponent: MyHeaderComponent,\n};\n\nexport const CustomHeaderPaneview = () => {\n    const onReady = (event: PaneviewReadyEvent) => {\n        event.api.addPanel({\n            id: 'panel_1',\n            component: 'default',\n            headerComponent: 'myHeaderComponent',\n            params: {\n                title: 'Panel 1',\n            },\n            title: 'Panel 1',\n        });\n\n        event.api.addPanel({\n            id: 'panel_2',\n            component: 'default',\n            headerComponent: 'myHeaderComponent',\n            params: {\n                title: 'Panel 2',\n            },\n            title: 'Panel 2',\n        });\n\n        event.api.addPanel({\n            id: 'panel_3',\n            component: 'default',\n            headerComponent: 'myHeaderComponent',\n            params: {\n                title: 'Panel 3',\n            },\n            title: 'Panel 3',\n        });\n    };\n\n    return (\n        <PaneviewReact\n            components={components}\n            headerComponents={headerComponents}\n            onReady={onReady}\n            className=\"dockview-theme-abyss\"\n        />\n    );\n};\n","import {\n    IPaneviewPanelProps,\n    PaneviewDropEvent,\n    PaneviewReact,\n    PaneviewReadyEvent,\n} from 'dockview';\nimport * as React from 'react';\n\nconst components = {\n    default: (props: IPaneviewPanelProps<{ title: string }>) => {\n        return (\n            <div\n                style={{\n                    padding: '10px',\n                    height: '100%',\n                    backgroundColor: 'rgb(60,60,60)',\n                }}\n            >\n                {props.params.title}\n            </div>\n        );\n    },\n};\n\nexport const DragAndDropPaneview = () => {\n    const onReady = (event: PaneviewReadyEvent) => {\n        event.api.addPanel({\n            id: 'panel_1',\n            component: 'default',\n            params: {\n                title: 'Panel 1',\n            },\n            title: 'Panel 1',\n        });\n\n        event.api.addPanel({\n            id: 'panel_2',\n            component: 'default',\n            params: {\n                title: 'Panel 2',\n            },\n            title: 'Panel 2',\n        });\n\n        event.api.addPanel({\n            id: 'panel_3',\n            component: 'default',\n            params: {\n                title: 'Panel 3',\n            },\n            title: 'Panel 3',\n        });\n    };\n\n    const onDidDrop = (event: PaneviewDropEvent) => {\n        const index = event.api.panels.indexOf(event.panel);\n\n        event.api.addPanel({\n            id: 'panel_4',\n            component: 'default',\n            params: {\n                title: 'Panel 4',\n            },\n            title: 'Panel 4',\n            index,\n        });\n    };\n\n    return (\n        <div>\n            <div>\n                <div\n                    style={{\n                        backgroundColor: 'orange',\n                        padding: '0px 8px',\n                        borderRadius: '4px',\n                        width: '100px',\n                        cursor: 'pointer',\n                    }}\n                    draggable={true}\n                >\n                    Drag me\n                </div>\n            </div>\n            <div\n                style={{\n                    height: '300px',\n                    backgroundColor: 'rgb(30,30,30)',\n                    color: 'white',\n                    margin: '20px 0px',\n                }}\n            >\n                <PaneviewReact\n                    components={components}\n                    onReady={onReady}\n                    onDidDrop={onDidDrop}\n                    className=\"dockview-theme-abyss\"\n                />\n            </div>\n        </div>\n    );\n};\n","import {\n    IPaneviewPanelProps,\n    PaneviewDropEvent,\n    PaneviewReact,\n    PaneviewReadyEvent,\n    PaneviewDndOverlayEvent,\n} from 'dockview';\nimport * as React from 'react';\nimport { Console, Line } from '../console/console';\nimport './sideBySide.scss';\n\nconst components = {\n    default: (props: IPaneviewPanelProps<{ title: string }>) => {\n        return (\n            <div\n                style={{\n                    padding: '10px',\n                    height: '100%',\n                    backgroundColor: 'rgb(60,60,60)',\n                }}\n            >\n                {props.params.title}\n            </div>\n        );\n    },\n};\n\nexport const SideBySidePaneview = () => {\n    const [checked, setChecked] = React.useState<boolean>(false);\n    const [lines, setLines] = React.useState<Line[]>([]);\n\n    const onReady = (event: PaneviewReadyEvent) => {\n        event.api.addPanel({\n            id: 'panel_1',\n            component: 'default',\n            params: {\n                title: 'Panel 1',\n            },\n            title: 'Panel 1',\n        });\n\n        event.api.addPanel({\n            id: 'panel_2',\n            component: 'default',\n            params: {\n                title: 'Panel 2',\n            },\n            title: 'Panel 2',\n        });\n\n        event.api.addPanel({\n            id: 'panel_3',\n            component: 'default',\n            params: {\n                title: 'Panel 3',\n            },\n            title: 'Panel 3',\n        });\n    };\n\n    const showDndOverlay = (event: PaneviewDndOverlayEvent) => {\n        return checked;\n    };\n\n    const onDidDrop = (event: PaneviewDropEvent) => {\n        const text = `onDidDrop ${event.position} ${event.panel.id}`;\n\n        setLines((lines) => [...lines, { text, timestamp: new Date() }]);\n    };\n\n    return (\n        <div\n            style={{\n                height: '300px',\n                margin: '20px 0px',\n                display: 'flex',\n                flexDirection: 'column',\n            }}\n        >\n            <div style={{ height: '25px' }}>\n                <label>\n                    <span>Enable external events</span>\n                    <input\n                        type={'checkbox'}\n                        checked={checked}\n                        onChange={(e) => {\n                            setChecked(e.target.checked);\n                        }}\n                    />\n                </label>\n            </div>\n            <div\n                style={{\n                    height: '250px',\n                    display: 'flex',\n                }}\n            >\n                <PaneviewReact\n                    components={components}\n                    onReady={onReady}\n                    className=\"dockview-theme-abyss paneview-side-by-side\"\n                    showDndOverlay={showDndOverlay}\n                    onDidDrop={onDidDrop}\n                />\n                <PaneviewReact\n                    components={components}\n                    onReady={onReady}\n                    className=\"dockview-theme-abyss paneview-side-by-side\"\n                    showDndOverlay={showDndOverlay}\n                    onDidDrop={onDidDrop}\n                />\n            </div>\n            <div style={{ height: '100px' }}>\n                <Console lines={lines} />\n            </div>\n        </div>\n    );\n};\n","import {\n    IPaneviewPanelProps,\n    PaneviewReact,\n    PaneviewReadyEvent,\n} from 'dockview';\nimport * as React from 'react';\n\nconst components = {\n    default: (props: IPaneviewPanelProps<{ title: string }>) => {\n        return (\n            <div\n                style={{\n                    padding: '10px',\n                    height: '100%',\n                    backgroundColor: 'rgb(60,60,60)',\n                }}\n            >\n                {props.params.title}\n            </div>\n        );\n    },\n};\n\nconst MyHeaderComponent = (props: IPaneviewPanelProps<{ title: string }>) => {\n    const [expanded, setExpanded] = React.useState<boolean>(\n        props.api.isExpanded\n    );\n\n    React.useEffect(() => {\n        const disposable = props.api.onDidExpansionChange((event) => {\n            setExpanded(event.isExpanded);\n        });\n\n        return () => {\n            disposable.dispose();\n        };\n    }, []);\n\n    const onClick = () => {\n        props.api.setExpanded(!expanded);\n    };\n\n    return (\n        <div\n            style={{\n                padding: '10px',\n                height: '100%',\n                backgroundColor: 'rgb(60,60,60)',\n            }}\n        >\n            <a\n                onClick={onClick}\n                className={expanded ? 'expanded' : 'collapsed'}\n            />\n            <span>{props.params.title}</span>\n        </div>\n    );\n};\n\nconst headerComponents = {\n    myHeaderComponent: MyHeaderComponent,\n};\n\nexport const SimplePaneview = () => {\n    const onReady = (event: PaneviewReadyEvent) => {\n        event.api.addPanel({\n            id: 'panel_1',\n            component: 'default',\n            params: {\n                title: 'Panel 1',\n            },\n            title: 'Panel 1',\n        });\n\n        event.api.addPanel({\n            id: 'panel_2',\n            component: 'default',\n            params: {\n                title: 'Panel 2',\n            },\n            title: 'Panel 2',\n        });\n\n        event.api.addPanel({\n            id: 'panel_3',\n            component: 'default',\n            params: {\n                title: 'Panel 3',\n            },\n            title: 'Panel 3',\n        });\n    };\n\n    return (\n        <PaneviewReact\n            components={components}\n            headerComponents={headerComponents}\n            onReady={onReady}\n            className=\"dockview-theme-abyss\"\n        />\n    );\n};\n","\n\n/* @jsxRuntime classic */\n/* @jsx mdx */\n/* @jsxFrag mdx.Fragment */\n\nimport React from 'react';\nimport { mdx } from '@mdx-js/react';\n\n\nexport const frontMatter = {\n\tdescription: 'Paneview Documentation'\n};\nexport const contentTitle = 'Paneview';\nexport const metadata = {\n  \"unversionedId\": \"components/paneview\",\n  \"id\": \"version-1.5.1/components/paneview\",\n  \"title\": \"Paneview\",\n  \"description\": \"Paneview Documentation\",\n  \"source\": \"@site/versioned_docs/version-1.5.1/components/paneview.mdx\",\n  \"sourceDirName\": \"components\",\n  \"slug\": \"/components/paneview\",\n  \"permalink\": \"/docs/1.5.1/components/paneview\",\n  \"draft\": false,\n  \"editUrl\": \"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/versioned_docs/version-1.5.1/components/paneview.mdx\",\n  \"tags\": [],\n  \"version\": \"1.5.1\",\n  \"frontMatter\": {\n    \"description\": \"Paneview Documentation\"\n  },\n  \"sidebar\": \"tutorialSidebar\",\n  \"previous\": {\n    \"title\": \"Gridview\",\n    \"permalink\": \"/docs/1.5.1/components/gridview\"\n  },\n  \"next\": {\n    \"title\": \"Splitview\",\n    \"permalink\": \"/docs/1.5.1/components/splitview\"\n  }\n};\nexport const assets = {\n\n};\n\nimport { SimplePaneview } from '@site/src/components/simplePaneview';\nimport { CustomHeaderPaneview } from '@site/src/components/paneview/customHeader';\nimport { DragAndDropPaneview } from '@site/src/components/paneview/dragAndDrop';\nimport { SideBySidePaneview } from '@site/src/components/paneview/sideBySide';\nimport Link from '@docusaurus/Link';\nexport const toc = [{\n  value: 'PaneviewReact Component',\n  id: 'paneviewreact-component',\n  level: 2\n}, {\n  value: 'Paneview API',\n  id: 'paneview-api',\n  level: 2\n}, {\n  value: 'Paneview Panel API',\n  id: 'paneview-panel-api',\n  level: 2\n}, {\n  value: 'Advanced Features',\n  id: 'advanced-features',\n  level: 2\n}, {\n  value: 'Custom Header',\n  id: 'custom-header',\n  level: 3\n}, {\n  value: 'Drag And Drop',\n  id: 'drag-and-drop',\n  level: 3\n}, {\n  value: 'Interactions',\n  id: 'interactions',\n  level: 3\n}];\n\nconst layoutProps = {\n  toc\n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"paneview\"\n    }}>{`Paneview`}</h1>\n    <p>{`A paneview is a collapsed collection of vertically stacked panels and panel headers.\nThe panel header will always remain visible however the panel will only be visible when the panel is expanded.`}</p>\n    <div {...{\n      \"className\": \"admonition admonition-info alert alert--info\"\n    }}><div parentName=\"div\" {...{\n        \"className\": \"admonition-heading\"\n      }}><h5 parentName=\"div\"><span parentName=\"h5\" {...{\n            \"className\": \"admonition-icon\"\n          }}><svg parentName=\"span\" {...{\n              \"xmlns\": \"http://www.w3.org/2000/svg\",\n              \"width\": \"14\",\n              \"height\": \"16\",\n              \"viewBox\": \"0 0 14 16\"\n            }}><path parentName=\"svg\" {...{\n                \"fillRule\": \"evenodd\",\n                \"d\": \"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z\"\n              }}></path></svg></span>{`info`}</h5></div><div parentName=\"div\" {...{\n        \"className\": \"admonition-content\"\n      }}><p parentName=\"div\">{`Paneview panels can be re-ordered by dragging and dropping the panel headers.`}</p></div></div>\n    <hr></hr>\n    <h1 {...{\n      \"id\": \"introduction\"\n    }}>{`Introduction`}</h1>\n    <div style={{\n      height: '400px',\n      backgroundColor: 'rgb(30,30,30)',\n      color: 'white',\n      margin: '20px 0px'\n    }}>\n    <SimplePaneview mdxType=\"SimplePaneview\" />\n    </div>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\",\n        \"metastring\": \"title=\\\"Simple Paneview example\\\"\",\n        \"title\": \"\\\"Simple\",\n        \"Paneview\": true,\n        \"example\\\"\": true\n      }}>{`import {\n    IPaneviewPanelProps,\n    PaneviewReact,\n    PaneviewReadyEvent,\n} from 'dockview';\n\nconst components = {\n    default: (props: IPaneviewPanelProps<{ title: string }>) => {\n        return (\n            <div\n                style={{\n                    padding: '10px',\n                    height: '100%',\n                    backgroundColor: 'rgb(60,60,60)',\n                }}\n            >\n                {props.params.title}\n            </div>\n        );\n    },\n};\n\nSimplePaneview = () => {\n    const onReady = (event: PaneviewReadyEvent) => {\n        event.api.addPanel({\n            id: 'panel_1',\n            component: 'default',\n            params: {\n                title: 'Panel 1',\n            },\n            title: 'Panel 1',\n        });\n\n        event.api.addPanel({\n            id: 'panel_2',\n            component: 'default',\n            params: {\n                title: 'Panel 2',\n            },\n            title: 'Panel 2',\n        });\n\n        event.api.addPanel({\n            id: 'panel_3',\n            component: 'default',\n            params: {\n                title: 'Panel 3',\n            },\n            title: 'Panel 3',\n        });\n    };\n\n    return (\n        <PaneviewReact\n            components={components}\n            headerComponents={headerComponents}\n            onReady={onReady}\n            className=\"dockview-theme-abyss\"\n        />\n    );\n};\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"paneviewreact-component\"\n    }}>{`PaneviewReact Component`}</h2>\n    <p>{`You can create a Paneview through the use of the `}<inlineCode parentName=\"p\">{`ReactPaneview`}</inlineCode>{` component.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`import { ReactPaneview } from 'dockview';\n`}</code></pre>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Property`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Type`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Optional`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Default`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Description`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`onReady`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`(event: SplitviewReadyEvent) => void`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`No`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`components`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`object`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`No`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`headerComponents`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`object`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Yes`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`className`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`string`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Yes`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`''`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`disableAutoResizing`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`boolean`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Yes`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`false`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><Link to=\"../basics/#auto-resizing\" mdxType=\"Link\">{`Auto Resizing`}</Link></td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`disableDnd`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`boolean`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Yes`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`false`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`onDidDrop`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Event`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Yes`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n        </tr>\n      </tbody>\n    </table>\n    <h2 {...{\n      \"id\": \"paneview-api\"\n    }}>{`Paneview API`}</h2>\n    <p>{`The Paneview API is exposed both at the `}<inlineCode parentName=\"p\">{`onReady`}</inlineCode>{` event and on each panel through `}<inlineCode parentName=\"p\">{`props.containerApi`}</inlineCode>{`.\nThrough this API you can control general features of the component and access all added panels.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\",\n        \"metastring\": \"title=\\\"Paneview API via Panel component\\\"\",\n        \"title\": \"\\\"Paneview\",\n        \"API\": true,\n        \"via\": true,\n        \"Panel\": true,\n        \"component\\\"\": true\n      }}>{`const MyComponent = (props: IGridviewPanelProps<{ title: string }>) => {\n    // props.containerApi...\n\n    return <div>{\\`My first panel has the title: \\${props.params.title}\\`}</div>;\n};\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\",\n        \"metastring\": \"title=\\\"Paneview API via the onReady callback\\\"\",\n        \"title\": \"\\\"Paneview\",\n        \"API\": true,\n        \"via\": true,\n        \"the\": true,\n        \"onReady\": true,\n        \"callback\\\"\": true\n      }}>{`const onReady = (event: GridviewReadyEvent) => {\n    // event.api...\n};\n`}</code></pre>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Property`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Type`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Description`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`height`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`number`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Component pixel height`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`width`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`number`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Component pixel width`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`minimumSize`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`number`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`The sum of the `}<inlineCode parentName=\"td\">{`minimumSize`}</inlineCode>{` property for each panel`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`maximumSize`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`number`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`The sum of the `}<inlineCode parentName=\"td\">{`maximumSize`}</inlineCode>{` property for each panel`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`length`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`number`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Number of panels`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`panels`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`IPaneviewPanel[]`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`All panels`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`onDidLayoutChange`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`Event<void>`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Fires on layout change`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`onDidLayoutFromJSON`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`Event<void>`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Fires of layout change caused by a fromJSON deserialization call`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`onDidAddView`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`Event<IPaneviewPanel>`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Fires when a view is added`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`onDidRemoveView`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`Event<IPaneviewPanel>`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Fires when a view is removed`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`onDidDrop`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`Event<PaneviewDropEvent`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Fires on an external drop event (See `}<Link to=\"./paneview/#drag-and-drop\" mdxType=\"Link\">{`Drag and Drop`}</Link>{`)`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`addPanel`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`addPanel(options: AddPaneviewComponentOptions): IPaneviewPanel`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`removePanel`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`(panel: IPaneviewPanel): void`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`movePanel`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`(from: number, to: number): void`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`getPanel`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`(id:string): IPaneviewPanel \\\\| undefined`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`focus`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`(): void`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Focus the active panel, if exists`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`layout`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`(width: number, height:number): void`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`See `}<Link to=\"../basics/#auto-resizing\" mdxType=\"Link\">{`Auto Resizing`}</Link></td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`fromJSON`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`(data: SerializedPaneview): void`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><Link to=\"../basics/#serialization\" mdxType=\"Link\">{`Serialization`}</Link></td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`toJSON`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`(): SerializedPaneview`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><Link to=\"../basics/#serialization\" mdxType=\"Link\">{`Serialization`}</Link></td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`clear`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`(): void`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Clears the current layout`}</td>\n        </tr>\n      </tbody>\n    </table>\n    <h2 {...{\n      \"id\": \"paneview-panel-api\"\n    }}>{`Paneview Panel API`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`const MyComponent = (props: IGridviewPanelProps<{ title: string }>) => {\n    // props.api...\n\n    return <div>{\\`My first panel has the title: \\${props.params.title}\\`}</div>;\n};\n`}</code></pre>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Property`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Type`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Description`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`id`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`string`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Panel id`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`isFocused`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`boolean`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Is panel focsed`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`isActive`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`boolean`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Is panel active`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`isVisible`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`boolean`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Is panel visible`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`width`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`number`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Panel width`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`height`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`number`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Panel height`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`onDidDimensionsChange`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`Event<PanelDimensionChangeEvent>`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`onDidFocusChange`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`Event<FocusEvent>`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`onDidVisibilityChange`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`Event<VisibilityEvent>`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`onDidActiveChange`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`Event<ActiveEvent>`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`onDidConstraintsChange`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`onDidConstraintsChange: Event<PanelConstraintChangeEvent>`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`setVisible`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`(isVisible: boolean): void`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`setActive`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`(): void`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`setConstraints`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`(value: PanelConstraintChangeEvent2): void;`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`setSize`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`(event: SizeEvent): void`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n        </tr>\n      </tbody>\n    </table>\n    <h2 {...{\n      \"id\": \"advanced-features\"\n    }}>{`Advanced Features`}</h2>\n    <h3 {...{\n      \"id\": \"custom-header\"\n    }}>{`Custom Header`}</h3>\n    <p>{`You can provide a custom component to render an alternative header.`}</p>\n    <div style={{\n      height: '400px',\n      backgroundColor: 'rgb(30,30,30)',\n      color: 'white',\n      margin: '20px 0px'\n    }}>\n    <CustomHeaderPaneview mdxType=\"CustomHeaderPaneview\" />\n    </div>\n    <p>{`You can provide a `}<inlineCode parentName=\"p\">{`headerComponent`}</inlineCode>{` option when creating a panel to tell the library to use a custom header component.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`const onReady = (event: PaneviewReadyEvent) => {\n    event.api.addPanel({\n        id: 'panel_1',\n        component: 'default',\n        headerComponent: 'myHeaderComponent',\n        params: {\n            valueA: 'A',\n        },\n        title: 'Panel 1',\n    });\n};\n`}</code></pre>\n    <p>{`This header must be defined in the collection of components provided to the `}<inlineCode parentName=\"p\">{`headerComponents`}</inlineCode>{` props for `}<inlineCode parentName=\"p\">{`ReactPaneivew`}</inlineCode></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`import { IPaneviewPanelProps } from 'dockview';\n\nconst MyHeaderComponent = (props: IPaneviewPanelProps<{ title: string }>) => {\n    const [expanded, setExpanded] = React.useState<boolean>(\n        props.api.isExpanded\n    );\n\n    React.useEffect(() => {\n        const disposable = props.api.onDidExpansionChange((event) => {\n            setExpanded(event.isExpanded);\n        });\n\n        return () => {\n            disposable.dispose();\n        };\n    }, []);\n\n    const onClick = () => {\n        props.api.setExpanded(!expanded);\n    };\n\n    return (\n        <div\n            style={{\n                padding: '10px',\n                height: '100%',\n                backgroundColor: 'rgb(60,60,60)',\n            }}\n        >\n            <a\n                onClick={onClick}\n                className={expanded ? 'expanded' : 'collapsed'}\n            />\n            <span>{props.params.title}</span>\n        </div>\n    );\n};\n\nconst headerComponents = { myHeaderComponent: MyHeaderComponent };\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"drag-and-drop\"\n    }}>{`Drag And Drop`}</h3>\n    <p>{`If you provide the `}<inlineCode parentName=\"p\">{`PaneviewReact`}</inlineCode>{` component with the prop `}<inlineCode parentName=\"p\">{`onDidDrop`}</inlineCode>{` you will be able to interact with custom drop events.`}</p>\n    <DragAndDropPaneview mdxType=\"DragAndDropPaneview\" />\n    <h3 {...{\n      \"id\": \"interactions\"\n    }}>{`Interactions`}</h3>\n    <p>{`You can safely create multiple paneview instances within one page. They will not interact with each other by default.`}</p>\n    <p>{`If you wish to interact with the drop event from one paneview instance in another paneview instance you can implement the `}<inlineCode parentName=\"p\">{`showDndOverlay`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`onDidDrop`}</inlineCode>{` props on `}<inlineCode parentName=\"p\">{`PaneviewReact`}</inlineCode>{`.`}</p>\n    <p>{`As an example see how dragging a header from one control to another will only trigger an interactable event for the developer if the checkbox is enabled.`}</p>\n    <SideBySidePaneview mdxType=\"SideBySidePaneview\" />\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;\n"],"names":["Console","props","ref","React","current","scrollTop","Math","max","scrollHeight","clientHeight","lines","className","map","line","i","key","now","pad","x","getHours","getMinutes","getSeconds","getMilliseconds","formatTime","timestamp","style","css","text","components","default","padding","height","backgroundColor","params","title","headerComponents","myHeaderComponent","expanded","setExpanded","api","isExpanded","disposable","onDidExpansionChange","event","dispose","onClick","CustomHeaderPaneview","onReady","addPanel","id","component","headerComponent","DragAndDropPaneview","borderRadius","width","cursor","draggable","color","margin","onDidDrop","index","panels","indexOf","panel","SideBySidePaneview","checked","setChecked","setLines","showDndOverlay","position","Date","display","flexDirection","type","onChange","e","target","SimplePaneview","frontMatter","description","contentTitle","metadata","assets","toc","value","level","layoutProps","MDXContent","mdxType","parentName","to","isMDXComponent"],"sourceRoot":""}