{"version":3,"file":"assets/js/e3ad1f13.18d06231.js","mappings":"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","sources":["webpack://dockview-docs/./src/components/console/console.tsx","webpack://dockview-docs/./src/components/dockview/customHeaders.tsx","webpack://dockview-docs/./src/components/dockview/dnd.tsx","webpack://dockview-docs/./src/components/dockview/events.tsx","webpack://dockview-docs/./src/components/dockview/groupControl.tsx","webpack://dockview-docs/./src/components/dockview/native.tsx","webpack://dockview-docs/./src/components/dockview/nested.tsx","webpack://dockview-docs/./src/components/dockview/persistance.tsx","webpack://dockview-docs/./src/components/dockview/rendering.tsx","webpack://dockview-docs/./src/components/dockview/resize.tsx","webpack://dockview-docs/./src/components/dockview/watermark.tsx","webpack://dockview-docs/./src/components/simpleDockview.tsx","webpack://dockview-docs/./docs/components/dockview.mdx"],"sourcesContent":["import * as React from 'react';\nimport './console.scss';\n\nconst formatTime = (now: Date) => {\n    const pad = (x: number) => (x < 10 ? `0${x}` : `${x}`);\n\n    return `${pad(now.getHours())}:${pad(now.getMinutes())}:${pad(\n        now.getSeconds()\n    )}.${now.getMilliseconds()}`;\n};\n\nexport interface Line {\n    timestamp: Date;\n    text: string;\n    css?: React.CSSProperties;\n}\n\nexport interface IConsoleProps {\n    lines: Line[];\n}\n\nexport const Console = (props: IConsoleProps) => {\n    const ref = React.useRef<HTMLDivElement>();\n\n    React.useLayoutEffect(() => {\n        if (!ref.current) {\n            return;\n        }\n\n        ref.current.scrollTop = Math.max(\n            0,\n            ref.current.scrollHeight - ref.current.clientHeight\n        );\n    }, [props.lines]);\n\n    return (\n        <div ref={ref} className=\"console-container\">\n            {props.lines.map((line, i) => {\n                return (\n                    <div key={i} className=\"console-line\">\n                        <span className=\"console-line-timestamp\">\n                            {formatTime(line.timestamp)}\n                        </span>\n                        <span className=\"console-line-text\" style={line.css}>\n                            {line.text}\n                        </span>\n                    </div>\n                );\n            })}\n        </div>\n    );\n};\n","import {\n    DockviewDefaultTab,\n    DockviewReact,\n    DockviewReadyEvent,\n    IDockviewPanelHeaderProps,\n    IDockviewPanelProps,\n} from 'dockview';\nimport * as React from 'react';\n\nconst components = {\n    default: (props: IDockviewPanelProps<{ title: string }>) => {\n        return <div style={{ padding: '20px' }}>{props.params.title}</div>;\n    },\n};\n\nconst MyCustomheader = (props: IDockviewPanelHeaderProps) => {\n    const onContextMenu = (event: React.MouseEvent) => {\n        event.preventDefault();\n        alert('context menu');\n    };\n    return <DockviewDefaultTab onContextMenu={onContextMenu} {...props} />;\n};\n\nconst headerComponents = {\n    default: (props: IDockviewPanelHeaderProps) => {\n        const onContextMenu = (event: React.MouseEvent) => {\n            event.preventDefault();\n            alert('context menu');\n        };\n        return <DockviewDefaultTab onContextMenu={onContextMenu} {...props} />;\n    },\n};\n\nexport const CustomHeadersDockview = () => {\n    const onReady = (event: DockviewReadyEvent) => {\n        const d = localStorage.getItem('test');\n\n        event.api.addPanel({\n            id: 'panel_1',\n            component: 'default',\n            title: 'Panel 1',\n        });\n        event.api.addPanel({\n            id: 'panel_2',\n            component: 'default',\n            title: 'Panel 2',\n        });\n        event.api.addPanel({\n            id: 'panel_3',\n            component: 'default',\n            title: 'Panel 3',\n        });\n        event.api.addPanel({\n            id: 'panel_4',\n            component: 'default',\n            title: 'Panel 4',\n            position: { referencePanel: 'panel_3', direction: 'right' },\n        });\n        event.api.addPanel({\n            id: 'panel_5',\n            component: 'default',\n            title: 'Panel 5',\n            position: { referencePanel: 'panel_4', direction: 'within' },\n        });\n        const panel6 = event.api.addPanel({\n            id: 'panel_6',\n            component: 'default',\n            title: 'Panel 6',\n            position: { referencePanel: 'panel_4', direction: 'below' },\n        });\n        panel6.group.locked = true;\n        panel6.group.header.hidden = true;\n        event.api.addPanel({\n            id: 'panel_7',\n            component: 'default',\n            title: 'Panel 7',\n            position: { referencePanel: 'panel_6', direction: 'right' },\n        });\n        event.api.addPanel({\n            id: 'panel_8',\n            component: 'default',\n\n            title: 'Panel 8',\n            position: { referencePanel: 'panel_7', direction: 'within' },\n        });\n\n        event.api.addGroup();\n    };\n\n    return (\n        <div\n            style={{\n                height: '500px',\n                margin: '40px 0px',\n                display: 'flex',\n                flexDirection: 'column',\n            }}\n        >\n            <DockviewReact\n                components={components}\n                defaultTabComponent={headerComponents.default}\n                onReady={onReady}\n                className=\"dockview-theme-abyss\"\n            />\n        </div>\n    );\n};\n","import {\n    DockviewDndOverlayEvent,\n    DockviewDropEvent,\n    DockviewReact,\n    DockviewReadyEvent,\n    IDockviewPanelProps,\n    positionToDirection,\n} from 'dockview';\nimport * as React from 'react';\n\nconst components = {\n    default: (props: IDockviewPanelProps<{ title: string }>) => {\n        return (\n            <div style={{ padding: '20px' }}>\n                <div>{props.params.title}</div>\n            </div>\n        );\n    },\n};\n\nexport const DndDockview = (props: { renderVisibleOnly: boolean }) => {\n    const onReady = (event: DockviewReadyEvent) => {\n        event.api.addPanel({\n            id: 'panel_1',\n            component: 'default',\n            params: {\n                title: 'Panel 1',\n            },\n        });\n\n        event.api.addPanel({\n            id: 'panel_2',\n            component: 'default',\n            params: {\n                title: 'Panel 2',\n            },\n        });\n\n        event.api.addPanel({\n            id: 'panel_3',\n            component: 'default',\n            params: {\n                title: 'Panel 3',\n            },\n        });\n\n        event.api.addPanel({\n            id: 'panel_4',\n            component: 'default',\n            params: {\n                title: 'Panel 4',\n            },\n            position: { referencePanel: 'panel_1', direction: 'right' },\n        });\n    };\n\n    const onDidDrop = (event: DockviewDropEvent) => {\n        event.api.addPanel({\n            id: 'test',\n            component: 'default',\n            position: {\n                direction: positionToDirection(event.position),\n                referenceGroup: event.group,\n            },\n        });\n    };\n\n    const showDndOverlay = (event: DockviewDndOverlayEvent) => {\n        return true;\n    };\n\n    return (\n        <>\n            <div\n                style={{\n                    backgroundColor: 'orange',\n                    padding: '0px 8px',\n                    borderRadius: '4px',\n                    width: '100px',\n                    cursor: 'pointer',\n                }}\n                draggable={true}\n            >\n                Drag me\n            </div>\n            <div\n                style={{\n                    height: '300px',\n                    backgroundColor: 'rgb(30,30,30)',\n                    color: 'white',\n                    margin: '20px 0px',\n                }}\n            >\n                <DockviewReact\n                    components={components}\n                    onReady={onReady}\n                    className=\"dockview-theme-abyss\"\n                    onDidDrop={onDidDrop}\n                    showDndOverlay={showDndOverlay}\n                />\n            </div>\n        </>\n    );\n};\n","import {\n    Orientation,\n    DockviewReact,\n    DockviewReadyEvent,\n    DockviewApi,\n    IDockviewPanelProps,\n} from 'dockview';\nimport * as React from 'react';\nimport { Console, Line } from '../console/console';\n\nconst components = {\n    default: (props: IDockviewPanelProps<{ title: string }>) => {\n        return <div style={{ padding: '20px' }}>{props.params.title}</div>;\n    },\n};\n\nexport const EventsDockview = () => {\n    const [lines, setLines] = React.useState<Line[]>([]);\n    const [checked, setChecked] = React.useState<boolean>(false);\n\n    const [api, setApi] = React.useState<DockviewApi | undefined>();\n\n    React.useEffect(() => {\n        if (!api) {\n            return () => {\n                //noop\n            };\n        }\n\n        const disposables = [\n            api.onDidAddPanel((panel) => {\n                setLines((lines) => [\n                    ...lines,\n                    {\n                        timestamp: new Date(),\n                        text: `onDidAddPanel: ${panel.id}`,\n                    },\n                ]);\n            }),\n            api.onDidRemovePanel((panel) => {\n                setLines((lines) => [\n                    ...lines,\n                    {\n                        timestamp: new Date(),\n                        text: `onDidRemovePanel: ${panel.id}`,\n                    },\n                ]);\n            }),\n            api.onDidActivePanelChange((panel) => {\n                setLines((lines) => [\n                    ...lines,\n                    {\n                        timestamp: new Date(),\n                        text: `onDidActivePanelChange: ${panel?.id}`,\n                    },\n                ]);\n            }),\n            api.onDidAddGroup((panel) => {\n                setLines((lines) => [\n                    ...lines,\n                    {\n                        timestamp: new Date(),\n                        text: `onDidAddGroup: ${panel.id}`,\n                    },\n                ]);\n            }),\n            api.onDidRemoveGroup((panel) => {\n                setLines((lines) => [\n                    ...lines,\n                    {\n                        timestamp: new Date(),\n                        text: `onDidRemoveGroup: ${panel.id}`,\n                    },\n                ]);\n            }),\n            api.onDidActiveGroupChange((panel) => {\n                setLines((lines) => [\n                    ...lines,\n                    {\n                        timestamp: new Date(),\n                        text: `onDidActiveGroupChange: ${panel?.id}`,\n                    },\n                ]);\n            }),\n            api.onDidLayoutChange((panel) => {\n                setLines((lines) => [\n                    ...lines,\n                    { timestamp: new Date(), text: `onDidLayoutChange` },\n                ]);\n            }),\n            api.onDidLayoutFromJSON((panel) => {\n                setLines((lines) => [\n                    ...lines,\n                    { timestamp: new Date(), text: `onDidLayoutFromJSON` },\n                ]);\n            }),\n        ];\n\n        return () => {\n            disposables.forEach((disposable) => disposable.dispose());\n        };\n    }, [api]);\n\n    React.useEffect(() => {\n        if (!api) {\n            return;\n        }\n\n        setLines((lines) => [\n            ...lines,\n            {\n                timestamp: new Date(),\n                text: `Rebuilding view fromJSON:${checked}`,\n                css: { color: 'yellow', backgroundColor: 'grey' },\n            },\n        ]);\n\n        if (checked) {\n            api.fromJSON({\n                grid: {\n                    root: {\n                        type: 'branch',\n                        data: [\n                            {\n                                type: 'leaf',\n                                data: {\n                                    views: ['panel_1', 'panel_2', 'panel_3'],\n                                    activeView: 'panel_3',\n                                    id: '77',\n                                },\n                                size: 262,\n                            },\n                            {\n                                type: 'branch',\n                                data: [\n                                    {\n                                        type: 'leaf',\n                                        data: {\n                                            views: ['panel_5'],\n                                            activeView: 'panel_5',\n                                            id: '79',\n                                        },\n                                        size: 100,\n                                    },\n                                    {\n                                        type: 'leaf',\n                                        data: {\n                                            views: ['panel_6', 'panel_8'],\n                                            activeView: 'panel_8',\n                                            id: '80',\n                                        },\n                                        size: 100,\n                                    },\n                                    {\n                                        type: 'leaf',\n                                        data: {\n                                            views: ['panel_7'],\n                                            activeView: 'panel_7',\n                                            id: '81',\n                                        },\n                                        size: 100,\n                                    },\n                                ],\n                                size: 262,\n                            },\n                            {\n                                type: 'leaf',\n                                data: {\n                                    views: ['panel_4'],\n                                    activeView: 'panel_4',\n                                    id: '78',\n                                },\n                                size: 263.75,\n                            },\n                        ],\n                        size: 300,\n                    },\n                    width: 787.75,\n                    height: 300,\n                    orientation: Orientation.HORIZONTAL,\n                },\n                panels: {\n                    panel_1: {\n                        id: 'panel_1',\n                        view: { content: { id: 'default' } },\n                        params: { title: 'Panel 1' },\n                        title: 'panel_1',\n                    },\n                    panel_2: {\n                        id: 'panel_2',\n                        view: { content: { id: 'default' } },\n                        params: { title: 'Panel 2' },\n                        title: 'panel_2',\n                    },\n                    panel_3: {\n                        id: 'panel_3',\n                        view: { content: { id: 'default' } },\n                        params: { title: 'Panel 3' },\n                        title: 'panel_3',\n                    },\n                    panel_4: {\n                        id: 'panel_4',\n                        view: { content: { id: 'default' } },\n                        params: { title: 'Panel 4' },\n                        title: 'panel_4',\n                    },\n                    panel_5: {\n                        id: 'panel_5',\n                        view: { content: { id: 'default' } },\n                        params: { title: 'Panel 5' },\n                        title: 'panel_5',\n                    },\n                    panel_6: {\n                        id: 'panel_6',\n                        view: { content: { id: 'default' } },\n                        params: { title: 'Panel 6' },\n                        title: 'panel_6',\n                    },\n                    panel_8: {\n                        id: 'panel_8',\n                        view: { content: { id: 'default' } },\n                        params: { title: 'Panel 8' },\n                        title: 'panel_8',\n                    },\n                    panel_7: {\n                        id: 'panel_7',\n                        view: { content: { id: 'default' } },\n                        params: { title: 'Panel 7' },\n                        title: 'panel_7',\n                    },\n                },\n                activeGroup: '80',\n                options: {},\n            });\n            return;\n        }\n\n        api.clear();\n\n        api.addPanel({\n            id: 'panel_1',\n            component: 'default',\n            params: {\n                title: 'Panel 1',\n            },\n        });\n\n        api.addPanel({\n            id: 'panel_2',\n            component: 'default',\n            params: {\n                title: 'Panel 2',\n            },\n        });\n\n        api.addPanel({\n            id: 'panel_3',\n            component: 'default',\n            params: {\n                title: 'Panel 3',\n            },\n        });\n\n        api.addPanel({\n            id: 'panel_4',\n            component: 'default',\n            params: {\n                title: 'Panel 4',\n            },\n            position: { referencePanel: 'panel_1', direction: 'right' },\n        });\n\n        api.addPanel({\n            id: 'panel_5',\n            component: 'default',\n            params: {\n                title: 'Panel 5',\n            },\n            position: { referencePanel: 'panel_3', direction: 'right' },\n        });\n\n        api.addPanel({\n            id: 'panel_6',\n            component: 'default',\n            params: {\n                title: 'Panel 6',\n            },\n            position: { referencePanel: 'panel_5', direction: 'below' },\n        });\n\n        api.addPanel({\n            id: 'panel_7',\n            component: 'default',\n            params: {\n                title: 'Panel 7',\n            },\n            position: { referencePanel: 'panel_6', direction: 'below' },\n        });\n\n        api.addPanel({\n            id: 'panel_8',\n            component: 'default',\n            params: {\n                title: 'Panel 8',\n            },\n            position: { referencePanel: 'panel_6', direction: 'within' },\n        });\n    }, [api, checked]);\n\n    const onReady = (event: DockviewReadyEvent) => {\n        setApi(event.api);\n    };\n\n    return (\n        <>\n            <label>\n                <input\n                    type=\"checkbox\"\n                    checked={checked}\n                    onChange={(e) => setChecked(e.target.checked)}\n                />\n                <span>{'fromJSON'}</span>\n            </label>\n            <div\n                style={{\n                    height: '300px',\n                    backgroundColor: 'rgb(30,30,30)',\n                    color: 'white',\n                    margin: '20px 0px',\n                }}\n            >\n                <DockviewReact\n                    components={components}\n                    onReady={onReady}\n                    className=\"dockview-theme-abyss\"\n                />\n            </div>\n\n            <Console lines={lines} />\n        </>\n    );\n};\n","import {\n    DockviewReact,\n    DockviewReadyEvent,\n    IDockviewGroupControlProps,\n    IDockviewPanelProps,\n} from 'dockview';\nimport * as React from 'react';\nimport './groupControl.scss';\n\nconst components = {\n    default: (props: IDockviewPanelProps<{ title: string; x?: number }>) => {\n        return (\n            <div\n                style={{\n                    display: 'flex',\n                    justifyContent: 'center',\n                    alignItems: 'center',\n                    color: 'white',\n                    height: '100%',\n                }}\n            >\n                <span>{`${props.params.title}`}</span>\n                {props.params.x && <span>{`  ${props.params.x}`}</span>}\n            </div>\n        );\n    },\n};\n\nconst GroupControlComponent = (props: IDockviewGroupControlProps) => {\n    const isGroupActive = props.isGroupActive;\n    const activePanel = props.activePanel;\n\n    return (\n        <div className=\"dockview-groupcontrol-demo\">\n            <span\n                className=\"dockview-groupcontrol-demo-group-active\"\n                style={{\n                    background: isGroupActive ? 'green' : 'red',\n                }}\n            >\n                {isGroupActive ? 'Group Active' : 'Group Inactive'}\n            </span>\n            <span className=\"dockview-groupcontrol-demo-active-panel\">{`activePanel: ${\n                activePanel?.id || 'null'\n            }`}</span>\n        </div>\n    );\n};\n\nexport const DockviewGroupControl = () => {\n    const onReady = (event: DockviewReadyEvent) => {\n        const panel1 = event.api.addPanel({\n            id: 'panel_1',\n            component: 'default',\n            tabComponent: 'default',\n            params: {\n                title: 'Window 1',\n            },\n        });\n\n        const panel2 = event.api.addPanel({\n            id: 'panel_2',\n            component: 'default',\n            tabComponent: 'default',\n            params: {\n                title: 'Window 2',\n            },\n            position: {\n                direction: 'right',\n            },\n        });\n\n        const panel3 = event.api.addPanel({\n            id: 'panel_3',\n            component: 'default',\n            tabComponent: 'default',\n            params: {\n                title: 'Window 3',\n            },\n            position: {\n                direction: 'below',\n            },\n        });\n    };\n\n    return (\n        <div\n            style={{\n                height: '500px',\n                display: 'flex',\n                flexDirection: 'column',\n            }}\n        >\n            <DockviewReact\n                onReady={onReady}\n                components={components}\n                groupControlComponent={GroupControlComponent}\n                className=\"dockview-theme-abyss\"\n            />\n        </div>\n    );\n};\n","import {\n    DockviewReact,\n    DockviewReadyEvent,\n    IDockviewPanelProps,\n    Position,\n    Direction,\n    IDockviewPanelHeaderProps,\n} from 'dockview';\nimport * as React from 'react';\nimport './native.scss';\n\nconst components = {\n    default: (props: IDockviewPanelProps<{ title: string; x?: number }>) => {\n        return (\n            <div\n                style={{\n                    display: 'flex',\n                    justifyContent: 'center',\n                    alignItems: 'center',\n                    color: 'white',\n                    height: '100%',\n                }}\n            >\n                <span>{`${props.params.title}`}</span>\n                {props.params.x && <span>{`  ${props.params.x}`}</span>}\n            </div>\n        );\n    },\n    isolatedApp: (\n        props: IDockviewPanelProps<{ title: string; x?: number }>\n    ) => {\n        const onReady = (event: DockviewReadyEvent) => {\n            const panel1 = event.api.addPanel({\n                id: 'panel_1',\n                component: 'default',\n                params: {\n                    title: 'Tab 1',\n                },\n            });\n            const panel2 = event.api.addPanel({\n                id: 'panel_2',\n                component: 'default',\n                params: {\n                    title: 'Tab 2',\n                },\n            });\n            const panel3 = event.api.addPanel({\n                id: 'panel_3',\n                component: 'default',\n                params: {\n                    title: 'Tab 3',\n                },\n            });\n        };\n        return (\n            <DockviewReact\n                onReady={onReady}\n                components={components}\n                tabComponents={tabComponents}\n                className=\"dockview-theme-abyss\"\n            />\n        );\n    },\n};\n\nconst tabComponents = {\n    default: (props: IDockviewPanelHeaderProps<{ title: string }>) => {\n        return (\n            <div className=\"my-custom-tab\">\n                <span>{props.params.title}</span>\n                <span style={{ flexGrow: 1 }} />\n\n                <span className=\"my-custom-tab-icon material-symbols-outlined\">\n                    chrome_minimize\n                </span>\n                <span className=\"my-custom-tab-icon material-symbols-outlined\">\n                    chrome_maximize\n                </span>\n                <span className=\"my-custom-tab-icon material-symbols-outlined\">\n                    close\n                </span>\n            </div>\n        );\n    },\n};\n\nexport const DockviewNative = () => {\n    const onReady = (event: DockviewReadyEvent) => {\n        const panel1 = event.api.addPanel({\n            id: 'panel_1',\n            component: 'default',\n            tabComponent: 'default',\n            params: {\n                title: 'Window 1',\n            },\n        });\n        panel1.group.locked = true;\n\n        const panel2 = event.api.addPanel({\n            id: 'panel_2',\n            component: 'default',\n            tabComponent: 'default',\n            params: {\n                title: 'Window 2',\n            },\n            position: {\n                direction: 'right',\n            },\n        });\n        panel2.group.locked = true;\n\n        const panel3 = event.api.addPanel({\n            id: 'panel_3',\n            component: 'default',\n            tabComponent: 'default',\n            params: {\n                title: 'Window 3',\n            },\n            position: {\n                direction: 'below',\n            },\n        });\n        panel3.group.locked = true;\n    };\n\n    return (\n        <div\n            style={{\n                height: '500px',\n                display: 'flex',\n                flexDirection: 'column',\n            }}\n        >\n            <DockviewReact\n                onReady={onReady}\n                components={components}\n                tabComponents={tabComponents}\n                className=\"dockview-theme-abyss\"\n                singleTabMode=\"fullwidth\"\n            />\n        </div>\n    );\n};\n\nexport const DockviewNative2 = () => {\n    const onReady = (event: DockviewReadyEvent) => {\n        const panel1 = event.api.addPanel({\n            id: 'panel_1',\n            component: 'isolatedApp',\n            tabComponent: 'default',\n            params: {\n                title: 'Window 1',\n            },\n        });\n        panel1.group.locked = true;\n\n        const panel2 = event.api.addPanel({\n            id: 'panel_2',\n            component: 'isolatedApp',\n            tabComponent: 'default',\n            params: {\n                title: 'Window 2',\n            },\n            position: {\n                direction: 'right',\n            },\n        });\n        panel2.group.locked = true;\n\n        const panel3 = event.api.addPanel({\n            id: 'panel_3',\n            component: 'isolatedApp',\n            tabComponent: 'default',\n            params: {\n                title: 'Window 3',\n            },\n            position: {\n                direction: 'below',\n            },\n        });\n        panel3.group.locked = true;\n    };\n\n    return (\n        <div\n            style={{\n                height: '500px',\n                display: 'flex',\n                flexDirection: 'column',\n            }}\n        >\n            <DockviewReact\n                onReady={onReady}\n                components={components}\n                tabComponents={tabComponents}\n                className=\"dockview-theme-abyss\"\n                singleTabMode=\"fullwidth\"\n            />\n        </div>\n    );\n};\n","import {\n    DockviewDndOverlayEvent,\n    DockviewDropEvent,\n    DockviewReact,\n    DockviewReadyEvent,\n    IDockviewPanelProps,\n} from 'dockview';\nimport * as React from 'react';\nimport './nested.scss';\n\nconst InnerDockview = () => {\n    const onReady = (event: DockviewReadyEvent) => {\n        event.api.addPanel({\n            id: 'panel_1',\n            component: 'default',\n        });\n\n        event.api.addPanel({\n            id: 'panel_2',\n            component: 'default',\n        });\n\n        event.api.addPanel({\n            id: 'panel_3',\n            component: 'default',\n        });\n    };\n\n    return (\n        <DockviewReact\n            onReady={onReady}\n            components={components}\n            className=\"dockview-theme-abyss nested-dockview\"\n        />\n    );\n};\n\nconst components = {\n    default: (props: IDockviewPanelProps<{ title: string }>) => {\n        return (\n            <div\n                style={{\n                    height: '100%',\n                    padding: '20px',\n                    background: 'var(--dv-group-view-background-color)',\n                }}\n            >\n                {props.params.title}\n            </div>\n        );\n    },\n    innerDockview: InnerDockview,\n};\n\nexport const NestedDockview = () => {\n    const onReady = (event: DockviewReadyEvent) => {\n        event.api.addPanel({\n            id: 'panel_1',\n            component: 'default',\n        });\n\n        event.api.addPanel({\n            id: 'panel_2',\n            component: 'default',\n        });\n\n        event.api.addPanel({\n            id: 'panel_3',\n            component: 'innerDockview',\n            position: { referencePanel: 'panel_2', direction: 'right' },\n        });\n    };\n\n    const showDndOverlay = (event: DockviewDndOverlayEvent) => {\n        // console.log(event.getData());\n\n        return false;\n    };\n\n    const onDidDrop = (event: DockviewDropEvent) => {\n        // event.getData();\n    };\n\n    return (\n        <div\n            style={{\n                height: '500px',\n                display: 'flex',\n                flexDirection: 'column',\n            }}\n        >\n            <DockviewReact\n                onReady={onReady}\n                components={components}\n                className=\"dockview-theme-abyss\"\n                showDndOverlay={showDndOverlay}\n                onDidDrop={onDidDrop}\n            />\n        </div>\n    );\n};\n","import {\n    DockviewApi,\n    DockviewReact,\n    DockviewReadyEvent,\n    IDockviewPanelProps,\n    IWatermarkPanelProps,\n    Orientation,\n} from 'dockview';\nimport * as React from 'react';\nimport './nested.scss';\n\nconst components = {\n    default: (props: IDockviewPanelProps<{ title: string }>) => {\n        return (\n            <div\n                style={{\n                    height: '100%',\n                    padding: '20px',\n                    background: 'var(--dv-group-view-background-color)',\n                }}\n            >\n                {props.params.title}\n            </div>\n        );\n    },\n};\n\nconst counter = (() => {\n    let i = 0;\n\n    return {\n        next: () => ++i,\n    };\n})();\n\nfunction loadDefaultLayout(api: DockviewApi) {\n    api.addPanel({\n        id: 'panel_1',\n        component: 'default',\n    });\n\n    api.addPanel({\n        id: 'panel_2',\n        component: 'default',\n    });\n\n    api.addPanel({\n        id: 'panel_3',\n        component: 'default',\n    });\n}\n\nexport const DockviewPersistance = () => {\n    const [api, setApi] = React.useState<DockviewApi>();\n\n    const clearLayout = () => {\n        localStorage.removeItem('dockview_persistance_layout');\n        if (api) {\n            api.clear();\n            loadDefaultLayout(api);\n        }\n    };\n\n    const onReady = (event: DockviewReadyEvent) => {\n        const layoutString = localStorage.getItem(\n            'dockview_persistance_layout'\n        );\n\n        let success = false;\n\n        if (layoutString) {\n            try {\n                const layout = JSON.parse(layoutString);\n                event.api.fromJSON(layout);\n                success = true;\n            } catch (err) {\n                //\n            }\n        }\n\n        if (!success) {\n            loadDefaultLayout(event.api);\n        }\n\n        setApi(event.api);\n    };\n\n    React.useEffect(() => {\n        if (!api) {\n            return;\n        }\n\n        api.onDidLayoutChange(() => {\n            const layout = api.toJSON();\n\n            localStorage.setItem(\n                'dockview_persistance_layout',\n                JSON.stringify(layout)\n            );\n        });\n    }, [api]);\n\n    return (\n        <div\n            style={{\n                height: '500px',\n                display: 'flex',\n                flexDirection: 'column',\n            }}\n        >\n            <div>\n                <button onClick={clearLayout}>Reset Layout</button>\n            </div>\n            <DockviewReact\n                onReady={onReady}\n                components={components}\n                watermarkComponent={Watermark}\n                className=\"dockview-theme-abyss\"\n            />\n        </div>\n    );\n};\n\nconst Watermark = () => {\n    return <div style={{ color: 'white', padding: '8px' }}>watermark</div>;\n};\n","import {\n    DockviewReact,\n    DockviewReadyEvent,\n    IDockviewPanelProps,\n} from 'dockview';\nimport * as React from 'react';\n\nimport { atom, useRecoilState, useRecoilValue } from 'recoil';\n\nconst renderVisibleComponentsOnlyAtom = atom<boolean>({\n    key: 'renderVisibleComponentsOnlyAtom',\n    default: false,\n});\n\nfunction RenderWhenVisible(\n    component: React.FunctionComponent<IDockviewPanelProps>\n) {\n    const HigherOrderComponent = (props: IDockviewPanelProps) => {\n        const [visible, setVisible] = React.useState<boolean>(\n            props.api.isVisible\n        );\n\n        const render = useRecoilValue(renderVisibleComponentsOnlyAtom);\n\n        React.useEffect(() => {\n            const disposable = props.api.onDidVisibilityChange((event) =>\n                setVisible(event.isVisible)\n            );\n\n            return () => {\n                disposable.dispose();\n            };\n        }, [props.api]);\n\n        if (!visible && render) {\n            return null;\n        }\n\n        return React.createElement(component, props);\n    };\n    return HigherOrderComponent;\n}\n\nconst formatLine = (line: string) => {\n    const now = new Date();\n\n    const pad = (x: number) => (x < 10 ? `0${x}` : `${x}`);\n\n    const time = `${pad(now.getHours())}:${pad(now.getMinutes())}:${pad(\n        now.getSeconds()\n    )}`;\n\n    return `[${time}] ${line}`;\n};\n\nconst components = {\n    default: RenderWhenVisible(\n        (props: IDockviewPanelProps<{ title: string }>) => {\n            const [lines, setLines] = React.useState<string[]>([\n                formatLine('Component created'),\n            ]);\n\n            React.useEffect(() => {\n                setLines((lines) => [\n                    ...lines,\n                    formatLine('Running task for 5 seconds'),\n                ]);\n                const timeout = setTimeout(() => {\n                    setLines((lines) => [\n                        ...lines,\n                        formatLine('Task completed'),\n                    ]);\n                }, 5000);\n\n                return () => {\n                    clearTimeout(timeout);\n                };\n            }, []);\n\n            return (\n                <div style={{ padding: '20px' }}>\n                    <div>{props.params.title}</div>\n                    {lines.map((line, i) => (\n                        <div key={i}>{line}</div>\n                    ))}\n                </div>\n            );\n        }\n    ),\n};\n\nexport const RenderingDockview = (props: { renderVisibleOnly: boolean }) => {\n    const [render, setRender] = useRecoilState(renderVisibleComponentsOnlyAtom);\n\n    React.useEffect(\n        () => setRender(props.renderVisibleOnly),\n        [props.renderVisibleOnly]\n    );\n\n    const onReady = (event: DockviewReadyEvent) => {\n        event.api.addPanel({\n            id: 'panel_1',\n            component: 'default',\n            params: {\n                title: 'Panel 1',\n            },\n        });\n\n        event.api.addPanel({\n            id: 'panel_2',\n            component: 'default',\n            params: {\n                title: 'Panel 2',\n            },\n        });\n\n        event.api.addPanel({\n            id: 'panel_3',\n            component: 'default',\n            params: {\n                title: 'Panel 3',\n            },\n        });\n\n        event.api.addPanel({\n            id: 'panel_4',\n            component: 'default',\n            params: {\n                title: 'Panel 4',\n            },\n            position: { referencePanel: 'panel_1', direction: 'right' },\n        });\n    };\n\n    return (\n        <DockviewReact\n            components={components}\n            onReady={onReady}\n            className=\"dockview-theme-abyss\"\n        />\n    );\n};\n\nexport const Checkbox = () => {\n    const [render, setRender] = useRecoilState(renderVisibleComponentsOnlyAtom);\n\n    return (\n        <label>\n            Render only when visible\n            <input\n                type=\"checkbox\"\n                checked={render}\n                onChange={(e) => setRender(e.target.checked)}\n            />\n        </label>\n    );\n};\n","import {\n    DockviewReact,\n    DockviewReadyEvent,\n    IDockviewPanelProps,\n} from 'dockview';\nimport * as React from 'react';\nimport './resize.scss';\n\nconst Default = (props: IDockviewPanelProps) => {\n    const [width, setWidth] = React.useState<number>(100);\n    const [height, setHeight] = React.useState<number>(100);\n\n    return (\n        <div className=\"resize-panel\">\n            <div style={{ height: '25px' }}>{props.api.title}</div>\n            <div className=\"resize-control\">\n                <span>Width:</span>\n                <input\n                    value={width}\n                    onChange={(e) => setWidth(Number(e.target.value))}\n                    type=\"number\"\n                    min={50}\n                    step={1}\n                />\n                <button\n                    style={{ width: '100px' }}\n                    onClick={() => {\n                        props.api.group.api.setSize({\n                            width,\n                        });\n                    }}\n                >\n                    Resize Group\n                </button>\n                <button\n                    style={{ width: '100px' }}\n                    onClick={() => {\n                        props.api.setSize({\n                            width,\n                        });\n                    }}\n                >\n                    Resize panel\n                </button>\n            </div>\n            <div className=\"resize-control\">\n                <span>Height:</span>\n                <input\n                    value={height}\n                    onChange={(e) => setHeight(Number(e.target.value))}\n                    type=\"number\"\n                    min={50}\n                    step={1}\n                />\n                <button\n                    style={{ width: '100px' }}\n                    onClick={() => {\n                        props.api.group.api.setSize({\n                            height,\n                        });\n                    }}\n                >\n                    Resize Group\n                </button>\n                <button\n                    style={{ width: '100px' }}\n                    onClick={() => {\n                        props.api.setSize({\n                            height,\n                        });\n                    }}\n                >\n                    Resize Panel\n                </button>\n            </div>\n        </div>\n    );\n};\n\nconst components = {\n    default: Default,\n};\n\nexport const ResizeDockview = () => {\n    const onReady = (event: DockviewReadyEvent) => {\n        event.api.addPanel({\n            id: 'panel_1',\n            component: 'default',\n        });\n\n        event.api.addPanel({\n            id: 'panel_2',\n            component: 'default',\n            position: {\n                direction: 'right',\n                referencePanel: 'panel_1',\n            },\n        });\n\n        event.api.addPanel({\n            id: 'panel_3',\n            component: 'default',\n            position: {\n                direction: 'below',\n                referencePanel: 'panel_1',\n            },\n        });\n        event.api.addPanel({\n            id: 'panel_4',\n            component: 'default',\n        });\n        event.api.addPanel({\n            id: 'panel_5',\n            component: 'default',\n        });\n    };\n\n    return (\n        <div\n            style={{\n                height: '500px',\n                display: 'flex',\n                flexDirection: 'column',\n            }}\n        >\n            <DockviewReact\n                className=\"dockview-theme-dark\"\n                onReady={onReady}\n                components={components}\n            />\n        </div>\n    );\n};\n","import {\n    DockviewApi,\n    DockviewReact,\n    DockviewReadyEvent,\n    IDockviewPanelProps,\n    IWatermarkPanelProps,\n    Orientation,\n} from 'dockview';\nimport * as React from 'react';\nimport './nested.scss';\n\nconst components = {\n    default: (props: IDockviewPanelProps<{ title: string }>) => {\n        return (\n            <div\n                style={{\n                    height: '100%',\n                    padding: '20px',\n                    background: 'var(--dv-group-view-background-color)',\n                }}\n            >\n                {props.params.title}\n            </div>\n        );\n    },\n};\n\nconst counter = (() => {\n    let i = 0;\n\n    return {\n        next: () => ++i,\n    };\n})();\n\nconst Watermark = (props: IWatermarkPanelProps) => {\n    const isGroup = props.containerApi.groups.length > 0;\n\n    const addPanel = () => {\n        props.containerApi.addPanel({\n            id: counter.next().toString(),\n            component: 'default',\n        });\n    };\n\n    return (\n        <div\n            style={{\n                height: '100%',\n                display: 'flex',\n                justifyContent: 'center',\n                alignItems: 'center',\n                color: 'white',\n            }}\n        >\n            <div\n                style={{\n                    display: 'flex',\n                    flexDirection: 'column',\n                }}\n            >\n                <span>\n                    This is a custom watermark. You can put whatever React\n                    component you want here\n                </span>\n                <span>\n                    <button onClick={addPanel}>Add New Panel</button>\n                </span>\n                {isGroup && (\n                    <span>\n                        <button\n                            onClick={() => {\n                                props.close();\n                            }}\n                        >\n                            Close Group\n                        </button>\n                    </span>\n                )}\n            </div>\n        </div>\n    );\n};\n\nexport const DockviewWatermark = () => {\n    const [api, setApi] = React.useState<DockviewApi>();\n\n    const onReady = (event: DockviewReadyEvent) => {\n        // event.api.addPanel({\n        //     id: 'panel_1',\n        //     component: 'default',\n        // });\n\n        event.api.fromJSON({\n            grid: {\n                orientation: Orientation.HORIZONTAL,\n                root: { type: 'branch', data: [] },\n                height: 100,\n                width: 100,\n            },\n            panels: {},\n        });\n\n        setApi(event.api);\n    };\n\n    const onClick = () => {\n        if (!api) {\n            return;\n        }\n\n        api.addGroup();\n    };\n\n    return (\n        <div\n            style={{\n                height: '500px',\n                display: 'flex',\n                flexDirection: 'column',\n            }}\n        >\n            <div>\n                <button onClick={onClick}>Add Empty Group</button>\n            </div>\n            <DockviewReact\n                onReady={onReady}\n                components={components}\n                watermarkComponent={Watermark}\n                className=\"dockview-theme-abyss nested-dockview\"\n            />\n        </div>\n    );\n};\n","import {\n    DockviewReact,\n    DockviewReadyEvent,\n    IDockviewPanelProps,\n    PanelApi,\n} from 'dockview';\nimport * as React from 'react';\n\nconst components = {\n    default: (props: IDockviewPanelProps<{ title: string }>) => {\n        return <div style={{ padding: '20px' }}>{props.params.title}</div>;\n    },\n};\n\nconst RenderWhenVisible = <T,>(\n    props: T & {\n        children: React.FunctionComponent<T>;\n        api: Pick<PanelApi, 'isVisible' | 'onDidVisibilityChange'>;\n    }\n) => {\n    const [visible, setVisible] = React.useState<boolean>(props.api.isVisible);\n\n    React.useEffect(() => {\n        const disposable = props.api.onDidVisibilityChange((event) =>\n            setVisible(event.isVisible)\n        );\n\n        return () => {\n            disposable.dispose();\n        };\n    }, [props.api]);\n\n    if (!visible) {\n        return null;\n    }\n\n    return React.createElement(props.children, props);\n};\n\nexport const SimpleDockview = () => {\n    const onReady = (event: DockviewReadyEvent) => {\n        const panel = event.api.addPanel({\n            id: 'panel_1',\n            component: 'default',\n            params: {\n                title: 'Panel 1',\n            },\n        });\n\n        panel.group.locked = true;\n        panel.group.header.hidden = true;\n\n        event.api.addPanel({\n            id: 'panel_2',\n            component: 'default',\n            params: {\n                title: 'Panel 2',\n            },\n        });\n\n        event.api.addPanel({\n            id: 'panel_3',\n            component: 'default',\n            params: {\n                title: 'Panel 3',\n            },\n        });\n\n        event.api.addPanel({\n            id: 'panel_4',\n            component: 'default',\n            params: {\n                title: 'Panel 4',\n            },\n            position: { referencePanel: 'panel_1', direction: 'right' },\n        });\n\n        const panel5 = event.api.addPanel({\n            id: 'panel_5',\n            component: 'default',\n            params: {\n                title: 'Panel 5',\n            },\n            position: { referencePanel: 'panel_3', direction: 'right' },\n        });\n\n        // panel5.group!.model.header.hidden = true;\n        // panel5.group!.model.locked = true;\n\n        event.api.addPanel({\n            id: 'panel_6',\n            component: 'default',\n            params: {\n                title: 'Panel 6',\n            },\n            position: { referencePanel: 'panel_5', direction: 'below' },\n        });\n\n        event.api.addPanel({\n            id: 'panel_7',\n            component: 'default',\n            params: {\n                title: 'Panel 7',\n            },\n            position: { referencePanel: 'panel_6', direction: 'right' },\n        });\n    };\n\n    return (\n        <DockviewReact\n            components={components}\n            onReady={onReady}\n            className=\"dockview-theme-abyss\"\n        />\n    );\n};\n","\n\n/* @jsxRuntime classic */\n/* @jsx mdx */\n/* @jsxFrag React.Fragment */\n\nimport React from 'react';\nimport { mdx } from '@mdx-js/react';\n\n\nexport const frontMatter = {\n\tdescription: 'Dockview Documentation'\n};\nexport const contentTitle = 'Dockview';\nexport const metadata = {\n  \"unversionedId\": \"components/dockview\",\n  \"id\": \"components/dockview\",\n  \"title\": \"Dockview\",\n  \"description\": \"Dockview Documentation\",\n  \"source\": \"@site/docs/components/dockview.mdx\",\n  \"sourceDirName\": \"components\",\n  \"slug\": \"/components/dockview\",\n  \"permalink\": \"/docs/next/components/dockview\",\n  \"draft\": false,\n  \"editUrl\": \"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/components/dockview.mdx\",\n  \"tags\": [],\n  \"version\": \"current\",\n  \"frontMatter\": {\n    \"description\": \"Dockview Documentation\"\n  },\n  \"sidebar\": \"tutorialSidebar\",\n  \"previous\": {\n    \"title\": \"Components\",\n    \"permalink\": \"/docs/next/category/components\"\n  },\n  \"next\": {\n    \"title\": \"Gridview\",\n    \"permalink\": \"/docs/next/components/gridview\"\n  }\n};\nexport const assets = {\n\n};\n\nimport { SimpleDockview } from '@site/src/components/simpleDockview';\nimport {\n    RenderingDockview,\n    Checkbox,\n} from '@site/src/components/dockview/rendering';\nimport { DndDockview } from '@site/src/components/dockview/dnd';\nimport { EventsDockview } from '@site/src/components/dockview/events';\nimport { ContextMenuDockview } from '@site/src/components/dockview/contextMenu';\nimport { NestedDockview } from '@site/src/components/dockview/nested';\nimport { CustomHeadersDockview } from '@site/src/components/dockview/customHeaders';\nimport { ResizeDockview } from '@site/src/components/dockview/resize';\nimport { DockviewGroupControl } from '@site/src/components/dockview/groupControl';\nimport { DockviewWatermark } from '@site/src/components/dockview/watermark';\nimport { DockviewPersistance } from '@site/src/components/dockview/persistance';\nimport {\n    DockviewNative,\n    DockviewNative2,\n} from '@site/src/components/dockview/native';\nimport Link from '@docusaurus/Link';\nimport useBaseUrl from '@docusaurus/useBaseUrl';\nexport const toc = [{\n  value: 'Introduction',\n  id: 'introduction',\n  level: 2\n}, {\n  value: 'DockviewReact Component',\n  id: 'dockviewreact-component',\n  level: 2\n}, {\n  value: 'Dockview API',\n  id: 'dockview-api',\n  level: 2\n}, {\n  value: 'Dockview Panel API',\n  id: 'dockview-panel-api',\n  level: 2\n}, {\n  value: 'Layout Persistance',\n  id: 'layout-persistance',\n  level: 2\n}, {\n  value: 'Resizing',\n  id: 'resizing',\n  level: 2\n}, {\n  value: 'Watermark',\n  id: 'watermark',\n  level: 2\n}, {\n  value: 'Drag And Drop',\n  id: 'drag-and-drop',\n  level: 2\n}, {\n  value: 'Built-in behaviours',\n  id: 'built-in-behaviours',\n  level: 3\n}, {\n  value: 'Extended behaviours',\n  id: 'extended-behaviours',\n  level: 3\n}, {\n  value: 'Panels',\n  id: 'panels',\n  level: 2\n}, {\n  value: 'Add Panel',\n  id: 'add-panel',\n  level: 3\n}, {\n  value: 'Panel Rendering',\n  id: 'panel-rendering',\n  level: 3\n}, {\n  value: 'Headers',\n  id: 'headers',\n  level: 2\n}, {\n  value: 'Custom Tab Headers',\n  id: 'custom-tab-headers',\n  level: 3\n}, {\n  value: 'Default Tab Title',\n  id: 'default-tab-title',\n  level: 3\n}, {\n  value: 'Custom Tab Title',\n  id: 'custom-tab-title',\n  level: 3\n}, {\n  value: 'Hidden Headers',\n  id: 'hidden-headers',\n  level: 3\n}, {\n  value: 'Full width tabs',\n  id: 'full-width-tabs',\n  level: 3\n}, {\n  value: 'Groups',\n  id: 'groups',\n  level: 2\n}, {\n  value: 'Locked group',\n  id: 'locked-group',\n  level: 3\n}, {\n  value: 'Group Controls Panel',\n  id: 'group-controls-panel',\n  level: 3\n}, {\n  value: 'Events',\n  id: 'events',\n  level: 2\n}, {\n  value: 'Advanced Examples',\n  id: 'advanced-examples',\n  level: 2\n}, {\n  value: 'Nested Dockviews',\n  id: 'nested-dockviews',\n  level: 3\n}, {\n  value: 'Example',\n  id: 'example',\n  level: 3\n}];\n\nconst layoutProps = {\n  toc\n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"dockview\"\n    }}>{`Dockview`}</h1>\n    <h2 {...{\n      \"id\": \"introduction\"\n    }}>{`Introduction`}</h2>\n    <p>{`Dockview is an abstraction built on top of `}<a parentName=\"p\" {...{\n        \"href\": \"./gridview\"\n      }}>{`Gridviews`}</a>{` where each view is a container of many tabbed panels.`}</p>\n    <div style={{\n      height: '300px',\n      backgroundColor: 'rgb(30,30,30)',\n      color: 'white',\n      margin: '20px 0px'\n    }}>\n    <SimpleDockview mdxType=\"SimpleDockview\" />\n    </div>\n    <p>{`You can access the panels associated group through the `}<inlineCode parentName=\"p\">{`panel.group`}</inlineCode>{` variable.\nThe group will always be defined and will change if a panel is moved into another group.`}</p>\n    <h2 {...{\n      \"id\": \"dockviewreact-component\"\n    }}>{`DockviewReact Component`}</h2>\n    <p>{`You can create a Dockview through the use of the `}<inlineCode parentName=\"p\">{`ReactDockview`}</inlineCode>{` component.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`import { ReactDockview } from 'dockview';\n`}</code></pre>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Property`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Type`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Optional`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Default`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Description`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`onReady`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`(event: SplitviewReadyEvent) => void`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`No`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`components`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`object`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`No`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`tabComponents`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`object`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Yes`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`watermarkComponent`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`object`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Yes`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`hideBorders`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`boolean`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Yes`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`false`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`className`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`string`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Yes`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`''`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`disableAutoResizing`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`boolean`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Yes`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`false`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`See `}<Link to=\"../basics/#auto-resizing\" mdxType=\"Link\">{`Auto Resizing`}</Link></td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`onDidDrop`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Event`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Yes`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`false`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`showDndOverlay`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Event`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Yes`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`false`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`defaultTabComponent`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`object`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Yes`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`groupControlComponent`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`object`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Yes`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`tabHeight`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`number`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Yes`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`singleTabMode`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`'fullwidth' `}{`|`}{` 'default'`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Yes`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`'default'`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n        </tr>\n      </tbody>\n    </table>\n    <h2 {...{\n      \"id\": \"dockview-api\"\n    }}>{`Dockview API`}</h2>\n    <p>{`The Dockview API is exposed both at the `}<inlineCode parentName=\"p\">{`onReady`}</inlineCode>{` event and on each panel through `}<inlineCode parentName=\"p\">{`props.containerApi`}</inlineCode>{`.\nThrough this API you can control general features of the component and access all added panels.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\",\n        \"metastring\": \"title=\\\"Dockview API via Panel component\\\"\",\n        \"title\": \"\\\"Dockview\",\n        \"API\": true,\n        \"via\": true,\n        \"Panel\": true,\n        \"component\\\"\": true\n      }}>{`const MyComponent = (props: IDockviewPanelProps<{ title: string }>) => {\n    // props.containerApi...\n\n    return <div>{\\`My first panel has the title: \\${props.params.title}\\`}</div>;\n};\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\",\n        \"metastring\": \"title=\\\"Dockview API via the onReady callback\\\"\",\n        \"title\": \"\\\"Dockview\",\n        \"API\": true,\n        \"via\": true,\n        \"the\": true,\n        \"onReady\": true,\n        \"callback\\\"\": true\n      }}>{`const onReady = (event: DockviewReadyEvent) => {\n    // event.api...\n};\n`}</code></pre>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Property`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Type`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Description`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`height`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`number`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Component pixel height`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`width`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`number`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Component pixel width`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`minimumHeight`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`number`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`maximumHeight`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`number`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`maximumWidth`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`number`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`maximumWidth`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`number`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`length`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`number`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Number of panels`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`size`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`number`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Number of Groups`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`panels`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`IDockviewPanel[]`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`groups`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`GroupPanel[]`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`activePanel`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`IDockviewPanel \\\\| undefined`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`activeGroup`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`IDockviewPanel \\\\| undefined`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`onDidLayoutChange`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`Event<void>`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`onDidLayoutFromJSON`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`Event<void>`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`onDidAddGroup`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`Event<GroupPanel>`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`onDidRemoveGroup`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`Event<GroupPanel>`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`onDidActiveGroupChange`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`Event<GroupPanel \\\\| undefined>`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`onDidAddPanel`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`Event<IDockviewPanel>`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`onDidRemovePanel`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`Event<IDockviewPanel>`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`onDidActivePanelChange`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`Event<IDockviewPanel \\\\| undefined>`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`onDidDrop`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`Event<DockviewDropEvent`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`addPanel`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`addPanel(options: AddPanelOptions): IDockviewPanel`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`getPanel`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`(id: string) \\\\| IDockviewPanel \\\\| undefined`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`addGroup`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`(options? AddGroupOptions): void`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`closeAllGroups`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`(): void`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`removeGroup`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`(group: GroupPanel): void`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`getGroup`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`(id: string): GroupPanel \\\\| undefined`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`getTabHeight`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`(): number \\\\| undefined`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`setTabHeight`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`(height: number \\\\| undefined): void`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`updateOptions`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`(options:SplitviewComponentUpdateOptions): void`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`focus`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`(): void`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`layout`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`(width: number, height:number): void`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><Link to=\"../basics/#auto-resizing\" mdxType=\"Link\">{`Auto Resizing`}</Link></td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`fromJSON`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`(data: SerializedDockview): void`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><Link to=\"../basics/#serialization\" mdxType=\"Link\">{`Serialization`}</Link></td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`toJSON`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`(): SerializedDockview`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><Link to=\"../basics/#serialization\" mdxType=\"Link\">{`Serialization`}</Link></td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`clear`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`(): void`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Clears the current layout`}</td>\n        </tr>\n      </tbody>\n    </table>\n    <h2 {...{\n      \"id\": \"dockview-panel-api\"\n    }}>{`Dockview Panel API`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`const MyComponent = (props: IDockviewPanelProps<{ title: string }>) => {\n    // props.api...\n\n    return <div>{\\`My first panel has the title: \\${props.params.title}\\`}</div>;\n};\n`}</code></pre>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Property`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Type`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Description`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`id`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`string`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Panel id`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`isFocused`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`boolean`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Is panel focused`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`isActive`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`boolean`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Is panel active`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`width`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`number`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Panel width`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`height`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`number`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Panel height`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`onDidDimensionsChange`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`Event<PanelDimensionChangeEvent>`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`onDidFocusChange`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`Event<FocusEvent>`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`onDidVisibilityChange`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`Event<VisibilityEvent>`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`onDidActiveChange`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`Event<ActiveEvent>`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`setActive`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`(): void`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`onDidConstraintsChange`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`onDidConstraintsChange: Event<PanelConstraintChangeEvent>`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`setConstraints`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`(value: PanelConstraintChangeEvent2): void;`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`setSize`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`(event: SizeEvent): void`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`group`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`\\`GroupPanel`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`undefined\\``}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`isGroupActive`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`boolean`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`title`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`string`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`suppressClosable`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`boolean`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`close`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`(): void`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`setTitle`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`(title: string): void`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n        </tr>\n      </tbody>\n    </table>\n    <h2 {...{\n      \"id\": \"layout-persistance\"\n    }}>{`Layout Persistance`}</h2>\n    <p>{`Layouts are loaded and saved via to `}<inlineCode parentName=\"p\">{`fromJSON`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`toJSON`}</inlineCode>{` methods on the Dockview api.\nThe api also exposes an event `}<inlineCode parentName=\"p\">{`onDidLayoutChange`}</inlineCode>{` you can listen on to determine when the layout has changed.\nBelow are some snippets showing how you might load from and save to localStorage.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\",\n        \"metastring\": \"title=\\\"Saving the layout state to localStorage\\\"\",\n        \"title\": \"\\\"Saving\",\n        \"the\": true,\n        \"layout\": true,\n        \"state\": true,\n        \"to\": true,\n        \"localStorage\\\"\": true\n      }}>{`React.useEffect(() => {\n    if (!api) {\n        return;\n    }\n\n    const disposable = api.onDidLayoutChange(() => {\n        const layout = api.toJSON();\n\n        localStorage.setItem(\n            'dockview_persistance_layout',\n            JSON.stringify(layout)\n        );\n    });\n\n    return () => {\n        disposable.dispose();\n    };\n}, [api]);\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\",\n        \"metastring\": \"title=\\\"Loading a layout from localStorage\\\"\",\n        \"title\": \"\\\"Loading\",\n        \"a\": true,\n        \"layout\": true,\n        \"from\": true,\n        \"localStorage\\\"\": true\n      }}>{`const onReady = (event: DockviewReadyEvent) => {\n    const layoutString = localStorage.getItem('dockview_persistance_layout');\n\n    let success = false;\n\n    if (layoutString) {\n        try {\n            const layout = JSON.parse(layoutString);\n            event.api.fromJSON(layout);\n            success = true;\n        } catch (err) {\n            //\n        }\n    }\n\n    if (!success) {\n        // do something if there is no layout or there was a loading error\n    }\n};\n`}</code></pre>\n    <p>{`Here is an example using the above code loading from and saving to localStorage.\nIf you refresh the page you should notice your layout is loaded as you left it.`}</p>\n    <DockviewPersistance mdxType=\"DockviewPersistance\" />\n    <h2 {...{\n      \"id\": \"resizing\"\n    }}>{`Resizing`}</h2>\n    <p>{`Each Dockview contains of a number of groups and each group has a number of panels.\nLogically a user may want to resize a panel, but this translates to resizing the group which contains that panel.`}</p>\n    <p>{`You can set the size of a panel using `}<inlineCode parentName=\"p\">{`props.api.setSize(...)`}</inlineCode>{`.\nYou can also set the size of the group associated with the panel using `}<inlineCode parentName=\"p\">{`props.api.group.api.setSize(...)`}</inlineCode>{` although this isn't recommended\ndue to the clunky syntax.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`// it's mandatory to provide either a height or a width, providing both is optional\nprops.api.setSize({\n    height: 100,\n    width: 200,\n});\n\n// you could also resize the panels group, although not recommended it achieved the same result\nprops.api.group.api.setSize({\n    height: 100,\n    width: 200,\n});\n`}</code></pre>\n    <p>{`You can see an example invoking both approaches below.`}</p>\n    <ResizeDockview mdxType=\"ResizeDockview\" />\n    <h2 {...{\n      \"id\": \"watermark\"\n    }}>{`Watermark`}</h2>\n    <p>{`When the dockview is empty you may want to display some fallback content, this is refered to as the `}<inlineCode parentName=\"p\">{`watermark`}</inlineCode>{`.\nBy default there the watermark has no content but you can provide as a prop to `}<inlineCode parentName=\"p\">{`DockviewReact`}</inlineCode>{` a `}<inlineCode parentName=\"p\">{`watermarkComponent`}</inlineCode>{`\nwhich will be rendered when there are no panels or groups.`}</p>\n    <DockviewWatermark mdxType=\"DockviewWatermark\" />\n    <h2 {...{\n      \"id\": \"drag-and-drop\"\n    }}>{`Drag And Drop`}</h2>\n    <h3 {...{\n      \"id\": \"built-in-behaviours\"\n    }}>{`Built-in behaviours`}</h3>\n    <p>{`Dockview supports a wide variety of built-in Drag and Drop possibilities.\nBelow are some examples of the operations you can perform.`}</p>\n    <img style={{\n      width: '60%'\n    }} src={useBaseUrl('/img/add_to_tab.svg')} />\n    <blockquote>\n      <p parentName=\"blockquote\">{`Drag a tab onto another tab to place it inbetween existing tabs.`}</p>\n    </blockquote>\n    <img style={{\n      width: '60%'\n    }} src={useBaseUrl('/img/add_to_empty_space.svg')} />\n    <blockquote>\n      <p parentName=\"blockquote\">{`Drag a tab to the right of the last tab to place it after the existing tabs.`}</p>\n    </blockquote>\n    <img style={{\n      width: '60%'\n    }} src={useBaseUrl('/img/add_to_group.svg')} />\n    <blockquote>\n      <p parentName=\"blockquote\">{`Drag a group onto an existing group to merge the two groups.`}</p>\n    </blockquote>\n    <div style={{\n      display: 'flex',\n      justifyContent: 'space-around'\n    }}>\n    <img style={{\n        width: '40%'\n      }} src={useBaseUrl('/img/drop_positions.svg')} />\n    <img style={{\n        width: '40%'\n      }} src={useBaseUrl('/img/magnet_drop_positions.svg')} />\n    </div>\n    <blockquote>\n      <p parentName=\"blockquote\">{`Drag into the left/right/top/bottom target zone of a panel to create a new group in the selected direction.`}</p>\n    </blockquote>\n    <blockquote>\n      <p parentName=\"blockquote\">{`Drag into the center of a panel to add to that group.`}</p>\n    </blockquote>\n    <blockquote>\n      <p parentName=\"blockquote\">{`Drag to the edge of the dockview component to create a new group on the selected edge.`}</p>\n    </blockquote>\n    <h3 {...{\n      \"id\": \"extended-behaviours\"\n    }}>{`Extended behaviours`}</h3>\n    <p>{`For interaction with the Drag events directly the component exposes some method to help determine whether external drag events should be interacted with or not.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`/**\n * called when an ondrop event which does not originate from the dockview libray and\n * passes the showDndOverlay condition occurs\n **/\nconst onDidDrop = (event: DockviewDropEvent) => {\n    const { group } = event;\n\n    event.api.addPanel({\n        id: 'test',\n        component: 'default',\n        position: {\n            referencePanel: group.activePanel.id,\n            direction: 'within',\n        },\n    });\n};\n\n/**\n * called for drag over events which do not originate from the dockview library\n * allowing the developer to decide where the overlay should be shown for a\n * particular drag event\n **/\nconst showDndOverlay = (event: DockviewDndOverlayEvent) => {\n    return true;\n};\n\nreturn (\n    <DockviewReact\n        components={components}\n        onReady={onReady}\n        className=\"dockview-theme-abyss\"\n        onDidDrop={onDidDrop}\n        showDndOverlay={showDndOverlay}\n    />\n);\n`}</code></pre>\n    <DndDockview mdxType=\"DndDockview\" />\n    <h2 {...{\n      \"id\": \"panels\"\n    }}>{`Panels`}</h2>\n    <h3 {...{\n      \"id\": \"add-panel\"\n    }}>{`Add Panel`}</h3>\n    <p>{`Using the dockview API you can access the `}<inlineCode parentName=\"p\">{`addPanel`}</inlineCode>{` method which returns an instance of the created panel.\nThe minimum method signature is:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`const panel = api.addPanel({\n    id: 'my_unique_panel_id',\n    component: 'my_component',\n});\n`}</code></pre>\n    <p>{`where `}<inlineCode parentName=\"p\">{`id`}</inlineCode>{` is the unique id of the panel and `}<inlineCode parentName=\"p\">{`component`}</inlineCode>{` is the implenentation which\nwill be used to render the panel. You will have registered this using the `}<inlineCode parentName=\"p\">{`components`}</inlineCode>{` prop of the `}<inlineCode parentName=\"p\">{`DockviewReactComponent`}</inlineCode>{` component.`}</p>\n    <p>{`You can optionally provide a `}<inlineCode parentName=\"p\">{`tabComponent`}</inlineCode>{` parameters to the `}<inlineCode parentName=\"p\">{`addPanel`}</inlineCode>{` method which will render the tab using a custom renderer.\nYou will have registered this using the `}<inlineCode parentName=\"p\">{`tabComponents`}</inlineCode>{` prop of the `}<inlineCode parentName=\"p\">{`DockviewReactComponent`}</inlineCode>{` component.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`const panel = api.addPanel({\n    id: 'my_unique_panel_id',\n    component: 'my_component',\n    tabComponent: 'my_tab_component',\n});\n`}</code></pre>\n    <p>{`You can pass properties to the panel using the `}<inlineCode parentName=\"p\">{`params`}</inlineCode>{` key.\nYou can update these properties through the panels `}<inlineCode parentName=\"p\">{`api`}</inlineCode>{` object and its `}<inlineCode parentName=\"p\">{`updateParameters`}</inlineCode>{` method.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`const panel = api.addPanel({\n    id: 'my_unique_panel_id',\n    component: 'my_component',\n    params: {\n        myCustomKey: 'my_custom_value',\n    },\n});\n\npanel.api.updateParameters({\n    myCustomKey: 'my_custom_value',\n    myOtherCustomKey: 'my_other_custom_key',\n});\n`}</code></pre>\n    <blockquote>\n      <p parentName=\"blockquote\">{`Note `}<inlineCode parentName=\"p\">{`updateParameters`}</inlineCode>{` does not accept partial parameter updates, you should call it with the entire set of parameters\nyou want the panel to receive.`}</p>\n    </blockquote>\n    <p>{`Finally `}<inlineCode parentName=\"p\">{`addPanel`}</inlineCode>{` accepts a `}<inlineCode parentName=\"p\">{`position`}</inlineCode>{` object which tells dockview where to place the panel.`}</p>\n    <ul>\n      <li parentName=\"ul\">{`This object optionally accepts either a `}<inlineCode parentName=\"li\">{`referencePanel`}</inlineCode>{` or `}<inlineCode parentName=\"li\">{`referenceGroup`}</inlineCode>{` which can be the associated id as a string\nor the panel/group object reference.`}</li>\n      <li parentName=\"ul\">{`This object accepts a `}<inlineCode parentName=\"li\">{`direction`}</inlineCode>{` property which dictates where,\nrelative to the provided reference the new panel will be placed.`}</li>\n    </ul>\n    <blockquote>\n      <p parentName=\"blockquote\">{`If neither a `}<inlineCode parentName=\"p\">{`referencePanel`}</inlineCode>{` or `}<inlineCode parentName=\"p\">{`referenceGroup`}</inlineCode>{` then the provided `}<inlineCode parentName=\"p\">{`direction`}</inlineCode>{` will be treated as absolute.`}</p>\n    </blockquote>\n    <blockquote>\n      <p parentName=\"blockquote\">{`If no `}<inlineCode parentName=\"p\">{`direction`}</inlineCode>{` is provided the library will place the new panel in a pre-determined position.`}</p>\n    </blockquote>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`const panel = api.addPanel({\n    id: 'panel_1',\n    component: 'default',\n});\n\nconst panel2 = api.addPanel({\n    id: 'panel_2',\n    component: 'default',\n    position: {\n        referencePanel: panel1,\n        direction: 'right',\n    },\n});\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"panel-rendering\"\n    }}>{`Panel Rendering`}</h3>\n    <p>{`By default `}<inlineCode parentName=\"p\">{`DockviewReact`}</inlineCode>{` only adds to the DOM those panels that are visible,\nif a panel is not the active tab and not shown the contents of the hidden panel will be removed from the DOM.`}</p>\n    <p>{`However the React Components associated with each panel are only created once and will always exist for as long as the panel exists, hidden or not.`}</p>\n    <blockquote>\n      <p parentName=\"blockquote\">{`For example this means that any hooks in those components will run whether the panel is visible or not which may lead to excessive background work depending\non the panels implementation.`}</p>\n    </blockquote>\n    <p>{`This is the default behaviour to ensure the greatest flexibility for the user but through the panels `}<inlineCode parentName=\"p\">{`props.api`}</inlineCode>{` you can listen to the visiblity state of the panel\nand write additional logic to optimize your application.`}</p>\n    <p>{`For example if you wanted to unmount the React Components when the panel is not visible you could create a Higher-Order-Component that listens to the panels\nvisiblity state and only renders the panel when visible.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\",\n        \"metastring\": \"title=\\\"Only rendering the React Component when the panel is visible, otherwise rendering a null React Component\\\"\",\n        \"title\": \"\\\"Only\",\n        \"rendering\": true,\n        \"the\": true,\n        \"React\": true,\n        \"Component\": true,\n        \"when\": true,\n        \"panel\": true,\n        \"is\": true,\n        \"visible,\": true,\n        \"otherwise\": true,\n        \"a\": true,\n        \"null\": true,\n        \"Component\\\"\": true\n      }}>{`import { IDockviewPanelProps } from 'dockview';\nimport * as React from 'react';\n\nfunction RenderWhenVisible(\n    component: React.FunctionComponent<IDockviewPanelProps>\n) {\n    const HigherOrderComponent = (props: IDockviewPanelProps) => {\n        const [visible, setVisible] = React.useState<boolean>(\n            props.api.isVisible\n        );\n\n        React.useEffect(() => {\n            const disposable = props.api.onDidVisibilityChange((event) =>\n                setVisible(event.isVisible)\n            );\n\n            return () => {\n                disposable.dispose();\n            };\n        }, [props.api]);\n\n        if (!visible) {\n            return null;\n        }\n\n        return React.createElement(component, props);\n    };\n    return HigherOrderComponent;\n}\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`const components = { default: RenderWhenVisible(MyComponent) };\n`}</code></pre>\n    <p>{`Toggling the checkbox you can see that when you only render those panels which are visible the underling React component is destroyed when it becomes hidden and re-created when it becomes visible.`}</p>\n    <Checkbox mdxType=\"Checkbox\" />\n    <div style={{\n      height: '300px',\n      backgroundColor: 'rgb(30,30,30)',\n      color: 'white',\n      margin: '20px 0px'\n    }}>\n    <RenderingDockview renderVisibleOnly={false} mdxType=\"RenderingDockview\" />\n    </div>\n    <h2 {...{\n      \"id\": \"headers\"\n    }}>{`Headers`}</h2>\n    <h3 {...{\n      \"id\": \"custom-tab-headers\"\n    }}>{`Custom Tab Headers`}</h3>\n    <p>{`You can provide custom renderers for your tab headers for maximum customization.\nA default implementation of `}<inlineCode parentName=\"p\">{`DockviewDefaultTab`}</inlineCode>{` is provided should you only wish to attach minor\nchanges and events that do not alter the default behaviour, for example to add a custom context menu event\nhandler.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\",\n        \"metastring\": \"title=\\\"Attaching a custom context menu event handlers to a custom header\\\"\",\n        \"title\": \"\\\"Attaching\",\n        \"a\": true,\n        \"custom\": true,\n        \"context\": true,\n        \"menu\": true,\n        \"event\": true,\n        \"handlers\": true,\n        \"to\": true,\n        \"header\\\"\": true\n      }}>{`import { IDockviewPanelHeaderProps, DockviewDefaultTab } from 'dockview';\n\nconst MyCustomheader = (props: IDockviewPanelHeaderProps) => {\n    const onContextMenu = (event: React.MouseEvent) => {\n        event.preventDefault();\n        alert('context menu');\n    };\n    return <DockviewDefaultTab onContextMenu={onContextMenu} {...props} />;\n};\n`}</code></pre>\n    <p>{`You are also free to define a custom renderer entirely from scratch and not make use of the `}<inlineCode parentName=\"p\">{`DockviewDefaultTab`}</inlineCode>{` component.\nTo use a custom renderer you can must register a collection of tab components.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`const tabComponents = {\n    myCustomHeader: MyCustomHeader,\n};\n\nreturn <DockviewReact tabComponents={tabComponents}  ... />;\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`api.addPanel({\n    id: 'panel_1',\n    component: 'default',\n    tabComponent: 'myCustomHeader', // <-- your registered renderers\n    title: 'Panel 1',\n});\n`}</code></pre>\n    <p>{`You can also override the default tab renderer which will be used when no `}<inlineCode parentName=\"p\">{`tabComponent`}</inlineCode>{` is provided to the `}<inlineCode parentName=\"p\">{`addPanel`}</inlineCode>{` function.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`<DockviewReact defaultTabComponent={MyCustomHeader}  ... />;\n`}</code></pre>\n    <p>{`As a simple example the below attachs a custom event handler for the context menu on all tabs as a default tab renderer`}</p>\n    <p>{`The below example uses a custom tab renderer to reigster a popover when the user right clicked on a tab.\nThis still makes use of the `}<inlineCode parentName=\"p\">{`DockviewDefaultTab`}</inlineCode>{` since it's only a minor change.`}</p>\n    <CustomHeadersDockview mdxType=\"CustomHeadersDockview\" />\n    <h3 {...{\n      \"id\": \"default-tab-title\"\n    }}>{`Default Tab Title`}</h3>\n    <p>{`If you are using the default tab renderer you can set the title of a tab when creating it`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`api.addPanel({\n    id: 'panel_1',\n    component: 'my_component',\n    title: 'my_custom_title', // <-- special param for title\n});\n`}</code></pre>\n    <p>{`You can update the title through the panel api which can be accessed via `}<inlineCode parentName=\"p\">{`props.api`}</inlineCode>{` if you are inside the panel\ncomponent or via `}<inlineCode parentName=\"p\">{`api.getPanel('panel1').api`}</inlineCode>{` if you are accessing from outside of the panel component.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`api.updateTitle('my_new_custom_title');\n`}</code></pre>\n    <blockquote>\n      <p parentName=\"blockquote\">{`Note this only works when using the default tab implementation.`}</p>\n    </blockquote>\n    <h3 {...{\n      \"id\": \"custom-tab-title\"\n    }}>{`Custom Tab Title`}</h3>\n    <p>{`If you are using a custom tab implementation you should pass variables through as a parameter and render them\nthrough your tab components implementation.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\",\n        \"metastring\": \"title=\\\"Add a panel with custom parameters\\\"\",\n        \"title\": \"\\\"Add\",\n        \"a\": true,\n        \"panel\": true,\n        \"with\": true,\n        \"custom\": true,\n        \"parameters\\\"\": true\n      }}>{`api.addPanel({\n    id: 'panel_2',\n    component: 'my_component',\n    tabComponent: 'my_tab',\n    params: {\n        myTitle: 'Window 2', // <-- passing a variable to use as a title\n    },\n});\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\",\n        \"metastring\": \"title=\\\"Accessing custom parameters from a custom tab renderer\\\"\",\n        \"title\": \"\\\"Accessing\",\n        \"custom\": true,\n        \"parameters\": true,\n        \"from\": true,\n        \"a\": true,\n        \"tab\": true,\n        \"renderer\\\"\": true\n      }}>{`const tabComponents = {\n    default: (props: IDockviewPanelHeaderProps<{ myTitle: string }>) => {\n        const title = props.params.myTitle; // <-- accessing my custom varaible\n        return <div>{/** tab implementation as chosen by developer */}</div>;\n    },\n};\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"hidden-headers\"\n    }}>{`Hidden Headers`}</h3>\n    <p>{`You may wish to hide the header section of a group. This can achieved through the `}<inlineCode parentName=\"p\">{`hidden`}</inlineCode>{` variable on `}<inlineCode parentName=\"p\">{`panel.group.header`}</inlineCode>{`.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`panel.group.header.hidden = true;\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"full-width-tabs\"\n    }}>{`Full width tabs`}</h3>\n    <p><inlineCode parentName=\"p\">{`DockviewReactComponent`}</inlineCode>{` accepts the prop `}<inlineCode parentName=\"p\">{`singleTabMode`}</inlineCode>{`. If set `}<inlineCode parentName=\"p\">{`singleTabMode=fullwidth`}</inlineCode>{` then when there is only one tab in a group this tab will expand\nto the entire width of the group. For example:`}</p>\n    <blockquote>\n      <p parentName=\"blockquote\">{`This can be conmbined with `}<Link to=\"./dockview/#locked-group\" mdxType=\"Link\">{`Locked Groups`}</Link>{` to create an application that feels more like a Window Manager\nrather than a collection of groups and tabs.`}</p>\n    </blockquote>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`<DockviewReactComponent singleTabMode=\"fullwidth\" {...otherProps} />\n`}</code></pre>\n    <DockviewNative mdxType=\"DockviewNative\" />\n    <h2 {...{\n      \"id\": \"groups\"\n    }}>{`Groups`}</h2>\n    <h3 {...{\n      \"id\": \"locked-group\"\n    }}>{`Locked group`}</h3>\n    <p>{`Locking a group will disable all drop events for this group ensuring no additional panels can be added to the group through drop events.\nYou can still add groups to a locked panel programatically using the API though.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`panel.group.locked = true;\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"group-controls-panel\"\n    }}>{`Group Controls Panel`}</h3>\n    <p><inlineCode parentName=\"p\">{`DockviewReact`}</inlineCode>{` accepts a prop `}<inlineCode parentName=\"p\">{`groupControlComponent`}</inlineCode>{` which expects a React component whos props are `}<inlineCode parentName=\"p\">{`IDockviewGroupControlProps`}</inlineCode>{`.\nThis control will be rendered inside the header bar on the right hand side for each group of tabs.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`const Component: React.FunctionComponent<IDockviewGroupControlProps> = () => {\n    return <div>{'...'}</div>;\n};\n\nreturn <DockviewReact {...props} groupControlComponent={Component} />;\n`}</code></pre>\n    <p>{`As a simple example the below uses the `}<inlineCode parentName=\"p\">{`groupControlComponent`}</inlineCode>{` to render a small control that indicates whether the group\nis active and which panel is active in that group.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`const GroupControlComponent = (props: IDockviewGroupControlProps) => {\n    const isGroupActive = props.isGroupActive;\n    const activePanel = props.activePanel;\n\n    return (\n        <div className=\"dockview-groupcontrol-demo\">\n            <span\n                className=\"dockview-groupcontrol-demo-group-active\"\n                style={{\n                    background: isGroupActive ? 'green' : 'red',\n                }}\n            >\n                {isGroupActive ? 'Group Active' : 'Group Inactive'}\n            </span>\n            <span className=\"dockview-groupcontrol-demo-active-panel\">{\\`activePanel: \\${\n                activePanel?.id || 'null'\n            }\\`}</span>\n        </div>\n    );\n};\n`}</code></pre>\n    <DockviewGroupControl mdxType=\"DockviewGroupControl\" />\n    <h2 {...{\n      \"id\": \"events\"\n    }}>{`Events`}</h2>\n    <EventsDockview mdxType=\"EventsDockview\" />\n    <h2 {...{\n      \"id\": \"advanced-examples\"\n    }}>{`Advanced Examples`}</h2>\n    <h3 {...{\n      \"id\": \"nested-dockviews\"\n    }}>{`Nested Dockviews`}</h3>\n    <p>{`You can safely create multiple dockview instances within one page and nest dockviews within other dockviews.\nIf you wish to interact with the drop event from one dockview instance in another dockview instance you can implement the `}<inlineCode parentName=\"p\">{`showDndOverlay`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`onDidDrop`}</inlineCode>{` props on `}<inlineCode parentName=\"p\">{`DockviewReact`}</inlineCode>{`.`}</p>\n    <NestedDockview mdxType=\"NestedDockview\" />\n    <h3 {...{\n      \"id\": \"example\"\n    }}>{`Example`}</h3>\n    <p>{`hello`}</p>\n    <DockviewNative2 mdxType=\"DockviewNative2\" />\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n"],"names":["Console","props","ref","React","current","scrollTop","Math","max","scrollHeight","clientHeight","lines","className","map","line","i","key","now","pad","x","getHours","getMinutes","getSeconds","getMilliseconds","formatTime","timestamp","style","css","text","components","default","padding","params","title","headerComponents","onContextMenu","event","preventDefault","alert","CustomHeadersDockview","height","margin","display","flexDirection","defaultTabComponent","onReady","localStorage","getItem","api","addPanel","id","component","position","referencePanel","direction","panel6","group","locked","header","hidden","addGroup","DndDockview","backgroundColor","borderRadius","width","cursor","draggable","color","onDidDrop","positionToDirection","referenceGroup","showDndOverlay","EventsDockview","setLines","checked","setChecked","setApi","disposables","onDidAddPanel","panel","Date","onDidRemovePanel","onDidActivePanelChange","onDidAddGroup","onDidRemoveGroup","onDidActiveGroupChange","onDidLayoutChange","onDidLayoutFromJSON","forEach","disposable","dispose","fromJSON","grid","root","type","data","views","activeView","size","orientation","Orientation","panels","panel_1","view","content","panel_2","panel_3","panel_4","panel_5","panel_6","panel_8","panel_7","activeGroup","options","clear","onChange","e","target","justifyContent","alignItems","GroupControlComponent","isGroupActive","activePanel","background","DockviewGroupControl","tabComponent","groupControlComponent","isolatedApp","tabComponents","flexGrow","DockviewNative","singleTabMode","DockviewNative2","innerDockview","NestedDockview","loadDefaultLayout","DockviewPersistance","layout","toJSON","setItem","JSON","stringify","onClick","removeItem","layoutString","success","parse","err","watermarkComponent","Watermark","renderVisibleComponentsOnlyAtom","atom","formatLine","timeout","setTimeout","clearTimeout","visible","setVisible","isVisible","render","useRecoilValue","onDidVisibilityChange","RenderingDockview","setRender","useRecoilState","renderVisibleOnly","Checkbox","setWidth","setHeight","value","Number","min","step","setSize","ResizeDockview","counter","next","isGroup","containerApi","groups","length","toString","close","DockviewWatermark","SimpleDockview","frontMatter","description","contentTitle","metadata","assets","toc","level","layoutProps","MDXLayout","MDXContent","mdxType","parentName","to","src","useBaseUrl","D","isMDXComponent"],"sourceRoot":""}