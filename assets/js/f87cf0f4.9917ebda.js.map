{"version":3,"file":"assets/js/f87cf0f4.9917ebda.js","mappings":"2KAQMA,EAAa,CACfC,QAAS,SAACC,GACN,OAAO,uBAAKC,MAAO,CAAEC,QAAS,SAAWF,EAAMG,OAAOC,SA6BjDC,EAAiB,WAqE1B,OACI,gBAAC,KAAD,CACIP,WAAYA,EACZQ,QAvEQ,SAACC,GACb,IAAMC,EAAQD,EAAME,IAAIC,SAAS,CAC7BC,GAAI,UACJC,UAAW,UACXT,OAAQ,CACJC,MAAO,aAIfI,EAAMK,MAAMC,QAAS,EACrBN,EAAMK,MAAME,OAAOC,QAAS,EAE5BT,EAAME,IAAIC,SAAS,CACfC,GAAI,UACJC,UAAW,UACXT,OAAQ,CACJC,MAAO,aAIfG,EAAME,IAAIC,SAAS,CACfC,GAAI,UACJC,UAAW,UACXT,OAAQ,CACJC,MAAO,aAIfG,EAAME,IAAIC,SAAS,CACfC,GAAI,UACJC,UAAW,UACXT,OAAQ,CACJC,MAAO,WAEXa,SAAU,CAAEC,eAAgB,UAAWC,UAAW,WAGvCZ,EAAME,IAAIC,SAAS,CAC9BC,GAAI,UACJC,UAAW,UACXT,OAAQ,CACJC,MAAO,WAEXa,SAAU,CAAEC,eAAgB,UAAWC,UAAW,WAMtDZ,EAAME,IAAIC,SAAS,CACfC,GAAI,UACJC,UAAW,UACXT,OAAQ,CACJC,MAAO,WAEXa,SAAU,CAAEC,eAAgB,UAAWC,UAAW,WAGtDZ,EAAME,IAAIC,SAAS,CACfC,GAAI,UACJC,UAAW,UACXT,OAAQ,CACJC,MAAO,WAEXa,SAAU,CAAEC,eAAgB,UAAWC,UAAW,YAQlDC,UAAU,0B,2ECxGhBtB,EAAa,CACfC,QAAS,SAACC,GACN,OAAO,uBAAKC,MAAO,CAAEC,QAAS,SAAWF,EAAMG,OAAOC,SAIjDiB,EAAiB,WA2E1B,OACI,gBAAC,KAAD,CACIvB,WAAYA,EACZQ,QA7EQ,SAACC,GACbA,EAAME,IAAIC,SAAS,CACfC,GAAI,UACJC,UAAW,UACXT,OAAQ,CACJC,MAAO,aAIfG,EAAME,IAAIC,SAAS,CACfC,GAAI,UACJC,UAAW,UACXT,OAAQ,CACJC,MAAO,aAIfG,EAAME,IAAIC,SAAS,CACfC,GAAI,UACJC,UAAW,UACXT,OAAQ,CACJC,MAAO,aAIfG,EAAME,IAAIC,SAAS,CACfC,GAAI,UACJC,UAAW,UACXT,OAAQ,CACJC,MAAO,WAEXa,SAAU,CAAEC,eAAgB,UAAWC,UAAW,WAGtDZ,EAAME,IAAIC,SAAS,CACfC,GAAI,UACJC,UAAW,UACXT,OAAQ,CACJC,MAAO,WAEXa,SAAU,CAAEC,eAAgB,UAAWC,UAAW,WAGtDZ,EAAME,IAAIC,SAAS,CACfC,GAAI,UACJC,UAAW,UACXT,OAAQ,CACJC,MAAO,WAEXa,SAAU,CAAEC,eAAgB,UAAWC,UAAW,SAClDG,aAAc,KAGlBf,EAAME,IAAIC,SAAS,CACfC,GAAI,UACJC,UAAW,UACXT,OAAQ,CACJC,MAAO,WAEXa,SAAU,CAAEC,eAAgB,UAAWC,UAAW,SAClDG,aAAc,KAGlBf,EAAME,IAAIC,SAAS,CACfC,GAAI,UACJC,UAAW,UACXT,OAAQ,CACJC,MAAO,WAEXa,SAAU,CAAEC,eAAgB,UAAWC,UAAW,SAClDG,aAAc,MAQdC,oBAAoB,EACpBC,YAAaC,EAAAA,GAAAA,SACbL,UAAU,0B,4ECxFhBtB,EAAa,CACfC,QAAS,SAACC,GACN,OACI,uBACIC,MAAO,CACHC,QAAS,OACTwB,OAAQ,OACRC,gBAAiB,kBAGpB3B,EAAMG,OAAOC,SA0CxBwB,EAAmB,CACrBC,kBArCsB,SAAC7B,GACvB,MAAgC8B,EAAAA,SAC5B9B,EAAMS,IAAIsB,YADPC,EAAP,KAAiBC,EAAjB,KAIAH,EAAAA,WAAgB,WACZ,IAAMI,EAAalC,EAAMS,IAAI0B,sBAAqB,SAAC5B,GAC/C0B,EAAY1B,EAAMwB,eAGtB,OAAO,WACHG,EAAWE,aAEhB,IAMH,OACI,uBACInC,MAAO,CACHC,QAAS,OACTwB,OAAQ,OACRC,gBAAiB,kBAGrB,qBACIU,QAbI,WACZrC,EAAMS,IAAIwB,aAAaD,IAafZ,UAAWY,EAAW,WAAa,cAEvC,4BAAOhC,EAAMG,OAAOC,UASnBkC,EAAiB,WA8B1B,OACI,gBAAC,KAAD,CACIxC,WAAYA,EACZ8B,iBAAkBA,EAClBtB,QAjCQ,SAACC,GACbA,EAAME,IAAIC,SAAS,CACfC,GAAI,UACJC,UAAW,UACXT,OAAQ,CACJC,MAAO,WAEXA,MAAO,YAGXG,EAAME,IAAIC,SAAS,CACfC,GAAI,UACJC,UAAW,UACXT,OAAQ,CACJC,MAAO,WAEXA,MAAO,YAGXG,EAAME,IAAIC,SAAS,CACfC,GAAI,UACJC,UAAW,UACXT,OAAQ,CACJC,MAAO,WAEXA,MAAO,aASPgB,UAAU,0B,4EC1FhBtB,EAAa,CACfC,QAAS,SAACC,GACN,OAAO,uBAAKC,MAAO,CAAEC,QAAS,SAAWF,EAAMG,OAAOC,SAIjDmC,EAAkB,SAACvC,GA8B5B,OACI,gBAAC,KAAD,CACIF,WAAYA,EACZyB,mBAAoBvB,EAAMwC,aAC1BlC,QAjCQ,SAACC,GACbA,EAAME,IAAIC,SAAS,CACfC,GAAI,UACJC,UAAW,UACXT,OAAQ,CACJC,MAAO,WAEXqC,YAAa,MAGjBlC,EAAME,IAAIC,SAAS,CACfC,GAAI,UACJC,UAAW,UACXT,OAAQ,CACJC,MAAO,WAEXqC,YAAa,MAGjBlC,EAAME,IAAIC,SAAS,CACfC,GAAI,UACJC,UAAW,UACXT,OAAQ,CACJC,MAAO,WAEXqC,YAAa,OASbjB,YAAaC,EAAAA,GAAAA,WACbL,UAAU,0B,2TCxCTsB,EAAc,CAC1BC,iBAAkB,GAENC,EAAe,eACfC,EAAW,CACtB,cAAiB,QACjB,GAAM,sBACN,MAAS,eACT,YAAe,wFACf,OAAU,+CACV,cAAiB,IACjB,KAAQ,IACR,UAAa,SACb,OAAS,EACT,QAAW,sIACX,KAAQ,GACR,QAAW,QACX,gBAAmB,EACnB,YAAe,CACb,iBAAoB,GAEtB,QAAW,kBACX,KAAQ,CACN,MAAS,SACT,UAAa,iBAGJC,EAAS,GAQTC,EAAM,CAAC,CAClBC,MAAO,WACPrC,GAAI,WACJsC,MAAO,GACN,CACDD,MAAO,cACPrC,GAAI,cACJsC,MAAO,IAGHC,EAAc,CAClBH,IAAAA,GAGa,SAASI,EAAT,GAGX,IAFFrD,EAEC,EAFDA,WACGE,GACF,YACD,OAAO,QALS,WAKT,UAAekD,EAAiBlD,EAAhC,CAAuCF,WAAYA,EAAYsD,QAAQ,eAG5E,cACE,GAAM,gBADR,iBAGA,kBAAG,kBAAQC,WAAW,KAAnB,YAAH,kFACA,cACE,GAAM,YADR,aAGA,mBACE,cAAIA,WAAW,MAAf,8BACA,cAAIA,WAAW,MAAf,iEACA,cAAIA,WAAW,MAAf,2BAEF,cACE,GAAM,eADR,gBAGA,kBAAG,sBAAYA,WAAW,KAAvB,YAAH,8BAAqF,sBAAYA,WAAW,KAAvB,mBAArF,SAAyJ,sBAAYA,WAAW,KAAvB,uBAAzJ,iBAAyO,sBAAYA,WAAW,KAAvB,YAAzO,kBACA,oBAAK,gBAAMA,WAAW,MAClB,UAAa,kBADZ,4BAIL,8EAAgE,aAAGA,WAAW,IAC1E,KAAQ,sEACP,sBAAYA,WAAW,KAAvB,sCAFL,iDAIA,oBAAK,gBAAMA,WAAW,MAClB,UAAa,gBADZ,mEAIL,wOAA0N,sBAAYA,WAAW,KAAvB,QAA1N,gBACA,oBAAK,gBAAMA,WAAW,MAClB,UAAa,iBADZ,2HASL,iEACA,+BACA,eAAKpD,MAAO,CACVyB,OAAQ,QACRC,gBAAiB,gBACjB2B,MAAO,QACPC,OAAQ,cAEV,QAAC,IAAD,CAAiBH,QAAQ,sBAEzB,eAAKnD,MAAO,CACVyB,OAAQ,QACRC,gBAAiB,gBACjB2B,MAAO,QACPC,OAAQ,cAEV,QAAC,IAAD,CAAgBH,QAAQ,qBAExB,eAAKnD,MAAO,CACVyB,OAAQ,QACRC,gBAAiB,gBACjB2B,MAAO,QACPC,OAAQ,cAEV,QAAC,IAAD,CAAgBH,QAAQ,qBAExB,eAAKnD,MAAO,CACVyB,OAAQ,QACRC,gBAAiB,gBACjB2B,MAAO,QACPC,OAAQ,cAEV,QAAC,IAAD,CAAgBH,QAAQ,qBAExB,oBAAK,gBAAMC,WAAW,MAClB,UAAa,gBADZ,+7CA4DTF,EAAWK,gBAAiB","sources":["webpack://dockview-docs/./src/components/simpleDockview.tsx","webpack://dockview-docs/./src/components/simpleGridview.tsx","webpack://dockview-docs/./src/components/simplePaneview.tsx","webpack://dockview-docs/./src/components/simpleSplitview.tsx","webpack://dockview-docs/./versioned_docs/version-1.4.3/index.mdx"],"sourcesContent":["import {\n    DockviewReact,\n    DockviewReadyEvent,\n    IDockviewPanelProps,\n    PanelApi,\n} from 'dockview';\nimport * as React from 'react';\n\nconst components = {\n    default: (props: IDockviewPanelProps<{ title: string }>) => {\n        return <div style={{ padding: '20px' }}>{props.params.title}</div>;\n    },\n};\n\nconst RenderWhenVisible = <T,>(\n    props: T & {\n        children: React.FunctionComponent<T>;\n        api: Pick<PanelApi, 'isVisible' | 'onDidVisibilityChange'>;\n    }\n) => {\n    const [visible, setVisible] = React.useState<boolean>(props.api.isVisible);\n\n    React.useEffect(() => {\n        const disposable = props.api.onDidVisibilityChange((event) =>\n            setVisible(event.isVisible)\n        );\n\n        return () => {\n            disposable.dispose();\n        };\n    }, [props.api]);\n\n    if (!visible) {\n        return null;\n    }\n\n    return React.createElement(props.children, props);\n};\n\nexport const SimpleDockview = () => {\n    const onReady = (event: DockviewReadyEvent) => {\n        const panel = event.api.addPanel({\n            id: 'panel_1',\n            component: 'default',\n            params: {\n                title: 'Panel 1',\n            },\n        });\n\n        panel.group.locked = true;\n        panel.group.header.hidden = true;\n\n        event.api.addPanel({\n            id: 'panel_2',\n            component: 'default',\n            params: {\n                title: 'Panel 2',\n            },\n        });\n\n        event.api.addPanel({\n            id: 'panel_3',\n            component: 'default',\n            params: {\n                title: 'Panel 3',\n            },\n        });\n\n        event.api.addPanel({\n            id: 'panel_4',\n            component: 'default',\n            params: {\n                title: 'Panel 4',\n            },\n            position: { referencePanel: 'panel_1', direction: 'right' },\n        });\n\n        const panel5 = event.api.addPanel({\n            id: 'panel_5',\n            component: 'default',\n            params: {\n                title: 'Panel 5',\n            },\n            position: { referencePanel: 'panel_3', direction: 'right' },\n        });\n\n        // panel5.group!.model.header.hidden = true;\n        // panel5.group!.model.locked = true;\n\n        event.api.addPanel({\n            id: 'panel_6',\n            component: 'default',\n            params: {\n                title: 'Panel 6',\n            },\n            position: { referencePanel: 'panel_5', direction: 'below' },\n        });\n\n        event.api.addPanel({\n            id: 'panel_7',\n            component: 'default',\n            params: {\n                title: 'Panel 7',\n            },\n            position: { referencePanel: 'panel_6', direction: 'right' },\n        });\n    };\n\n    return (\n        <DockviewReact\n            components={components}\n            onReady={onReady}\n            className=\"dockview-theme-dark\"\n        />\n    );\n};\n","import {\n    IGridviewPanelProps,\n    Orientation,\n    GridviewReact,\n    GridviewReadyEvent,\n} from 'dockview';\nimport * as React from 'react';\n\nconst components = {\n    default: (props: IGridviewPanelProps<{ title: string }>) => {\n        return <div style={{ padding: '20px' }}>{props.params.title}</div>;\n    },\n};\n\nexport const SimpleGridview = () => {\n    const onReady = (event: GridviewReadyEvent) => {\n        event.api.addPanel({\n            id: 'panel_1',\n            component: 'default',\n            params: {\n                title: 'Panel 1',\n            },\n        });\n\n        event.api.addPanel({\n            id: 'panel_2',\n            component: 'default',\n            params: {\n                title: 'Panel 2',\n            },\n        });\n\n        event.api.addPanel({\n            id: 'panel_3',\n            component: 'default',\n            params: {\n                title: 'Panel 3',\n            },\n        });\n\n        event.api.addPanel({\n            id: 'panel_4',\n            component: 'default',\n            params: {\n                title: 'Panel 4',\n            },\n            position: { referencePanel: 'panel_1', direction: 'right' },\n        });\n\n        event.api.addPanel({\n            id: 'panel_5',\n            component: 'default',\n            params: {\n                title: 'Panel 5',\n            },\n            position: { referencePanel: 'panel_3', direction: 'right' },\n        });\n\n        event.api.addPanel({\n            id: 'panel_6',\n            component: 'default',\n            params: {\n                title: 'Panel 6',\n            },\n            position: { referencePanel: 'panel_5', direction: 'below' },\n            minimumWidth: 10,\n        });\n\n        event.api.addPanel({\n            id: 'panel_7',\n            component: 'default',\n            params: {\n                title: 'Panel 7',\n            },\n            position: { referencePanel: 'panel_6', direction: 'right' },\n            minimumWidth: 10,\n        });\n\n        event.api.addPanel({\n            id: 'panel_8',\n            component: 'default',\n            params: {\n                title: 'Panel 8',\n            },\n            position: { referencePanel: 'panel_6', direction: 'right' },\n            minimumWidth: 10,\n        });\n    };\n\n    return (\n        <GridviewReact\n            components={components}\n            onReady={onReady}\n            proportionalLayout={false}\n            orientation={Orientation.VERTICAL}\n            className=\"dockview-theme-dark\"\n        />\n    );\n};\n","import {\n    IPaneviewPanelProps,\n    PaneviewReact,\n    PaneviewReadyEvent,\n} from 'dockview';\nimport * as React from 'react';\n\nconst components = {\n    default: (props: IPaneviewPanelProps<{ title: string }>) => {\n        return (\n            <div\n                style={{\n                    padding: '10px',\n                    height: '100%',\n                    backgroundColor: 'rgb(60,60,60)',\n                }}\n            >\n                {props.params.title}\n            </div>\n        );\n    },\n};\n\nconst MyHeaderComponent = (props: IPaneviewPanelProps<{ title: string }>) => {\n    const [expanded, setExpanded] = React.useState<boolean>(\n        props.api.isExpanded\n    );\n\n    React.useEffect(() => {\n        const disposable = props.api.onDidExpansionChange((event) => {\n            setExpanded(event.isExpanded);\n        });\n\n        return () => {\n            disposable.dispose();\n        };\n    }, []);\n\n    const onClick = () => {\n        props.api.setExpanded(!expanded);\n    };\n\n    return (\n        <div\n            style={{\n                padding: '10px',\n                height: '100%',\n                backgroundColor: 'rgb(60,60,60)',\n            }}\n        >\n            <a\n                onClick={onClick}\n                className={expanded ? 'expanded' : 'collapsed'}\n            />\n            <span>{props.params.title}</span>\n        </div>\n    );\n};\n\nconst headerComponents = {\n    myHeaderComponent: MyHeaderComponent,\n};\n\nexport const SimplePaneview = () => {\n    const onReady = (event: PaneviewReadyEvent) => {\n        event.api.addPanel({\n            id: 'panel_1',\n            component: 'default',\n            params: {\n                title: 'Panel 1',\n            },\n            title: 'Panel 1',\n        });\n\n        event.api.addPanel({\n            id: 'panel_2',\n            component: 'default',\n            params: {\n                title: 'Panel 2',\n            },\n            title: 'Panel 2',\n        });\n\n        event.api.addPanel({\n            id: 'panel_3',\n            component: 'default',\n            params: {\n                title: 'Panel 3',\n            },\n            title: 'Panel 3',\n        });\n    };\n\n    return (\n        <PaneviewReact\n            components={components}\n            headerComponents={headerComponents}\n            onReady={onReady}\n            className=\"dockview-theme-dark\"\n        />\n    );\n};\n","import {\n    ISplitviewPanelProps,\n    Orientation,\n    SplitviewReact,\n    SplitviewReadyEvent,\n} from 'dockview';\nimport * as React from 'react';\n\nconst components = {\n    default: (props: ISplitviewPanelProps<{ title: string }>) => {\n        return <div style={{ padding: '20px' }}>{props.params.title}</div>;\n    },\n};\n\nexport const SimpleSplitview = (props: { proportional?: boolean }) => {\n    const onReady = (event: SplitviewReadyEvent) => {\n        event.api.addPanel({\n            id: 'panel_1',\n            component: 'default',\n            params: {\n                title: 'Panel 1',\n            },\n            minimumSize: 100,\n        });\n\n        event.api.addPanel({\n            id: 'panel_2',\n            component: 'default',\n            params: {\n                title: 'Panel 2',\n            },\n            minimumSize: 100,\n        });\n\n        event.api.addPanel({\n            id: 'panel_3',\n            component: 'default',\n            params: {\n                title: 'Panel 3',\n            },\n            minimumSize: 100,\n        });\n    };\n\n    return (\n        <SplitviewReact\n            components={components}\n            proportionalLayout={props.proportional}\n            onReady={onReady}\n            orientation={Orientation.HORIZONTAL}\n            className=\"dockview-theme-dark\"\n        />\n    );\n};\n","\n\n/* @jsxRuntime classic */\n/* @jsx mdx */\n/* @jsxFrag mdx.Fragment */\n\nimport React from 'react';\nimport { mdx } from '@mdx-js/react';\n\n\nexport const frontMatter = {\n\tsidebar_position: 0\n};\nexport const contentTitle = 'Introduction';\nexport const metadata = {\n  \"unversionedId\": \"index\",\n  \"id\": \"version-1.4.3/index\",\n  \"title\": \"Introduction\",\n  \"description\": \"dockview is a zero dependency layout manager that supports tab, grids and splitviews.\",\n  \"source\": \"@site/versioned_docs/version-1.4.3/index.mdx\",\n  \"sourceDirName\": \".\",\n  \"slug\": \"/\",\n  \"permalink\": \"/docs/\",\n  \"draft\": false,\n  \"editUrl\": \"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/versioned_docs/version-1.4.3/index.mdx\",\n  \"tags\": [],\n  \"version\": \"1.4.3\",\n  \"sidebarPosition\": 0,\n  \"frontMatter\": {\n    \"sidebar_position\": 0\n  },\n  \"sidebar\": \"tutorialSidebar\",\n  \"next\": {\n    \"title\": \"Basics\",\n    \"permalink\": \"/docs/basics\"\n  }\n};\nexport const assets = {\n\n};\n\nimport { SimpleSplitview } from '@site/src/components/simpleSplitview';\nimport { SimpleGridview } from '@site/src/components/simpleGridview';\nimport { SimplePaneview } from '@site/src/components/simplePaneview';\nimport { SimpleDockview } from '@site/src/components/simpleDockview';\nexport const toc = [{\n  value: 'Features',\n  id: 'features',\n  level: 2\n}, {\n  value: 'Quick start',\n  id: 'quick-start',\n  level: 2\n}];\n\nconst layoutProps = {\n  toc\n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"introduction\"\n    }}>{`Introduction`}</h1>\n    <p><strong parentName=\"p\">{`dockview`}</strong>{` is a zero dependency layout manager that supports tab, grids and splitviews.`}</p>\n    <h2 {...{\n      \"id\": \"features\"\n    }}>{`Features`}</h2>\n    <ul>\n      <li parentName=\"ul\">{`Themable and customizable`}</li>\n      <li parentName=\"ul\">{`Support for the serialization and deserialization of layouts`}</li>\n      <li parentName=\"ul\">{`Drag and drop support`}</li>\n    </ul>\n    <h2 {...{\n      \"id\": \"quick-start\"\n    }}>{`Quick start`}</h2>\n    <p><inlineCode parentName=\"p\">{`dockview`}</inlineCode>{` has a peer dependency on `}<inlineCode parentName=\"p\">{`react >= 16.8.0`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`react-dom >= 16.8.0`}</inlineCode>{`. To install `}<inlineCode parentName=\"p\">{`dockview`}</inlineCode>{` you can run:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-shell\"\n      }}>{`npm install dockview\n`}</code></pre>\n    <p>{`You must also import the dockview stylesheet found under `}<a parentName=\"p\" {...{\n        \"href\": \"https://unpkg.com/browse/dockview@latest/dist/styles/dockview.css\"\n      }}><inlineCode parentName=\"a\">{`dockview/dict/styles/dockview.css`}</inlineCode></a>{`,\ndepending on your solution this might be:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-css\"\n      }}>{`@import './node_modules/dockview/dist/styles/dockview.css';\n`}</code></pre>\n    <p>{`A dark and light theme are provided, one of these classes (or a custom theme) must be attached at any point above your components in the HTML tree. To cover the entire web page you might attach the class to the `}<inlineCode parentName=\"p\">{`body`}</inlineCode>{` component:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-html\"\n      }}>{`<body classname=\"dockview-theme-dark\">\n    ...\n</body>\n<body classname=\"dockview-theme-light\">\n    ...\n</body>\n`}</code></pre>\n    <p>{`There are 4 components you may want to use:`}</p>\n    <p>{`Splitview`}</p>\n    <div style={{\n      height: '100px',\n      backgroundColor: 'rgb(30,30,30)',\n      color: 'white',\n      margin: '20px 0px'\n    }}>\n    <SimpleSplitview mdxType=\"SimpleSplitview\" />\n    </div>\n    <div style={{\n      height: '300px',\n      backgroundColor: 'rgb(30,30,30)',\n      color: 'white',\n      margin: '20px 0px'\n    }}>\n    <SimpleGridview mdxType=\"SimpleGridview\" />\n    </div>\n    <div style={{\n      height: '300px',\n      backgroundColor: 'rgb(30,30,30)',\n      color: 'white',\n      margin: '20px 0px'\n    }}>\n    <SimplePaneview mdxType=\"SimplePaneview\" />\n    </div>\n    <div style={{\n      height: '300px',\n      backgroundColor: 'rgb(30,30,30)',\n      color: 'white',\n      margin: '20px 0px'\n    }}>\n    <SimpleDockview mdxType=\"SimpleDockview\" />\n    </div>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`import {\n    DockviewReact,\n    DockviewReadyEvent,\n    PanelCollection,\n    IDockviewPanelProps,\n    IDockviewPanelHeaderProps,\n} from 'dockview';\n\nconst components: PanelCollection<IDockviewPanelProps> = {\n    default: (props: IDockviewPanelProps<{ someProps: string }>) => {\n        return <div>{props.params.someProps}</div>;\n    },\n};\n\nconst headers: PanelCollection<IDockviewPanelHeaderProps> = {\n    customTab: (props: IDockviewPanelHeaderProps) => {\n        return (\n            <div>\n                <span>{props.api.title}</span>\n                <span onClick={() => props.api.close()}>{'[x]'}</span>\n            </div>\n        );\n    },\n};\n\nconst Component = () => {\n    const onReady = (event: DockviewReadyEvent) => {\n        event.api.addPanel({\n            id: 'panel1',\n            component: 'default',\n            tabComponent: 'customTab', // optional custom header\n            params: {\n                someProps: 'Hello',\n            },\n        });\n        event.api.addPanel({\n            id: 'panel2',\n            component: 'default',\n            params: {\n                someProps: 'World',\n            },\n            position: { referencePanel: 'panel1', direction: 'below' },\n        });\n    };\n\n    return (\n        <DockviewReact\n            components={components}\n            tabComponents={headers} // optional headers renderer\n            onReady={onReady}\n        />\n    );\n};\n`}</code></pre>\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;\n"],"names":["components","default","props","style","padding","params","title","SimpleDockview","onReady","event","panel","api","addPanel","id","component","group","locked","header","hidden","position","referencePanel","direction","className","SimpleGridview","minimumWidth","proportionalLayout","orientation","Orientation","height","backgroundColor","headerComponents","myHeaderComponent","React","isExpanded","expanded","setExpanded","disposable","onDidExpansionChange","dispose","onClick","SimplePaneview","SimpleSplitview","proportional","minimumSize","frontMatter","sidebar_position","contentTitle","metadata","assets","toc","value","level","layoutProps","MDXContent","mdxType","parentName","color","margin","isMDXComponent"],"sourceRoot":""}