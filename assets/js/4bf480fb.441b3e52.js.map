{"version":3,"file":"assets/js/4bf480fb.441b3e52.js","mappings":"6IAGA,MAkBaA,EAAWC,IACpB,MAAMC,EAAMC,EAAAA,SAaZ,OAXAA,EAAAA,iBAAsB,KACbD,EAAIE,UAITF,EAAIE,QAAQC,UAAYC,KAAKC,IACzB,EACAL,EAAIE,QAAQI,aAAeN,EAAIE,QAAQK,cAC1C,GACF,CAACR,EAAMS,QAGNP,EAAAA,cAAA,OAAKD,IAAKA,EAAKS,UAAU,qBACpBV,EAAMS,MAAME,KAAI,CAACC,EAAMC,IAEhBX,EAAAA,cAAA,OAAKY,IAAKD,EAAGH,UAAU,gBACnBR,EAAAA,cAAA,QAAMQ,UAAU,0BArCpBK,KAChB,MAAMC,EAAOC,GAAeA,EAAI,GAAM,IAAGA,IAAO,GAAEA,IAElD,MAAQ,GAAED,EAAID,EAAIG,eAAeF,EAAID,EAAII,iBAAiBH,EACtDD,EAAIK,iBACHL,EAAIM,mBAAmB,EAiCHC,CAAWV,EAAKW,YAErBrB,EAAAA,cAAA,QAAMQ,UAAU,oBAAoBc,MAAOZ,EAAKa,KAC3Cb,EAAKc,SAKpB,C,0DC1Cd,MAAMC,EAAa,CACfC,QAAU5B,GAEFE,EAAAA,cAAA,OACIsB,MAAO,CACHK,QAAS,OACTC,OAAQ,OACRC,gBAAiB,kBAGpB/B,EAAMgC,OAAOC,QAyCxBC,EAAmB,CACrBC,kBApCuBnC,IACvB,MAAOoC,EAAUC,GAAenC,EAAAA,SAC5BF,EAAMsC,IAAIC,YAGdrC,EAAAA,WAAgB,KACZ,MAAMsC,EAAaxC,EAAMsC,IAAIG,sBAAsBC,IAC/CL,EAAYK,EAAMH,WAAW,IAGjC,MAAO,KACHC,EAAWG,SAAS,CACvB,GACF,IAMH,OACIzC,EAAAA,cAAA,OACIsB,MAAO,CACHK,QAAS,UACTC,OAAQ,OACRC,gBAAiB,kBAGrB7B,EAAAA,cAAA,YAAQ,qBAAoBF,EAAMiC,SAClC/B,EAAAA,cAAA,UAAQ0C,QAbAA,KACZ5C,EAAMsC,IAAID,aAAaD,EAAS,GAavBA,EAAW,WAAa,UAE3B,GAQDS,EAAuBA,IAkC5B3C,EAAAA,cAAC4C,EAAAA,GAAa,CACVnB,WAAYA,EACZO,iBAAkBA,EAClBa,QApCSL,IACbA,EAAMJ,IAAIU,SAAS,CACfC,GAAI,UACJC,UAAW,UACXC,gBAAiB,oBACjBnB,OAAQ,CACJC,MAAO,WAEXA,MAAO,YAGXS,EAAMJ,IAAIU,SAAS,CACfC,GAAI,UACJC,UAAW,UACXC,gBAAiB,oBACjBnB,OAAQ,CACJC,MAAO,WAEXA,MAAO,YAGXS,EAAMJ,IAAIU,SAAS,CACfC,GAAI,UACJC,UAAW,UACXC,gBAAiB,oBACjBnB,OAAQ,CACJC,MAAO,WAEXA,MAAO,WACT,EAQEvB,UAAU,wB,0DC5FtB,MAAMiB,EAAa,CACfC,QAAU5B,GAEFE,EAAAA,cAAA,OACIsB,MAAO,CACHK,QAAS,OACTC,OAAQ,OACRC,gBAAiB,kBAGpB/B,EAAMgC,OAAOC,QAMjBmB,EAAsBA,IA6C3BlD,EAAAA,cAAA,WACIA,EAAAA,cAAA,WACIA,EAAAA,cAAA,OACIsB,MAAO,CACHO,gBAAiB,SACjBF,QAAS,UACTwB,aAAc,MACdC,MAAO,QACPC,OAAQ,WAEZC,WAAW,GACd,YAILtD,EAAAA,cAAA,OACIsB,MAAO,CACHM,OAAQ,QACRC,gBAAiB,gBACjB0B,MAAO,QACPC,OAAQ,aAGZxD,EAAAA,cAAC4C,EAAAA,GAAa,CACVnB,WAAYA,EACZoB,QArECL,IACbA,EAAMJ,IAAIU,SAAS,CACfC,GAAI,UACJC,UAAW,UACXlB,OAAQ,CACJC,MAAO,WAEXA,MAAO,YAGXS,EAAMJ,IAAIU,SAAS,CACfC,GAAI,UACJC,UAAW,UACXlB,OAAQ,CACJC,MAAO,WAEXA,MAAO,YAGXS,EAAMJ,IAAIU,SAAS,CACfC,GAAI,UACJC,UAAW,UACXlB,OAAQ,CACJC,MAAO,WAEXA,MAAO,WACT,EA4CU0B,UAzCGjB,IACf,MAAMkB,EAAQlB,EAAMJ,IAAIuB,OAAOC,QAAQpB,EAAMqB,OAE7CrB,EAAMJ,IAAIU,SAAS,CACfC,GAAI,UACJC,UAAW,UACXlB,OAAQ,CACJC,MAAO,WAEXA,MAAO,UACP2B,SACF,EA+BUlD,UAAU,0B,oECrF9B,MAAMiB,EAAa,CACfC,QAAU5B,GAEFE,EAAAA,cAAA,OACIsB,MAAO,CACHK,QAAS,OACTC,OAAQ,OACRC,gBAAiB,kBAGpB/B,EAAMgC,OAAOC,QAMjB+B,EAAqBA,KAC9B,MAAOC,EAASC,GAAchE,EAAAA,UAAwB,IAC/CO,EAAO0D,GAAYjE,EAAAA,SAAuB,IAE3C6C,EAAWL,IACbA,EAAMJ,IAAIU,SAAS,CACfC,GAAI,UACJC,UAAW,UACXlB,OAAQ,CACJC,MAAO,WAEXA,MAAO,YAGXS,EAAMJ,IAAIU,SAAS,CACfC,GAAI,UACJC,UAAW,UACXlB,OAAQ,CACJC,MAAO,WAEXA,MAAO,YAGXS,EAAMJ,IAAIU,SAAS,CACfC,GAAI,UACJC,UAAW,UACXlB,OAAQ,CACJC,MAAO,WAEXA,MAAO,WACT,EAGAmC,EAAkB1B,GACbuB,EAGLN,EAAajB,IACf,MAAMhB,EAAQ,aAAYgB,EAAM2B,YAAY3B,EAAMqB,MAAMd,KAExDkB,GAAU1D,GAAU,IAAIA,EAAO,CAAEiB,OAAMH,UAAW,IAAI+C,QAAU,EAGpE,OACIpE,EAAAA,cAAA,OACIsB,MAAO,CACHM,OAAQ,QACR4B,OAAQ,WACRa,QAAS,OACTC,cAAe,WAGnBtE,EAAAA,cAAA,OAAKsB,MAAO,CAAEM,OAAQ,SAClB5B,EAAAA,cAAA,aACIA,EAAAA,cAAA,YAAM,0BACNA,EAAAA,cAAA,SACIuE,KAAM,WACNR,QAASA,EACTS,SAAWC,IACPT,EAAWS,EAAEC,OAAOX,QAAQ,MAK5C/D,EAAAA,cAAA,OACIsB,MAAO,CACHM,OAAQ,QACRyC,QAAS,SAGbrE,EAAAA,cAAC4C,EAAAA,GAAa,CACVnB,WAAYA,EACZoB,QAASA,EACTrC,UAAU,6CACV0D,eAAgBA,EAChBT,UAAWA,IAEfzD,EAAAA,cAAC4C,EAAAA,GAAa,CACVnB,WAAYA,EACZoB,QAASA,EACTrC,UAAU,6CACV0D,eAAgBA,EAChBT,UAAWA,KAGnBzD,EAAAA,cAAA,OAAKsB,MAAO,CAAEM,OAAQ,UAClB5B,EAAAA,cAACH,EAAAA,EAAO,CAACU,MAAOA,KAElB,C,0DC5Gd,MAAMkB,EAAa,CACfC,QAAU5B,GAEFE,EAAAA,cAAA,OACIsB,MAAO,CACHK,QAAS,OACTC,OAAQ,OACRC,gBAAiB,kBAGpB/B,EAAMgC,OAAOC,QA0CxBC,EAAmB,CACrBC,kBArCuBnC,IACvB,MAAOoC,EAAUC,GAAenC,EAAAA,SAC5BF,EAAMsC,IAAIC,YAGdrC,EAAAA,WAAgB,KACZ,MAAMsC,EAAaxC,EAAMsC,IAAIG,sBAAsBC,IAC/CL,EAAYK,EAAMH,WAAW,IAGjC,MAAO,KACHC,EAAWG,SAAS,CACvB,GACF,IAMH,OACIzC,EAAAA,cAAA,OACIsB,MAAO,CACHK,QAAS,OACTC,OAAQ,OACRC,gBAAiB,kBAGrB7B,EAAAA,cAAA,KACI0C,QAbIA,KACZ5C,EAAMsC,IAAID,aAAaD,EAAS,EAaxB1B,UAAW0B,EAAW,WAAa,cAEvClC,EAAAA,cAAA,YAAOF,EAAMgC,OAAOC,OAClB,GAQD4C,EAAiBA,IA+BtB3E,EAAAA,cAAC4C,EAAAA,GAAa,CACVnB,WAAYA,EACZO,iBAAkBA,EAClBa,QAjCSL,IACbA,EAAMJ,IAAIU,SAAS,CACfC,GAAI,UACJC,UAAW,UACXlB,OAAQ,CACJC,MAAO,WAEXA,MAAO,YAGXS,EAAMJ,IAAIU,SAAS,CACfC,GAAI,UACJC,UAAW,UACXlB,OAAQ,CACJC,MAAO,WAEXA,MAAO,YAGXS,EAAMJ,IAAIU,SAAS,CACfC,GAAI,UACJC,UAAW,UACXlB,OAAQ,CACJC,MAAO,WAEXA,MAAO,WACT,EAQEvB,UAAU,wB,6MCxFf,MAAMoE,EAAc,CAC1BC,YAAa,0BAEDC,EAAe,WACfC,EAAW,CACtB,cAAiB,sBACjB,GAAM,sBACN,MAAS,WACT,YAAe,yBACf,OAAU,qCACV,cAAiB,aACjB,KAAQ,uBACR,UAAa,iCACb,OAAS,EACT,QAAW,4HACX,KAAQ,GACR,QAAW,UACX,YAAe,CACb,YAAe,0BAEjB,QAAW,kBACX,SAAY,CACV,MAAS,WACT,UAAa,kCAEf,KAAQ,CACN,MAAS,YACT,UAAa,oCAGJC,EAAS,CAEtB,EAOaC,EAAM,CAAC,CAClBC,MAAO,0BACPnC,GAAI,0BACJoC,MAAO,GACN,CACDD,MAAO,eACPnC,GAAI,eACJoC,MAAO,GACN,CACDD,MAAO,qBACPnC,GAAI,qBACJoC,MAAO,GACN,CACDD,MAAO,oBACPnC,GAAI,oBACJoC,MAAO,GACN,CACDD,MAAO,gBACPnC,GAAI,gBACJoC,MAAO,GACN,CACDD,MAAO,gBACPnC,GAAI,gBACJoC,MAAO,GACN,CACDD,MAAO,eACPnC,GAAI,eACJoC,MAAO,IAGHC,EAAc,CAClBH,OAEII,EAAY,UACH,SAASC,EAAUC,GAG9B,IAH+B,WACjC9D,KACG3B,GACJyF,EACC,OAAOC,EAAAA,EAAAA,IAACH,GAASI,EAAAA,EAAAA,GAAA,GAAKL,EAAiBtF,EAAK,CAAE2B,WAAYA,EAAYiE,QAAQ,eAG5EF,EAAAA,EAAAA,IAAA,MACE,GAAM,YACH,aACLA,EAAAA,EAAAA,IAAA,SAAK,yMAELA,EAAAA,EAAAA,IAAA,cACE,KAAQ,SACPA,EAAAA,EAAAA,IAAA,KAAGG,WAAW,cAAe,mFAChCH,EAAAA,EAAAA,IAAA,YACAA,EAAAA,EAAAA,IAAA,MACE,GAAM,gBACH,iBACLA,EAAAA,EAAAA,IAAA,OAAKlE,MAAO,CACVM,OAAQ,QACRC,gBAAiB,gBACjB0B,MAAO,QACPC,OAAQ,cAEVgC,EAAAA,EAAAA,IAACb,EAAAA,EAAc,CAACe,QAAQ,qBAExBF,EAAAA,EAAAA,IAAA,YAAKA,EAAAA,EAAAA,IAAA,QAAMG,WAAW,MAClB,UAAa,eACb,WAAc,kCACd,MAAS,UACT,UAAY,EACZ,YAAa,GACV,u7CA8DPH,EAAAA,EAAAA,IAAA,MACE,GAAM,2BACH,4BACLA,EAAAA,EAAAA,IAAA,SAAK,qDAAmDA,EAAAA,EAAAA,IAAA,cAAYG,WAAW,KAAM,iBAA8B,gBACnHH,EAAAA,EAAAA,IAAA,YAAKA,EAAAA,EAAAA,IAAA,QAAMG,WAAW,MAClB,UAAa,gBACV,iDAEPH,EAAAA,EAAAA,IAAA,cACEA,EAAAA,EAAAA,IAAA,SAAOG,WAAW,UAChBH,EAAAA,EAAAA,IAAA,MAAIG,WAAW,UACbH,EAAAA,EAAAA,IAAA,MAAIG,WAAW,KACb,MAAS,MACN,aACLH,EAAAA,EAAAA,IAAA,MAAIG,WAAW,KACb,MAAS,MACN,SACLH,EAAAA,EAAAA,IAAA,MAAIG,WAAW,KACb,MAAS,MACN,aACLH,EAAAA,EAAAA,IAAA,MAAIG,WAAW,KACb,MAAS,MACN,YACLH,EAAAA,EAAAA,IAAA,MAAIG,WAAW,KACb,MAAS,MACN,kBAGTH,EAAAA,EAAAA,IAAA,SAAOG,WAAW,UAChBH,EAAAA,EAAAA,IAAA,MAAIG,WAAW,UACbH,EAAAA,EAAAA,IAAA,MAAIG,WAAW,KACb,MAAS,MACN,YACLH,EAAAA,EAAAA,IAAA,MAAIG,WAAW,KACb,MAAS,MACN,yCACLH,EAAAA,EAAAA,IAAA,MAAIG,WAAW,KACb,MAAS,MACN,OACLH,EAAAA,EAAAA,IAAA,MAAIG,WAAW,KACb,MAAS,QAEXH,EAAAA,EAAAA,IAAA,MAAIG,WAAW,KACb,MAAS,SAGbH,EAAAA,EAAAA,IAAA,MAAIG,WAAW,UACbH,EAAAA,EAAAA,IAAA,MAAIG,WAAW,KACb,MAAS,MACN,eACLH,EAAAA,EAAAA,IAAA,MAAIG,WAAW,KACb,MAAS,MACN,WACLH,EAAAA,EAAAA,IAAA,MAAIG,WAAW,KACb,MAAS,MACN,OACLH,EAAAA,EAAAA,IAAA,MAAIG,WAAW,KACb,MAAS,QAEXH,EAAAA,EAAAA,IAAA,MAAIG,WAAW,KACb,MAAS,SAGbH,EAAAA,EAAAA,IAAA,MAAIG,WAAW,UACbH,EAAAA,EAAAA,IAAA,MAAIG,WAAW,KACb,MAAS,MACN,qBACLH,EAAAA,EAAAA,IAAA,MAAIG,WAAW,KACb,MAAS,MACN,WACLH,EAAAA,EAAAA,IAAA,MAAIG,WAAW,KACb,MAAS,MACN,QACLH,EAAAA,EAAAA,IAAA,MAAIG,WAAW,KACb,MAAS,QAEXH,EAAAA,EAAAA,IAAA,MAAIG,WAAW,KACb,MAAS,SAGbH,EAAAA,EAAAA,IAAA,MAAIG,WAAW,UACbH,EAAAA,EAAAA,IAAA,MAAIG,WAAW,KACb,MAAS,MACN,cACLH,EAAAA,EAAAA,IAAA,MAAIG,WAAW,KACb,MAAS,MACN,WACLH,EAAAA,EAAAA,IAAA,MAAIG,WAAW,KACb,MAAS,MACN,QACLH,EAAAA,EAAAA,IAAA,MAAIG,WAAW,KACb,MAAS,MACN,OACLH,EAAAA,EAAAA,IAAA,MAAIG,WAAW,KACb,MAAS,SAGbH,EAAAA,EAAAA,IAAA,MAAIG,WAAW,UACbH,EAAAA,EAAAA,IAAA,MAAIG,WAAW,KACb,MAAS,MACN,wBACLH,EAAAA,EAAAA,IAAA,MAAIG,WAAW,KACb,MAAS,MACN,YACLH,EAAAA,EAAAA,IAAA,MAAIG,WAAW,KACb,MAAS,MACN,QACLH,EAAAA,EAAAA,IAAA,MAAIG,WAAW,KACb,MAAS,MACN,UACLH,EAAAA,EAAAA,IAAA,MAAIG,WAAW,KACb,MAAS,OACRH,EAAAA,EAAAA,IAACI,EAAAA,EAAI,CAACC,GAAG,2BAA2BH,QAAQ,QAAS,oBAE1DF,EAAAA,EAAAA,IAAA,MAAIG,WAAW,UACbH,EAAAA,EAAAA,IAAA,MAAIG,WAAW,KACb,MAAS,MACN,eACLH,EAAAA,EAAAA,IAAA,MAAIG,WAAW,KACb,MAAS,MACN,YACLH,EAAAA,EAAAA,IAAA,MAAIG,WAAW,KACb,MAAS,MACN,QACLH,EAAAA,EAAAA,IAAA,MAAIG,WAAW,KACb,MAAS,MACN,UACLH,EAAAA,EAAAA,IAAA,MAAIG,WAAW,KACb,MAAS,SAGbH,EAAAA,EAAAA,IAAA,MAAIG,WAAW,UACbH,EAAAA,EAAAA,IAAA,MAAIG,WAAW,KACb,MAAS,MACN,cACLH,EAAAA,EAAAA,IAAA,MAAIG,WAAW,KACb,MAAS,MACN,UACLH,EAAAA,EAAAA,IAAA,MAAIG,WAAW,KACb,MAAS,MACN,QACLH,EAAAA,EAAAA,IAAA,MAAIG,WAAW,KACb,MAAS,QAEXH,EAAAA,EAAAA,IAAA,MAAIG,WAAW,KACb,MAAS,WAKjBH,EAAAA,EAAAA,IAAA,MACE,GAAM,gBACH,iBACLA,EAAAA,EAAAA,IAAA,SAAK,4CAA0CA,EAAAA,EAAAA,IAAA,cAAYG,WAAW,KAAM,WAAwB,qCAAmCH,EAAAA,EAAAA,IAAA,cAAYG,WAAW,KAAM,sBAAmC,uGAEvMH,EAAAA,EAAAA,IAAA,YAAKA,EAAAA,EAAAA,IAAA,QAAMG,WAAW,MAClB,UAAa,eACb,WAAc,2CACd,MAAS,YACT,KAAO,EACP,KAAO,EACP,OAAS,EACT,cAAe,GACZ,oMAMPH,EAAAA,EAAAA,IAAA,YAAKA,EAAAA,EAAAA,IAAA,QAAMG,WAAW,MAClB,UAAa,eACb,WAAc,gDACd,MAAS,YACT,KAAO,EACP,KAAO,EACP,KAAO,EACP,SAAW,EACX,aAAc,GACX,iFAIPH,EAAAA,EAAAA,IAAA,cACEA,EAAAA,EAAAA,IAAA,SAAOG,WAAW,UAChBH,EAAAA,EAAAA,IAAA,MAAIG,WAAW,UACbH,EAAAA,EAAAA,IAAA,MAAIG,WAAW,KACb,MAAS,MACN,aACLH,EAAAA,EAAAA,IAAA,MAAIG,WAAW,KACb,MAAS,MACN,SACLH,EAAAA,EAAAA,IAAA,MAAIG,WAAW,KACb,MAAS,MACN,kBAGTH,EAAAA,EAAAA,IAAA,SAAOG,WAAW,UAChBH,EAAAA,EAAAA,IAAA,MAAIG,WAAW,UACbH,EAAAA,EAAAA,IAAA,MAAIG,WAAW,KACb,MAAS,MACN,WACLH,EAAAA,EAAAA,IAAA,MAAIG,WAAW,KACb,MAAS,OACRH,EAAAA,EAAAA,IAAA,cAAYG,WAAW,MAAO,YACjCH,EAAAA,EAAAA,IAAA,MAAIG,WAAW,KACb,MAAS,MACN,4BAEPH,EAAAA,EAAAA,IAAA,MAAIG,WAAW,UACbH,EAAAA,EAAAA,IAAA,MAAIG,WAAW,KACb,MAAS,MACN,UACLH,EAAAA,EAAAA,IAAA,MAAIG,WAAW,KACb,MAAS,OACRH,EAAAA,EAAAA,IAAA,cAAYG,WAAW,MAAO,YACjCH,EAAAA,EAAAA,IAAA,MAAIG,WAAW,KACb,MAAS,MACN,2BAEPH,EAAAA,EAAAA,IAAA,MAAIG,WAAW,UACbH,EAAAA,EAAAA,IAAA,MAAIG,WAAW,KACb,MAAS,MACN,gBACLH,EAAAA,EAAAA,IAAA,MAAIG,WAAW,KACb,MAAS,OACRH,EAAAA,EAAAA,IAAA,cAAYG,WAAW,MAAO,YACjCH,EAAAA,EAAAA,IAAA,MAAIG,WAAW,KACb,MAAS,MACN,mBAAiBH,EAAAA,EAAAA,IAAA,cAAYG,WAAW,MAAO,eAA4B,8BAElFH,EAAAA,EAAAA,IAAA,MAAIG,WAAW,UACbH,EAAAA,EAAAA,IAAA,MAAIG,WAAW,KACb,MAAS,MACN,gBACLH,EAAAA,EAAAA,IAAA,MAAIG,WAAW,KACb,MAAS,OACRH,EAAAA,EAAAA,IAAA,cAAYG,WAAW,MAAO,YACjCH,EAAAA,EAAAA,IAAA,MAAIG,WAAW,KACb,MAAS,MACN,mBAAiBH,EAAAA,EAAAA,IAAA,cAAYG,WAAW,MAAO,eAA4B,8BAElFH,EAAAA,EAAAA,IAAA,MAAIG,WAAW,UACbH,EAAAA,EAAAA,IAAA,MAAIG,WAAW,KACb,MAAS,MACN,WACLH,EAAAA,EAAAA,IAAA,MAAIG,WAAW,KACb,MAAS,OACRH,EAAAA,EAAAA,IAAA,cAAYG,WAAW,MAAO,YACjCH,EAAAA,EAAAA,IAAA,MAAIG,WAAW,KACb,MAAS,MACN,sBAEPH,EAAAA,EAAAA,IAAA,MAAIG,WAAW,UACbH,EAAAA,EAAAA,IAAA,MAAIG,WAAW,KACb,MAAS,MACN,WACLH,EAAAA,EAAAA,IAAA,MAAIG,WAAW,KACb,MAAS,OACRH,EAAAA,EAAAA,IAAA,cAAYG,WAAW,MAAO,sBACjCH,EAAAA,EAAAA,IAAA,MAAIG,WAAW,KACb,MAAS,MACN,gBAEPH,EAAAA,EAAAA,IAAA,MAAIG,WAAW,UACbH,EAAAA,EAAAA,IAAA,MAAIG,WAAW,KACb,MAAS,QAEXH,EAAAA,EAAAA,IAAA,MAAIG,WAAW,KACb,MAAS,QAEXH,EAAAA,EAAAA,IAAA,MAAIG,WAAW,KACb,MAAS,SAGbH,EAAAA,EAAAA,IAAA,MAAIG,WAAW,UACbH,EAAAA,EAAAA,IAAA,MAAIG,WAAW,KACb,MAAS,MACN,sBACLH,EAAAA,EAAAA,IAAA,MAAIG,WAAW,KACb,MAAS,OACRH,EAAAA,EAAAA,IAAA,cAAYG,WAAW,MAAO,iBACjCH,EAAAA,EAAAA,IAAA,MAAIG,WAAW,KACb,MAAS,MACN,4BAEPH,EAAAA,EAAAA,IAAA,MAAIG,WAAW,UACbH,EAAAA,EAAAA,IAAA,MAAIG,WAAW,KACb,MAAS,MACN,wBACLH,EAAAA,EAAAA,IAAA,MAAIG,WAAW,KACb,MAAS,OACRH,EAAAA,EAAAA,IAAA,cAAYG,WAAW,MAAO,iBACjCH,EAAAA,EAAAA,IAAA,MAAIG,WAAW,KACb,MAAS,MACN,sEAEPH,EAAAA,EAAAA,IAAA,MAAIG,WAAW,UACbH,EAAAA,EAAAA,IAAA,MAAIG,WAAW,KACb,MAAS,MACN,iBACLH,EAAAA,EAAAA,IAAA,MAAIG,WAAW,KACb,MAAS,OACRH,EAAAA,EAAAA,IAAA,cAAYG,WAAW,MAAO,2BACjCH,EAAAA,EAAAA,IAAA,MAAIG,WAAW,KACb,MAAS,MACN,gCAEPH,EAAAA,EAAAA,IAAA,MAAIG,WAAW,UACbH,EAAAA,EAAAA,IAAA,MAAIG,WAAW,KACb,MAAS,MACN,oBACLH,EAAAA,EAAAA,IAAA,MAAIG,WAAW,KACb,MAAS,OACRH,EAAAA,EAAAA,IAAA,cAAYG,WAAW,MAAO,2BACjCH,EAAAA,EAAAA,IAAA,MAAIG,WAAW,KACb,MAAS,MACN,kCAEPH,EAAAA,EAAAA,IAAA,MAAIG,WAAW,UACbH,EAAAA,EAAAA,IAAA,MAAIG,WAAW,KACb,MAAS,MACN,cACLH,EAAAA,EAAAA,IAAA,MAAIG,WAAW,KACb,MAAS,OACRH,EAAAA,EAAAA,IAAA,cAAYG,WAAW,MAAO,6BACjCH,EAAAA,EAAAA,IAAA,MAAIG,WAAW,KACb,MAAS,MACN,yCAAuCH,EAAAA,EAAAA,IAACI,EAAAA,EAAI,CAACC,GAAG,4BAA4BH,QAAQ,QAAS,iBAAwB,OAE5HF,EAAAA,EAAAA,IAAA,MAAIG,WAAW,UACbH,EAAAA,EAAAA,IAAA,MAAIG,WAAW,KACb,MAAS,QAEXH,EAAAA,EAAAA,IAAA,MAAIG,WAAW,KACb,MAAS,QAEXH,EAAAA,EAAAA,IAAA,MAAIG,WAAW,KACb,MAAS,SAGbH,EAAAA,EAAAA,IAAA,MAAIG,WAAW,UACbH,EAAAA,EAAAA,IAAA,MAAIG,WAAW,KACb,MAAS,MACN,aACLH,EAAAA,EAAAA,IAAA,MAAIG,WAAW,KACb,MAAS,OACRH,EAAAA,EAAAA,IAAA,cAAYG,WAAW,MAAO,oEACjCH,EAAAA,EAAAA,IAAA,MAAIG,WAAW,KACb,MAAS,SAGbH,EAAAA,EAAAA,IAAA,MAAIG,WAAW,UACbH,EAAAA,EAAAA,IAAA,MAAIG,WAAW,KACb,MAAS,MACN,gBACLH,EAAAA,EAAAA,IAAA,MAAIG,WAAW,KACb,MAAS,OACRH,EAAAA,EAAAA,IAAA,cAAYG,WAAW,MAAO,mCACjCH,EAAAA,EAAAA,IAAA,MAAIG,WAAW,KACb,MAAS,SAGbH,EAAAA,EAAAA,IAAA,MAAIG,WAAW,UACbH,EAAAA,EAAAA,IAAA,MAAIG,WAAW,KACb,MAAS,MACN,cACLH,EAAAA,EAAAA,IAAA,MAAIG,WAAW,KACb,MAAS,OACRH,EAAAA,EAAAA,IAAA,cAAYG,WAAW,MAAO,sCACjCH,EAAAA,EAAAA,IAAA,MAAIG,WAAW,KACb,MAAS,SAGbH,EAAAA,EAAAA,IAAA,MAAIG,WAAW,UACbH,EAAAA,EAAAA,IAAA,MAAIG,WAAW,KACb,MAAS,MACN,aACLH,EAAAA,EAAAA,IAAA,MAAIG,WAAW,KACb,MAAS,OACRH,EAAAA,EAAAA,IAAA,cAAYG,WAAW,MAAO,+CACjCH,EAAAA,EAAAA,IAAA,MAAIG,WAAW,KACb,MAAS,SAGbH,EAAAA,EAAAA,IAAA,MAAIG,WAAW,UACbH,EAAAA,EAAAA,IAAA,MAAIG,WAAW,KACb,MAAS,QAEXH,EAAAA,EAAAA,IAAA,MAAIG,WAAW,KACb,MAAS,QAEXH,EAAAA,EAAAA,IAAA,MAAIG,WAAW,KACb,MAAS,SAGbH,EAAAA,EAAAA,IAAA,MAAIG,WAAW,UACbH,EAAAA,EAAAA,IAAA,MAAIG,WAAW,KACb,MAAS,MACN,UACLH,EAAAA,EAAAA,IAAA,MAAIG,WAAW,KACb,MAAS,OACRH,EAAAA,EAAAA,IAAA,cAAYG,WAAW,MAAO,cACjCH,EAAAA,EAAAA,IAAA,MAAIG,WAAW,KACb,MAAS,MACN,uCAEPH,EAAAA,EAAAA,IAAA,MAAIG,WAAW,UACbH,EAAAA,EAAAA,IAAA,MAAIG,WAAW,KACb,MAAS,MACN,WACLH,EAAAA,EAAAA,IAAA,MAAIG,WAAW,KACb,MAAS,OACRH,EAAAA,EAAAA,IAAA,cAAYG,WAAW,MAAO,0CACjCH,EAAAA,EAAAA,IAAA,MAAIG,WAAW,KACb,MAAS,MACN,QAAMH,EAAAA,EAAAA,IAACI,EAAAA,EAAI,CAACC,GAAG,2BAA2BH,QAAQ,QAAS,oBAElEF,EAAAA,EAAAA,IAAA,MAAIG,WAAW,UACbH,EAAAA,EAAAA,IAAA,MAAIG,WAAW,KACb,MAAS,MACN,aACLH,EAAAA,EAAAA,IAAA,MAAIG,WAAW,KACb,MAAS,OACRH,EAAAA,EAAAA,IAAA,cAAYG,WAAW,MAAO,sCACjCH,EAAAA,EAAAA,IAAA,MAAIG,WAAW,KACb,MAAS,OACRH,EAAAA,EAAAA,IAACI,EAAAA,EAAI,CAACC,GAAG,2BAA2BH,QAAQ,QAAS,oBAE1DF,EAAAA,EAAAA,IAAA,MAAIG,WAAW,UACbH,EAAAA,EAAAA,IAAA,MAAIG,WAAW,KACb,MAAS,MACN,WACLH,EAAAA,EAAAA,IAAA,MAAIG,WAAW,KACb,MAAS,OACRH,EAAAA,EAAAA,IAAA,cAAYG,WAAW,MAAO,4BACjCH,EAAAA,EAAAA,IAAA,MAAIG,WAAW,KACb,MAAS,OACRH,EAAAA,EAAAA,IAACI,EAAAA,EAAI,CAACC,GAAG,2BAA2BH,QAAQ,QAAS,oBAE1DF,EAAAA,EAAAA,IAAA,MAAIG,WAAW,UACbH,EAAAA,EAAAA,IAAA,MAAIG,WAAW,KACb,MAAS,MACN,UACLH,EAAAA,EAAAA,IAAA,MAAIG,WAAW,KACb,MAAS,OACRH,EAAAA,EAAAA,IAAA,cAAYG,WAAW,MAAO,cACjCH,EAAAA,EAAAA,IAAA,MAAIG,WAAW,KACb,MAAS,MACN,iCAIXH,EAAAA,EAAAA,IAAA,MACE,GAAM,sBACH,uBACLA,EAAAA,EAAAA,IAAA,YAAKA,EAAAA,EAAAA,IAAA,QAAMG,WAAW,MAClB,UAAa,gBACV,2LAMPH,EAAAA,EAAAA,IAAA,cACEA,EAAAA,EAAAA,IAAA,SAAOG,WAAW,UAChBH,EAAAA,EAAAA,IAAA,MAAIG,WAAW,UACbH,EAAAA,EAAAA,IAAA,MAAIG,WAAW,KACb,MAAS,MACN,aACLH,EAAAA,EAAAA,IAAA,MAAIG,WAAW,KACb,MAAS,MACN,SACLH,EAAAA,EAAAA,IAAA,MAAIG,WAAW,KACb,MAAS,MACN,kBAGTH,EAAAA,EAAAA,IAAA,SAAOG,WAAW,UAChBH,EAAAA,EAAAA,IAAA,MAAIG,WAAW,UACbH,EAAAA,EAAAA,IAAA,MAAIG,WAAW,KACb,MAAS,MACN,OACLH,EAAAA,EAAAA,IAAA,MAAIG,WAAW,KACb,MAAS,OACRH,EAAAA,EAAAA,IAAA,cAAYG,WAAW,MAAO,YACjCH,EAAAA,EAAAA,IAAA,MAAIG,WAAW,KACb,MAAS,MACN,cAEPH,EAAAA,EAAAA,IAAA,MAAIG,WAAW,UACbH,EAAAA,EAAAA,IAAA,MAAIG,WAAW,KACb,MAAS,MACN,cACLH,EAAAA,EAAAA,IAAA,MAAIG,WAAW,KACb,MAAS,OACRH,EAAAA,EAAAA,IAAA,cAAYG,WAAW,MAAO,aACjCH,EAAAA,EAAAA,IAAA,MAAIG,WAAW,KACb,MAAS,MACN,qBAEPH,EAAAA,EAAAA,IAAA,MAAIG,WAAW,UACbH,EAAAA,EAAAA,IAAA,MAAIG,WAAW,KACb,MAAS,MACN,aACLH,EAAAA,EAAAA,IAAA,MAAIG,WAAW,KACb,MAAS,OACRH,EAAAA,EAAAA,IAAA,cAAYG,WAAW,MAAO,aACjCH,EAAAA,EAAAA,IAAA,MAAIG,WAAW,KACb,MAAS,MACN,qBAEPH,EAAAA,EAAAA,IAAA,MAAIG,WAAW,UACbH,EAAAA,EAAAA,IAAA,MAAIG,WAAW,KACb,MAAS,MACN,cACLH,EAAAA,EAAAA,IAAA,MAAIG,WAAW,KACb,MAAS,OACRH,EAAAA,EAAAA,IAAA,cAAYG,WAAW,MAAO,aACjCH,EAAAA,EAAAA,IAAA,MAAIG,WAAW,KACb,MAAS,MACN,sBAEPH,EAAAA,EAAAA,IAAA,MAAIG,WAAW,UACbH,EAAAA,EAAAA,IAAA,MAAIG,WAAW,KACb,MAAS,MACN,UACLH,EAAAA,EAAAA,IAAA,MAAIG,WAAW,KACb,MAAS,OACRH,EAAAA,EAAAA,IAAA,cAAYG,WAAW,MAAO,YACjCH,EAAAA,EAAAA,IAAA,MAAIG,WAAW,KACb,MAAS,MACN,iBAEPH,EAAAA,EAAAA,IAAA,MAAIG,WAAW,UACbH,EAAAA,EAAAA,IAAA,MAAIG,WAAW,KACb,MAAS,MACN,WACLH,EAAAA,EAAAA,IAAA,MAAIG,WAAW,KACb,MAAS,OACRH,EAAAA,EAAAA,IAAA,cAAYG,WAAW,MAAO,YACjCH,EAAAA,EAAAA,IAAA,MAAIG,WAAW,KACb,MAAS,MACN,kBAEPH,EAAAA,EAAAA,IAAA,MAAIG,WAAW,UACbH,EAAAA,EAAAA,IAAA,MAAIG,WAAW,KACb,MAAS,QAEXH,EAAAA,EAAAA,IAAA,MAAIG,WAAW,KACb,MAAS,QAEXH,EAAAA,EAAAA,IAAA,MAAIG,WAAW,KACb,MAAS,SAGbH,EAAAA,EAAAA,IAAA,MAAIG,WAAW,UACbH,EAAAA,EAAAA,IAAA,MAAIG,WAAW,KACb,MAAS,MACN,0BACLH,EAAAA,EAAAA,IAAA,MAAIG,WAAW,KACb,MAAS,OACRH,EAAAA,EAAAA,IAAA,cAAYG,WAAW,MAAO,sCACjCH,EAAAA,EAAAA,IAAA,MAAIG,WAAW,KACb,MAAS,SAGbH,EAAAA,EAAAA,IAAA,MAAIG,WAAW,UACbH,EAAAA,EAAAA,IAAA,MAAIG,WAAW,KACb,MAAS,MACN,qBACLH,EAAAA,EAAAA,IAAA,MAAIG,WAAW,KACb,MAAS,OACRH,EAAAA,EAAAA,IAAA,cAAYG,WAAW,MAAO,uBACjCH,EAAAA,EAAAA,IAAA,MAAIG,WAAW,KACb,MAAS,SAGbH,EAAAA,EAAAA,IAAA,MAAIG,WAAW,UACbH,EAAAA,EAAAA,IAAA,MAAIG,WAAW,KACb,MAAS,MACN,0BACLH,EAAAA,EAAAA,IAAA,MAAIG,WAAW,KACb,MAAS,OACRH,EAAAA,EAAAA,IAAA,cAAYG,WAAW,MAAO,4BACjCH,EAAAA,EAAAA,IAAA,MAAIG,WAAW,KACb,MAAS,SAGbH,EAAAA,EAAAA,IAAA,MAAIG,WAAW,UACbH,EAAAA,EAAAA,IAAA,MAAIG,WAAW,KACb,MAAS,MACN,sBACLH,EAAAA,EAAAA,IAAA,MAAIG,WAAW,KACb,MAAS,OACRH,EAAAA,EAAAA,IAAA,cAAYG,WAAW,MAAO,wBACjCH,EAAAA,EAAAA,IAAA,MAAIG,WAAW,KACb,MAAS,SAGbH,EAAAA,EAAAA,IAAA,MAAIG,WAAW,UACbH,EAAAA,EAAAA,IAAA,MAAIG,WAAW,KACb,MAAS,MACN,2BACLH,EAAAA,EAAAA,IAAA,MAAIG,WAAW,KACb,MAAS,OACRH,EAAAA,EAAAA,IAAA,cAAYG,WAAW,MAAO,+DACjCH,EAAAA,EAAAA,IAAA,MAAIG,WAAW,KACb,MAAS,SAGbH,EAAAA,EAAAA,IAAA,MAAIG,WAAW,UACbH,EAAAA,EAAAA,IAAA,MAAIG,WAAW,KACb,MAAS,QAEXH,EAAAA,EAAAA,IAAA,MAAIG,WAAW,KACb,MAAS,QAEXH,EAAAA,EAAAA,IAAA,MAAIG,WAAW,KACb,MAAS,SAGbH,EAAAA,EAAAA,IAAA,MAAIG,WAAW,UACbH,EAAAA,EAAAA,IAAA,MAAIG,WAAW,KACb,MAAS,MACN,eACLH,EAAAA,EAAAA,IAAA,MAAIG,WAAW,KACb,MAAS,OACRH,EAAAA,EAAAA,IAAA,cAAYG,WAAW,MAAO,gCACjCH,EAAAA,EAAAA,IAAA,MAAIG,WAAW,KACb,MAAS,SAGbH,EAAAA,EAAAA,IAAA,MAAIG,WAAW,UACbH,EAAAA,EAAAA,IAAA,MAAIG,WAAW,KACb,MAAS,MACN,cACLH,EAAAA,EAAAA,IAAA,MAAIG,WAAW,KACb,MAAS,OACRH,EAAAA,EAAAA,IAAA,cAAYG,WAAW,MAAO,cACjCH,EAAAA,EAAAA,IAAA,MAAIG,WAAW,KACb,MAAS,SAGbH,EAAAA,EAAAA,IAAA,MAAIG,WAAW,UACbH,EAAAA,EAAAA,IAAA,MAAIG,WAAW,KACb,MAAS,MACN,mBACLH,EAAAA,EAAAA,IAAA,MAAIG,WAAW,KACb,MAAS,OACRH,EAAAA,EAAAA,IAAA,cAAYG,WAAW,MAAO,iDACjCH,EAAAA,EAAAA,IAAA,MAAIG,WAAW,KACb,MAAS,SAGbH,EAAAA,EAAAA,IAAA,MAAIG,WAAW,UACbH,EAAAA,EAAAA,IAAA,MAAIG,WAAW,KACb,MAAS,MACN,YACLH,EAAAA,EAAAA,IAAA,MAAIG,WAAW,KACb,MAAS,OACRH,EAAAA,EAAAA,IAAA,cAAYG,WAAW,MAAO,8BACjCH,EAAAA,EAAAA,IAAA,MAAIG,WAAW,KACb,MAAS,WAKjBH,EAAAA,EAAAA,IAAA,MACE,GAAM,qBACH,sBACLA,EAAAA,EAAAA,IAAA,MACE,GAAM,iBACH,kBACLA,EAAAA,EAAAA,IAAA,SAAK,wEACLA,EAAAA,EAAAA,IAAA,OAAKlE,MAAO,CACVM,OAAQ,QACRC,gBAAiB,gBACjB0B,MAAO,QACPC,OAAQ,cAEVgC,EAAAA,EAAAA,IAAC7C,EAAAA,EAAoB,CAAC+C,QAAQ,2BAE9BF,EAAAA,EAAAA,IAAA,SAAK,sBAAoBA,EAAAA,EAAAA,IAAA,cAAYG,WAAW,KAAM,mBAAgC,wFACtFH,EAAAA,EAAAA,IAAA,YAAKA,EAAAA,EAAAA,IAAA,QAAMG,WAAW,MAClB,UAAa,gBACV,yRAYPH,EAAAA,EAAAA,IAAA,SAAK,gFAA8EA,EAAAA,EAAAA,IAAA,cAAYG,WAAW,KAAM,oBAAiC,eAAaH,EAAAA,EAAAA,IAAA,cAAYG,WAAW,KAAM,mBAC3LH,EAAAA,EAAAA,IAAA,YAAKA,EAAAA,EAAAA,IAAA,QAAMG,WAAW,MAClB,UAAa,gBACV,+gCAwCPH,EAAAA,EAAAA,IAAA,MACE,GAAM,iBACH,kBACLA,EAAAA,EAAAA,IAAA,SAAK,uBAAqBA,EAAAA,EAAAA,IAAA,cAAYG,WAAW,KAAM,iBAA8B,6BAA2BH,EAAAA,EAAAA,IAAA,cAAYG,WAAW,KAAM,aAA0B,2DACvKH,EAAAA,EAAAA,IAACtC,EAAAA,EAAmB,CAACwC,QAAQ,yBAC7BF,EAAAA,EAAAA,IAAA,MACE,GAAM,gBACH,iBACLA,EAAAA,EAAAA,IAAA,SAAK,0HACLA,EAAAA,EAAAA,IAAA,SAAK,8HAA4HA,EAAAA,EAAAA,IAAA,cAAYG,WAAW,KAAM,kBAA+B,SAAOH,EAAAA,EAAAA,IAAA,cAAYG,WAAW,KAAM,aAA0B,cAAYH,EAAAA,EAAAA,IAAA,cAAYG,WAAW,KAAM,iBAA8B,MAClUH,EAAAA,EAAAA,IAAA,SAAK,8JACLA,EAAAA,EAAAA,IAAC1B,EAAAA,EAAkB,CAAC4B,QAAQ,uBAEhC,CAEAJ,EAAWQ,gBAAiB,C","sources":["webpack://dockview-docs/./src/components/console/console.tsx","webpack://dockview-docs/./src/components/paneview/customHeader.tsx","webpack://dockview-docs/./src/components/paneview/dragAndDrop.tsx","webpack://dockview-docs/./src/components/paneview/sideBySide.tsx","webpack://dockview-docs/./src/components/simplePaneview.tsx","webpack://dockview-docs/./docs/components/paneview.mdx"],"sourcesContent":["import * as React from 'react';\nimport './console.scss';\n\nconst formatTime = (now: Date) => {\n    const pad = (x: number) => (x < 10 ? `0${x}` : `${x}`);\n\n    return `${pad(now.getHours())}:${pad(now.getMinutes())}:${pad(\n        now.getSeconds()\n    )}.${now.getMilliseconds()}`;\n};\n\nexport interface Line {\n    timestamp: Date;\n    text: string;\n    css?: React.CSSProperties;\n}\n\nexport interface IConsoleProps {\n    lines: Line[];\n}\n\nexport const Console = (props: IConsoleProps) => {\n    const ref = React.useRef<HTMLDivElement>();\n\n    React.useLayoutEffect(() => {\n        if (!ref.current) {\n            return;\n        }\n\n        ref.current.scrollTop = Math.max(\n            0,\n            ref.current.scrollHeight - ref.current.clientHeight\n        );\n    }, [props.lines]);\n\n    return (\n        <div ref={ref} className=\"console-container\">\n            {props.lines.map((line, i) => {\n                return (\n                    <div key={i} className=\"console-line\">\n                        <span className=\"console-line-timestamp\">\n                            {formatTime(line.timestamp)}\n                        </span>\n                        <span className=\"console-line-text\" style={line.css}>\n                            {line.text}\n                        </span>\n                    </div>\n                );\n            })}\n        </div>\n    );\n};\n","import {\n    IPaneviewPanelProps,\n    PaneviewReact,\n    PaneviewReadyEvent,\n} from 'dockview';\nimport * as React from 'react';\n\nconst components = {\n    default: (props: IPaneviewPanelProps<{ title: string }>) => {\n        return (\n            <div\n                style={{\n                    padding: '10px',\n                    height: '100%',\n                    backgroundColor: 'rgb(60,60,60)',\n                }}\n            >\n                {props.params.title}\n            </div>\n        );\n    },\n};\n\nconst MyHeaderComponent = (props: IPaneviewPanelProps<{ title: string }>) => {\n    const [expanded, setExpanded] = React.useState<boolean>(\n        props.api.isExpanded\n    );\n\n    React.useEffect(() => {\n        const disposable = props.api.onDidExpansionChange((event) => {\n            setExpanded(event.isExpanded);\n        });\n\n        return () => {\n            disposable.dispose();\n        };\n    }, []);\n\n    const onClick = () => {\n        props.api.setExpanded(!expanded);\n    };\n\n    return (\n        <div\n            style={{\n                padding: '0px 8px',\n                height: '100%',\n                backgroundColor: 'rgb(60,60,60)',\n            }}\n        >\n            <span>{`Custom header for ${props.title}`}</span>\n            <button onClick={onClick}>\n                {expanded ? 'Collapse' : 'Expand'}\n            </button>\n        </div>\n    );\n};\n\nconst headerComponents = {\n    myHeaderComponent: MyHeaderComponent,\n};\n\nexport const CustomHeaderPaneview = () => {\n    const onReady = (event: PaneviewReadyEvent) => {\n        event.api.addPanel({\n            id: 'panel_1',\n            component: 'default',\n            headerComponent: 'myHeaderComponent',\n            params: {\n                title: 'Panel 1',\n            },\n            title: 'Panel 1',\n        });\n\n        event.api.addPanel({\n            id: 'panel_2',\n            component: 'default',\n            headerComponent: 'myHeaderComponent',\n            params: {\n                title: 'Panel 2',\n            },\n            title: 'Panel 2',\n        });\n\n        event.api.addPanel({\n            id: 'panel_3',\n            component: 'default',\n            headerComponent: 'myHeaderComponent',\n            params: {\n                title: 'Panel 3',\n            },\n            title: 'Panel 3',\n        });\n    };\n\n    return (\n        <PaneviewReact\n            components={components}\n            headerComponents={headerComponents}\n            onReady={onReady}\n            className=\"dockview-theme-abyss\"\n        />\n    );\n};\n","import {\n    IPaneviewPanelProps,\n    PaneviewDropEvent,\n    PaneviewReact,\n    PaneviewReadyEvent,\n} from 'dockview';\nimport * as React from 'react';\n\nconst components = {\n    default: (props: IPaneviewPanelProps<{ title: string }>) => {\n        return (\n            <div\n                style={{\n                    padding: '10px',\n                    height: '100%',\n                    backgroundColor: 'rgb(60,60,60)',\n                }}\n            >\n                {props.params.title}\n            </div>\n        );\n    },\n};\n\nexport const DragAndDropPaneview = () => {\n    const onReady = (event: PaneviewReadyEvent) => {\n        event.api.addPanel({\n            id: 'panel_1',\n            component: 'default',\n            params: {\n                title: 'Panel 1',\n            },\n            title: 'Panel 1',\n        });\n\n        event.api.addPanel({\n            id: 'panel_2',\n            component: 'default',\n            params: {\n                title: 'Panel 2',\n            },\n            title: 'Panel 2',\n        });\n\n        event.api.addPanel({\n            id: 'panel_3',\n            component: 'default',\n            params: {\n                title: 'Panel 3',\n            },\n            title: 'Panel 3',\n        });\n    };\n\n    const onDidDrop = (event: PaneviewDropEvent) => {\n        const index = event.api.panels.indexOf(event.panel);\n\n        event.api.addPanel({\n            id: 'panel_4',\n            component: 'default',\n            params: {\n                title: 'Panel 4',\n            },\n            title: 'Panel 4',\n            index,\n        });\n    };\n\n    return (\n        <div>\n            <div>\n                <div\n                    style={{\n                        backgroundColor: 'orange',\n                        padding: '0px 8px',\n                        borderRadius: '4px',\n                        width: '100px',\n                        cursor: 'pointer',\n                    }}\n                    draggable={true}\n                >\n                    Drag me\n                </div>\n            </div>\n            <div\n                style={{\n                    height: '300px',\n                    backgroundColor: 'rgb(30,30,30)',\n                    color: 'white',\n                    margin: '20px 0px',\n                }}\n            >\n                <PaneviewReact\n                    components={components}\n                    onReady={onReady}\n                    onDidDrop={onDidDrop}\n                    className=\"dockview-theme-abyss\"\n                />\n            </div>\n        </div>\n    );\n};\n","import {\n    IPaneviewPanelProps,\n    PaneviewDropEvent,\n    PaneviewReact,\n    PaneviewReadyEvent,\n    PaneviewDndOverlayEvent,\n} from 'dockview';\nimport * as React from 'react';\nimport { Console, Line } from '../console/console';\nimport './sideBySide.scss';\n\nconst components = {\n    default: (props: IPaneviewPanelProps<{ title: string }>) => {\n        return (\n            <div\n                style={{\n                    padding: '10px',\n                    height: '100%',\n                    backgroundColor: 'rgb(60,60,60)',\n                }}\n            >\n                {props.params.title}\n            </div>\n        );\n    },\n};\n\nexport const SideBySidePaneview = () => {\n    const [checked, setChecked] = React.useState<boolean>(false);\n    const [lines, setLines] = React.useState<Line[]>([]);\n\n    const onReady = (event: PaneviewReadyEvent) => {\n        event.api.addPanel({\n            id: 'panel_1',\n            component: 'default',\n            params: {\n                title: 'Panel 1',\n            },\n            title: 'Panel 1',\n        });\n\n        event.api.addPanel({\n            id: 'panel_2',\n            component: 'default',\n            params: {\n                title: 'Panel 2',\n            },\n            title: 'Panel 2',\n        });\n\n        event.api.addPanel({\n            id: 'panel_3',\n            component: 'default',\n            params: {\n                title: 'Panel 3',\n            },\n            title: 'Panel 3',\n        });\n    };\n\n    const showDndOverlay = (event: PaneviewDndOverlayEvent) => {\n        return checked;\n    };\n\n    const onDidDrop = (event: PaneviewDropEvent) => {\n        const text = `onDidDrop ${event.position} ${event.panel.id}`;\n\n        setLines((lines) => [...lines, { text, timestamp: new Date() }]);\n    };\n\n    return (\n        <div\n            style={{\n                height: '300px',\n                margin: '20px 0px',\n                display: 'flex',\n                flexDirection: 'column',\n            }}\n        >\n            <div style={{ height: '25px' }}>\n                <label>\n                    <span>Enable external events</span>\n                    <input\n                        type={'checkbox'}\n                        checked={checked}\n                        onChange={(e) => {\n                            setChecked(e.target.checked);\n                        }}\n                    />\n                </label>\n            </div>\n            <div\n                style={{\n                    height: '250px',\n                    display: 'flex',\n                }}\n            >\n                <PaneviewReact\n                    components={components}\n                    onReady={onReady}\n                    className=\"dockview-theme-abyss paneview-side-by-side\"\n                    showDndOverlay={showDndOverlay}\n                    onDidDrop={onDidDrop}\n                />\n                <PaneviewReact\n                    components={components}\n                    onReady={onReady}\n                    className=\"dockview-theme-abyss paneview-side-by-side\"\n                    showDndOverlay={showDndOverlay}\n                    onDidDrop={onDidDrop}\n                />\n            </div>\n            <div style={{ height: '100px' }}>\n                <Console lines={lines} />\n            </div>\n        </div>\n    );\n};\n","import {\n    IPaneviewPanelProps,\n    PaneviewReact,\n    PaneviewReadyEvent,\n} from 'dockview';\nimport * as React from 'react';\n\nconst components = {\n    default: (props: IPaneviewPanelProps<{ title: string }>) => {\n        return (\n            <div\n                style={{\n                    padding: '10px',\n                    height: '100%',\n                    backgroundColor: 'rgb(60,60,60)',\n                }}\n            >\n                {props.params.title}\n            </div>\n        );\n    },\n};\n\nconst MyHeaderComponent = (props: IPaneviewPanelProps<{ title: string }>) => {\n    const [expanded, setExpanded] = React.useState<boolean>(\n        props.api.isExpanded\n    );\n\n    React.useEffect(() => {\n        const disposable = props.api.onDidExpansionChange((event) => {\n            setExpanded(event.isExpanded);\n        });\n\n        return () => {\n            disposable.dispose();\n        };\n    }, []);\n\n    const onClick = () => {\n        props.api.setExpanded(!expanded);\n    };\n\n    return (\n        <div\n            style={{\n                padding: '10px',\n                height: '100%',\n                backgroundColor: 'rgb(60,60,60)',\n            }}\n        >\n            <a\n                onClick={onClick}\n                className={expanded ? 'expanded' : 'collapsed'}\n            />\n            <span>{props.params.title}</span>\n        </div>\n    );\n};\n\nconst headerComponents = {\n    myHeaderComponent: MyHeaderComponent,\n};\n\nexport const SimplePaneview = () => {\n    const onReady = (event: PaneviewReadyEvent) => {\n        event.api.addPanel({\n            id: 'panel_1',\n            component: 'default',\n            params: {\n                title: 'Panel 1',\n            },\n            title: 'Panel 1',\n        });\n\n        event.api.addPanel({\n            id: 'panel_2',\n            component: 'default',\n            params: {\n                title: 'Panel 2',\n            },\n            title: 'Panel 2',\n        });\n\n        event.api.addPanel({\n            id: 'panel_3',\n            component: 'default',\n            params: {\n                title: 'Panel 3',\n            },\n            title: 'Panel 3',\n        });\n    };\n\n    return (\n        <PaneviewReact\n            components={components}\n            headerComponents={headerComponents}\n            onReady={onReady}\n            className=\"dockview-theme-abyss\"\n        />\n    );\n};\n","\n\n/* @jsxRuntime classic */\n/* @jsx mdx */\n/* @jsxFrag React.Fragment */\n\nimport React from 'react';\nimport { mdx } from '@mdx-js/react';\n\n\nexport const frontMatter = {\n\tdescription: 'Paneview Documentation'\n};\nexport const contentTitle = 'Paneview';\nexport const metadata = {\n  \"unversionedId\": \"components/paneview\",\n  \"id\": \"components/paneview\",\n  \"title\": \"Paneview\",\n  \"description\": \"Paneview Documentation\",\n  \"source\": \"@site/docs/components/paneview.mdx\",\n  \"sourceDirName\": \"components\",\n  \"slug\": \"/components/paneview\",\n  \"permalink\": \"/docs/next/components/paneview\",\n  \"draft\": false,\n  \"editUrl\": \"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/components/paneview.mdx\",\n  \"tags\": [],\n  \"version\": \"current\",\n  \"frontMatter\": {\n    \"description\": \"Paneview Documentation\"\n  },\n  \"sidebar\": \"tutorialSidebar\",\n  \"previous\": {\n    \"title\": \"Gridview\",\n    \"permalink\": \"/docs/next/components/gridview\"\n  },\n  \"next\": {\n    \"title\": \"Splitview\",\n    \"permalink\": \"/docs/next/components/splitview\"\n  }\n};\nexport const assets = {\n\n};\n\nimport { SimplePaneview } from '@site/src/components/simplePaneview';\nimport { CustomHeaderPaneview } from '@site/src/components/paneview/customHeader';\nimport { DragAndDropPaneview } from '@site/src/components/paneview/dragAndDrop';\nimport { SideBySidePaneview } from '@site/src/components/paneview/sideBySide';\nimport Link from '@docusaurus/Link';\nexport const toc = [{\n  value: 'PaneviewReact Component',\n  id: 'paneviewreact-component',\n  level: 2\n}, {\n  value: 'Paneview API',\n  id: 'paneview-api',\n  level: 2\n}, {\n  value: 'Paneview Panel API',\n  id: 'paneview-panel-api',\n  level: 2\n}, {\n  value: 'Advanced Features',\n  id: 'advanced-features',\n  level: 2\n}, {\n  value: 'Custom Header',\n  id: 'custom-header',\n  level: 3\n}, {\n  value: 'Drag And Drop',\n  id: 'drag-and-drop',\n  level: 3\n}, {\n  value: 'Interactions',\n  id: 'interactions',\n  level: 3\n}];\n\nconst layoutProps = {\n  toc\n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"paneview\"\n    }}>{`Paneview`}</h1>\n    <p>{`A paneview is a collapsed collection of vertically stacked panels and panel headers.\nThe panel header will always remain visible however the panel will only be visible when the panel is expanded.`}</p>\n    <admonition {...{\n      \"type\": \"info\"\n    }}><p parentName=\"admonition\">{`Paneview panels can be re-ordered by dragging and dropping the panel headers.`}</p></admonition>\n    <hr></hr>\n    <h1 {...{\n      \"id\": \"introduction\"\n    }}>{`Introduction`}</h1>\n    <div style={{\n      height: '400px',\n      backgroundColor: 'rgb(30,30,30)',\n      color: 'white',\n      margin: '20px 0px'\n    }}>\n    <SimplePaneview mdxType=\"SimplePaneview\" />\n    </div>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\",\n        \"metastring\": \"title=\\\"Simple Paneview example\\\"\",\n        \"title\": \"\\\"Simple\",\n        \"Paneview\": true,\n        \"example\\\"\": true\n      }}>{`import {\n    IPaneviewPanelProps,\n    PaneviewReact,\n    PaneviewReadyEvent,\n} from 'dockview';\n\nconst components = {\n    default: (props: IPaneviewPanelProps<{ title: string }>) => {\n        return (\n            <div\n                style={{\n                    padding: '10px',\n                    height: '100%',\n                    backgroundColor: 'rgb(60,60,60)',\n                }}\n            >\n                {props.params.title}\n            </div>\n        );\n    },\n};\n\nSimplePaneview = () => {\n    const onReady = (event: PaneviewReadyEvent) => {\n        event.api.addPanel({\n            id: 'panel_1',\n            component: 'default',\n            params: {\n                title: 'Panel 1',\n            },\n            title: 'Panel 1',\n        });\n\n        event.api.addPanel({\n            id: 'panel_2',\n            component: 'default',\n            params: {\n                title: 'Panel 2',\n            },\n            title: 'Panel 2',\n        });\n\n        event.api.addPanel({\n            id: 'panel_3',\n            component: 'default',\n            params: {\n                title: 'Panel 3',\n            },\n            title: 'Panel 3',\n        });\n    };\n\n    return (\n        <PaneviewReact\n            components={components}\n            headerComponents={headerComponents}\n            onReady={onReady}\n            className=\"dockview-theme-abyss\"\n        />\n    );\n};\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"paneviewreact-component\"\n    }}>{`PaneviewReact Component`}</h2>\n    <p>{`You can create a Paneview through the use of the `}<inlineCode parentName=\"p\">{`ReactPaneview`}</inlineCode>{` component.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`import { ReactPaneview } from 'dockview';\n`}</code></pre>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Property`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Type`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Optional`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Default`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Description`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`onReady`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`(event: SplitviewReadyEvent) => void`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`No`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`components`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`object`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`No`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`headerComponents`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`object`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Yes`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`className`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`string`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Yes`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`''`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`disableAutoResizing`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`boolean`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Yes`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`false`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><Link to=\"../basics/#auto-resizing\" mdxType=\"Link\">{`Auto Resizing`}</Link></td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`disableDnd`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`boolean`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Yes`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`false`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`onDidDrop`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Event`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Yes`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n        </tr>\n      </tbody>\n    </table>\n    <h2 {...{\n      \"id\": \"paneview-api\"\n    }}>{`Paneview API`}</h2>\n    <p>{`The Paneview API is exposed both at the `}<inlineCode parentName=\"p\">{`onReady`}</inlineCode>{` event and on each panel through `}<inlineCode parentName=\"p\">{`props.containerApi`}</inlineCode>{`.\nThrough this API you can control general features of the component and access all added panels.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\",\n        \"metastring\": \"title=\\\"Paneview API via Panel component\\\"\",\n        \"title\": \"\\\"Paneview\",\n        \"API\": true,\n        \"via\": true,\n        \"Panel\": true,\n        \"component\\\"\": true\n      }}>{`const MyComponent = (props: IGridviewPanelProps<{ title: string }>) => {\n    // props.containerApi...\n\n    return <div>{\\`My first panel has the title: \\${props.params.title}\\`}</div>;\n};\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\",\n        \"metastring\": \"title=\\\"Paneview API via the onReady callback\\\"\",\n        \"title\": \"\\\"Paneview\",\n        \"API\": true,\n        \"via\": true,\n        \"the\": true,\n        \"onReady\": true,\n        \"callback\\\"\": true\n      }}>{`const onReady = (event: GridviewReadyEvent) => {\n    // event.api...\n};\n`}</code></pre>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Property`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Type`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Description`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`height`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`number`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Component pixel height`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`width`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`number`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Component pixel width`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`minimumSize`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`number`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`The sum of the `}<inlineCode parentName=\"td\">{`minimumSize`}</inlineCode>{` property for each panel`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`maximumSize`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`number`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`The sum of the `}<inlineCode parentName=\"td\">{`maximumSize`}</inlineCode>{` property for each panel`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`length`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`number`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Number of panels`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`panels`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`IPaneviewPanel[]`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`All panels`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`onDidLayoutChange`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`Event<void>`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Fires on layout change`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`onDidLayoutFromJSON`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`Event<void>`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Fires of layout change caused by a fromJSON deserialization call`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`onDidAddView`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`Event<IPaneviewPanel>`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Fires when a view is added`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`onDidRemoveView`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`Event<IPaneviewPanel>`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Fires when a view is removed`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`onDidDrop`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`Event<PaneviewDropEvent`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Fires on an external drop event (See `}<Link to=\"./paneview/#drag-and-drop\" mdxType=\"Link\">{`Drag and Drop`}</Link>{`)`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`addPanel`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`addPanel(options: AddPaneviewComponentOptions): IPaneviewPanel`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`removePanel`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`(panel: IPaneviewPanel): void`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`movePanel`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`(from: number, to: number): void`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`getPanel`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`(id:string): IPaneviewPanel \\\\| undefined`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`focus`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`(): void`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Focus the active panel, if exists`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`layout`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`(width: number, height:number): void`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`See `}<Link to=\"../basics/#auto-resizing\" mdxType=\"Link\">{`Auto Resizing`}</Link></td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`fromJSON`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`(data: SerializedPaneview): void`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><Link to=\"../basics/#serialization\" mdxType=\"Link\">{`Serialization`}</Link></td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`toJSON`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`(): SerializedPaneview`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><Link to=\"../basics/#serialization\" mdxType=\"Link\">{`Serialization`}</Link></td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`clear`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`(): void`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Clears the current layout`}</td>\n        </tr>\n      </tbody>\n    </table>\n    <h2 {...{\n      \"id\": \"paneview-panel-api\"\n    }}>{`Paneview Panel API`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`const MyComponent = (props: IGridviewPanelProps<{ title: string }>) => {\n    // props.api...\n\n    return <div>{\\`My first panel has the title: \\${props.params.title}\\`}</div>;\n};\n`}</code></pre>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Property`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Type`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Description`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`id`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`string`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Panel id`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`isFocused`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`boolean`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Is panel focsed`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`isActive`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`boolean`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Is panel active`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`isVisible`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`boolean`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Is panel visible`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`width`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`number`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Panel width`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`height`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`number`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Panel height`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`onDidDimensionsChange`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`Event<PanelDimensionChangeEvent>`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`onDidFocusChange`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`Event<FocusEvent>`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`onDidVisibilityChange`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`Event<VisibilityEvent>`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`onDidActiveChange`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`Event<ActiveEvent>`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`onDidConstraintsChange`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`onDidConstraintsChange: Event<PanelConstraintChangeEvent>`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`setVisible`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`(isVisible: boolean): void`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`setActive`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`(): void`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`setConstraints`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`(value: PanelConstraintChangeEvent2): void;`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`setSize`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`(event: SizeEvent): void`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n        </tr>\n      </tbody>\n    </table>\n    <h2 {...{\n      \"id\": \"advanced-features\"\n    }}>{`Advanced Features`}</h2>\n    <h3 {...{\n      \"id\": \"custom-header\"\n    }}>{`Custom Header`}</h3>\n    <p>{`You can provide a custom component to render an alternative header.`}</p>\n    <div style={{\n      height: '400px',\n      backgroundColor: 'rgb(30,30,30)',\n      color: 'white',\n      margin: '20px 0px'\n    }}>\n    <CustomHeaderPaneview mdxType=\"CustomHeaderPaneview\" />\n    </div>\n    <p>{`You can provide a `}<inlineCode parentName=\"p\">{`headerComponent`}</inlineCode>{` option when creating a panel to tell the library to use a custom header component.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`const onReady = (event: PaneviewReadyEvent) => {\n    event.api.addPanel({\n        id: 'panel_1',\n        component: 'default',\n        headerComponent: 'myHeaderComponent',\n        params: {\n            valueA: 'A',\n        },\n        title: 'Panel 1',\n    });\n};\n`}</code></pre>\n    <p>{`This header must be defined in the collection of components provided to the `}<inlineCode parentName=\"p\">{`headerComponents`}</inlineCode>{` props for `}<inlineCode parentName=\"p\">{`ReactPaneivew`}</inlineCode></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`import { IPaneviewPanelProps } from 'dockview';\n\nconst MyHeaderComponent = (props: IPaneviewPanelProps<{ title: string }>) => {\n    const [expanded, setExpanded] = React.useState<boolean>(\n        props.api.isExpanded\n    );\n\n    React.useEffect(() => {\n        const disposable = props.api.onDidExpansionChange((event) => {\n            setExpanded(event.isExpanded);\n        });\n\n        return () => {\n            disposable.dispose();\n        };\n    }, []);\n\n    const onClick = () => {\n        props.api.setExpanded(!expanded);\n    };\n\n    return (\n        <div\n            style={{\n                padding: '10px',\n                height: '100%',\n                backgroundColor: 'rgb(60,60,60)',\n            }}\n        >\n            <a\n                onClick={onClick}\n                className={expanded ? 'expanded' : 'collapsed'}\n            />\n            <span>{props.params.title}</span>\n        </div>\n    );\n};\n\nconst headerComponents = { myHeaderComponent: MyHeaderComponent };\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"drag-and-drop\"\n    }}>{`Drag And Drop`}</h3>\n    <p>{`If you provide the `}<inlineCode parentName=\"p\">{`PaneviewReact`}</inlineCode>{` component with the prop `}<inlineCode parentName=\"p\">{`onDidDrop`}</inlineCode>{` you will be able to interact with custom drop events.`}</p>\n    <DragAndDropPaneview mdxType=\"DragAndDropPaneview\" />\n    <h3 {...{\n      \"id\": \"interactions\"\n    }}>{`Interactions`}</h3>\n    <p>{`You can safely create multiple paneview instances within one page. They will not interact with each other by default.`}</p>\n    <p>{`If you wish to interact with the drop event from one paneview instance in another paneview instance you can implement the `}<inlineCode parentName=\"p\">{`showDndOverlay`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`onDidDrop`}</inlineCode>{` props on `}<inlineCode parentName=\"p\">{`PaneviewReact`}</inlineCode>{`.`}</p>\n    <p>{`As an example see how dragging a header from one control to another will only trigger an interactable event for the developer if the checkbox is enabled.`}</p>\n    <SideBySidePaneview mdxType=\"SideBySidePaneview\" />\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n"],"names":["Console","props","ref","React","current","scrollTop","Math","max","scrollHeight","clientHeight","lines","className","map","line","i","key","now","pad","x","getHours","getMinutes","getSeconds","getMilliseconds","formatTime","timestamp","style","css","text","components","default","padding","height","backgroundColor","params","title","headerComponents","myHeaderComponent","expanded","setExpanded","api","isExpanded","disposable","onDidExpansionChange","event","dispose","onClick","CustomHeaderPaneview","PaneviewReact","onReady","addPanel","id","component","headerComponent","DragAndDropPaneview","borderRadius","width","cursor","draggable","color","margin","onDidDrop","index","panels","indexOf","panel","SideBySidePaneview","checked","setChecked","setLines","showDndOverlay","position","Date","display","flexDirection","type","onChange","e","target","SimplePaneview","frontMatter","description","contentTitle","metadata","assets","toc","value","level","layoutProps","MDXLayout","MDXContent","_ref","mdx","_extends","mdxType","parentName","Link","to","isMDXComponent"],"sourceRoot":""}