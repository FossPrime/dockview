{"version":3,"file":"assets/js/73e09995.2b2b8982.js","mappings":"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","sources":["webpack://dockview-docs/./src/components/simpleSplitview.tsx","webpack://dockview-docs/./src/components/simpleSplitview2.tsx","webpack://dockview-docs/./versioned_docs/version-1.6.0/basics.mdx"],"sourcesContent":["import {\n    ISplitviewPanelProps,\n    Orientation,\n    SplitviewReact,\n    SplitviewReadyEvent,\n} from 'dockview';\nimport * as React from 'react';\n\nconst components = {\n    default: (props: ISplitviewPanelProps<{ title: string }>) => {\n        return <div style={{ padding: '20px' }}>{props.params.title}</div>;\n    },\n};\n\nexport const SimpleSplitview = (props: { proportional?: boolean }) => {\n    const onReady = (event: SplitviewReadyEvent) => {\n        event.api.addPanel({\n            id: 'panel_1',\n            component: 'default',\n            params: {\n                title: 'Panel 1',\n            },\n            minimumSize: 100,\n        });\n\n        event.api.addPanel({\n            id: 'panel_2',\n            component: 'default',\n            params: {\n                title: 'Panel 2',\n            },\n            minimumSize: 100,\n        });\n\n        event.api.addPanel({\n            id: 'panel_3',\n            component: 'default',\n            params: {\n                title: 'Panel 3',\n            },\n            minimumSize: 100,\n        });\n    };\n\n    return (\n        <SplitviewReact\n            components={components}\n            proportionalLayout={props.proportional}\n            onReady={onReady}\n            orientation={Orientation.HORIZONTAL}\n            className=\"dockview-theme-abyss\"\n        />\n    );\n};\n","import { SimpleSplitview } from './simpleSplitview';\nimport * as React from 'react';\n\nexport const SimpleSplitview2 = (props: { proportional?: boolean }) => {\n    const [value, setValue] = React.useState<number>(50);\n\n    const onChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n        setValue(Number(event.target.value));\n    };\n\n    return (\n        <div\n            style={{\n                display: 'flex',\n                flexDirection: 'column',\n                height: '100px',\n                margin: '10px 0px',\n            }}\n        >\n            <div\n                style={{\n                    height: '25px',\n                    display: 'flex',\n                    alignItems: 'center',\n                }}\n            >\n                <input\n                    type={'range'}\n                    min={20}\n                    max={100}\n                    defaultValue={50}\n                    value={value}\n                    onChange={onChange}\n                />\n                <span style={{ padding: '0px 8px' }}>\n                    Slide to resize the splitview container\n                </span>\n            </div>\n            <div\n                style={{\n                    flexGrow: 1,\n                    display: 'grid',\n                    gridTemplateColumns: `${value}fr ${100 - value}fr`,\n                }}\n            >\n                <div\n                    style={{\n                        backgroundColor: 'rgb(30,30,30)',\n                        color: 'white',\n                        flexGrow: 1,\n                        border: '1px solid grey',\n                    }}\n                >\n                    <SimpleSplitview proportional={props.proportional} />\n                </div>\n                <div></div>\n            </div>\n        </div>\n    );\n};\n","\n\n/* @jsxRuntime classic */\n/* @jsx mdx */\n/* @jsxFrag React.Fragment */\n\nimport React from 'react';\nimport { mdx } from '@mdx-js/react';\n\n\nexport const frontMatter = {\n\tsidebar_position: 1,\n\tdescription: 'How to get started with Dockview'\n};\nexport const contentTitle = 'Basics';\nexport const metadata = {\n  \"unversionedId\": \"basics\",\n  \"id\": \"version-1.6.0/basics\",\n  \"title\": \"Basics\",\n  \"description\": \"How to get started with Dockview\",\n  \"source\": \"@site/versioned_docs/version-1.6.0/basics.mdx\",\n  \"sourceDirName\": \".\",\n  \"slug\": \"/basics\",\n  \"permalink\": \"/docs/basics\",\n  \"draft\": false,\n  \"editUrl\": \"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/versioned_docs/version-1.6.0/basics.mdx\",\n  \"tags\": [],\n  \"version\": \"1.6.0\",\n  \"sidebarPosition\": 1,\n  \"frontMatter\": {\n    \"sidebar_position\": 1,\n    \"description\": \"How to get started with Dockview\"\n  },\n  \"sidebar\": \"tutorialSidebar\",\n  \"previous\": {\n    \"title\": \"Introduction\",\n    \"permalink\": \"/docs/\"\n  },\n  \"next\": {\n    \"title\": \"Theme\",\n    \"permalink\": \"/docs/theme\"\n  }\n};\nexport const assets = {\n\n};\n\nimport { SimpleSplitview } from '@site/src/components/simpleSplitview';\nimport { SimpleSplitview2 } from '@site/src/components/simpleSplitview2';\nexport const toc = [{\n  value: 'Panels',\n  id: 'panels',\n  level: 2\n}, {\n  value: 'Adding a panel with parameters',\n  id: 'adding-a-panel-with-parameters',\n  level: 3\n}, {\n  value: 'API',\n  id: 'api',\n  level: 2\n}, {\n  value: 'Serialization',\n  id: 'serialization',\n  level: 3\n}, {\n  value: 'Auto resizing',\n  id: 'auto-resizing',\n  level: 2\n}, {\n  value: 'Events',\n  id: 'events',\n  level: 2\n}, {\n  value: 'Proportional layout',\n  id: 'proportional-layout',\n  level: 2\n}, {\n  value: 'Browser support',\n  id: 'browser-support',\n  level: 2\n}];\n\nconst layoutProps = {\n  toc\n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"basics\"\n    }}>{`Basics`}</h1>\n    <p>{`asd\nThis section will take you through a number of concepts that can be applied to all dockview components.`}</p>\n    <h2 {...{\n      \"id\": \"panels\"\n    }}>{`Panels`}</h2>\n    <p>{`The below examples use `}<inlineCode parentName=\"p\">{`ReactSplitview`}</inlineCode>{` but the logic holds for `}<inlineCode parentName=\"p\">{`ReactPaneview`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`ReactGridview`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`ReactDockview`}</inlineCode>{` using their respective implementations and interfaces.\nAll components require you to provide an `}<inlineCode parentName=\"p\">{`onReady`}</inlineCode>{` prop which you can use to build and control your component.`}</p>\n    <h3 {...{\n      \"id\": \"adding-a-panel-with-parameters\"\n    }}>{`Adding a panel with parameters`}</h3>\n    <p>{`You can pass parameters to a panel through the `}<inlineCode parentName=\"p\">{`params`}</inlineCode>{` object`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`const onReady = (event: SplitviewReadyEvent) => {\n    event.api.addPanel({\n        id: 'panel_1',\n        component: 'myComponent',\n        params: {\n            title: 'My Title',\n        },\n    });\n};\n`}</code></pre>\n    <p>{`and you can access those properties through the `}<inlineCode parentName=\"p\">{`props.params`}</inlineCode>{` object. The TypeScript interface accepts an optional generic type `}<inlineCode parentName=\"p\">{`T`}</inlineCode>{` that corresponds to the params objects type.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`const MyComponent = (props: ISplitviewPanelProps<{ title: string }>) => {\n    return <div>{\\`My first panel has the title: \\${props.params.title}\\`}</div>;\n};\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"api\"\n    }}>{`API`}</h2>\n    <p>{`There are two types of API you will interact with using `}<inlineCode parentName=\"p\">{`dockview`}</inlineCode>{`.`}</p>\n    <ul>\n      <li parentName=\"ul\">{`The `}<inlineCode parentName=\"li\">{`panel API`}</inlineCode>{` is accessible via `}<inlineCode parentName=\"li\">{`props.api`}</inlineCode>{` in user defined panels and via the `}<inlineCode parentName=\"li\">{`.api`}</inlineCode>{` variable found on panel instances. This API contains actions and variable related to the the individual panel.`}</li>\n      <li parentName=\"ul\">{`The `}<inlineCode parentName=\"li\">{`container API`}</inlineCode>{` is accessible via `}<inlineCode parentName=\"li\">{`event.api`}</inlineCode>{` in the `}<inlineCode parentName=\"li\">{`onReady`}</inlineCode>{` events and `}<inlineCode parentName=\"li\">{`props.containerApi`}</inlineCode>{` in user defined panels. This API contains actions and variable related to the component as a whole.`}</li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`const MyComponent = (props: ISplitviewPanelProps<{ title: string }>) => {\n    React.useEffect(() => {\n        const disposable = props.api.onDidActiveChange((event) => {\n            console.log(\\`is panel active: \\${event.isActive}\\`);\n        });\n\n        return () => {\n            disposable.dispose(); // remember to dispose of any subscriptions\n        };\n    }, [props.api]);\n\n    const addAnotherPanel = React.useCallback(() => {\n        props.containerApi.addPanel({\n            id: 'another_id',\n            component: 'anotherComponent',\n        });\n    }, [props.containerApi]);\n\n    return (\n        <div>\n            <span>{\\`My first panel has the title: \\${props.params.title}\\`}</span>\n            <button onClick={addAnotherPanel}>Add Panel</button>\n        </div>\n    );\n};\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"serialization\"\n    }}>{`Serialization`}</h3>\n    <p>{`All components support `}<inlineCode parentName=\"p\">{`toJSON(): T`}</inlineCode>{` which returns a Typed object representation of the components state. This same Typed object can be used to deserialize a view using `}<inlineCode parentName=\"p\">{`fromJSON(object: T): void`}</inlineCode>{`.`}</p>\n    <h2 {...{\n      \"id\": \"auto-resizing\"\n    }}>{`Auto resizing`}</h2>\n    <p><inlineCode parentName=\"p\">{`SplitviewReact`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`GridviewReact`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`PaneviewReact`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`DockviewReact`}</inlineCode>{` will all automatically resize to fill the size of their parent element.\nInternally this is achieved using a `}<a parentName=\"p\" {...{\n        \"href\": \"https://developer.mozilla.org/en-US/docs/Web/API/ResizeObserver\"\n      }}>{`ResizeObserver`}</a>{` which some users may need to polyfill.\nYou can disable this by settings the `}<inlineCode parentName=\"p\">{`disableAutoResizing`}</inlineCode>{` prop to be `}<inlineCode parentName=\"p\">{`true`}</inlineCode>{`.`}</p>\n    <p>{`You can manually resize a component using the API method `}<inlineCode parentName=\"p\">{`layout(width: number, height: number): void`}</inlineCode>{`.\nAn advanced case may use this in conjunction with `}<inlineCode parentName=\"p\">{`disableAutoResizing=true`}</inlineCode>{` to allow a parent component to have ultimate control over the dimensions of the component.`}</p>\n    <h2 {...{\n      \"id\": \"events\"\n    }}>{`Events`}</h2>\n    <p>{`Many API properties can be listened on using the `}<inlineCode parentName=\"p\">{`Event`}</inlineCode>{` pattern. For example `}<inlineCode parentName=\"p\">{`api.onDidFocusChange(() => {...})`}</inlineCode>{`.\nYou should dispose of any event listeners you create cleaning up any listeners you would have created.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`React.useEffect(() => {\n    const disposable = api.onDidFocusChange(() => {\n        // write some code\n    });\n\n    return () => {\n        disposable.dispose();\n    };\n}, []);\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"proportional-layout\"\n    }}>{`Proportional layout`}</h2>\n    <p>{`The `}<inlineCode parentName=\"p\">{`proportionalLayout`}</inlineCode>{` property indicates the expected behaviour of the component as it's container resizes, should all views resize equally or should just one view expand to fill the new space. `}<inlineCode parentName=\"p\">{`proportionalLayout`}</inlineCode>{` can be set as a property on `}<inlineCode parentName=\"p\">{`SplitviewReact`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`GridviewReact`}</inlineCode>{` components.\nAlthough not configurable on `}<inlineCode parentName=\"p\">{`DockviewReact`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`PaneviewReact`}</inlineCode>{` these both behave as if `}<inlineCode parentName=\"p\">{`proportionalLayout=true`}</inlineCode>{` was set for them.`}</p>\n    <SimpleSplitview2 proportional={false} mdxType=\"SimpleSplitview2\" />\n    <SimpleSplitview2 proportional={true} mdxType=\"SimpleSplitview2\" />\n    <h2 {...{\n      \"id\": \"browser-support\"\n    }}>{`Browser support`}</h2>\n    <p>{`dockview is intended to support all major browsers. Some users may require a polyfill for `}<a parentName=\"p\" {...{\n        \"href\": \"https://developer.mozilla.org/en-US/docs/Web/API/ResizeObserver\"\n      }}>{`ResizeObserver`}</a>{`.`}</p>\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n"],"names":["components","default","props","React","style","padding","params","title","SimpleSplitview","SplitviewReact","proportionalLayout","proportional","onReady","event","api","addPanel","id","component","minimumSize","orientation","Orientation","className","SimpleSplitview2","value","setValue","display","flexDirection","height","margin","alignItems","type","min","max","defaultValue","onChange","Number","target","flexGrow","gridTemplateColumns","backgroundColor","color","border","frontMatter","sidebar_position","description","contentTitle","metadata","assets","toc","level","layoutProps","MDXLayout","MDXContent","_ref","mdx","_extends","mdxType","parentName","isMDXComponent"],"sourceRoot":""}