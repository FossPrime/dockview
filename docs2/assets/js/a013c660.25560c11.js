"use strict";(self.webpackChunkdockview_docs=self.webpackChunkdockview_docs||[]).push([[39],{3905:function(t,e,n){n.d(e,{Zo:function(){return m},kt:function(){return k}});var a=n(7294);function l(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function i(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(t);e&&(a=a.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,a)}return n}function r(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?i(Object(n),!0).forEach((function(e){l(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function p(t,e){if(null==t)return{};var n,a,l=function(t,e){if(null==t)return{};var n,a,l={},i=Object.keys(t);for(a=0;a<i.length;a++)n=i[a],e.indexOf(n)>=0||(l[n]=t[n]);return l}(t,e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(t);for(a=0;a<i.length;a++)n=i[a],e.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(t,n)&&(l[n]=t[n])}return l}var o=a.createContext({}),d=function(t){var e=a.useContext(o),n=e;return t&&(n="function"==typeof t?t(e):r(r({},e),t)),n},m=function(t){var e=d(t.components);return a.createElement(o.Provider,{value:e},t.children)},u={inlineCode:"code",wrapper:function(t){var e=t.children;return a.createElement(a.Fragment,{},e)}},s=a.forwardRef((function(t,e){var n=t.components,l=t.mdxType,i=t.originalType,o=t.parentName,m=p(t,["components","mdxType","originalType","parentName"]),s=d(n),k=l,c=s["".concat(o,".").concat(k)]||s[k]||u[k]||i;return n?a.createElement(c,r(r({ref:e},m),{},{components:n})):a.createElement(c,r({ref:e},m))}));function k(t,e){var n=arguments,l=e&&e.mdxType;if("string"==typeof t||l){var i=n.length,r=new Array(i);r[0]=s;var p={};for(var o in e)hasOwnProperty.call(e,o)&&(p[o]=e[o]);p.originalType=t,p.mdxType="string"==typeof t?t:l,r[1]=p;for(var d=2;d<i;d++)r[d]=n[d];return a.createElement.apply(null,r)}return a.createElement.apply(null,n)}s.displayName="MDXCreateElement"},5389:function(t,e,n){n.d(e,{B:function(){return r}});var a=n(1152),l=n(7294),i={default:function(t){return l.createElement("div",{style:{padding:"20px"}},t.params.title)}},r=function(t){return l.createElement(a.TU,{components:i,proportionalLayout:t.proportional,onReady:function(t){t.api.addPanel({id:"panel_1",component:"default",params:{title:"Panel 1"},minimumSize:100}),t.api.addPanel({id:"panel_2",component:"default",params:{title:"Panel 2"},minimumSize:100}),t.api.addPanel({id:"panel_3",component:"default",params:{title:"Panel 3"},minimumSize:100})},orientation:a.i5.HORIZONTAL,className:"dockview-theme-dark"})}},1386:function(t,e,n){n.r(e),n.d(e,{assets:function(){return g},contentTitle:function(){return c},default:function(){return y},frontMatter:function(){return k},metadata:function(){return N},toc:function(){return v}});var a=n(7462),l=n(3366),i=n(7294),r=n(3905),p=n(5389),o=n(1152),d={default:function(t){var e=i.useState(t.api.isActive),n=e[0],a=e[1],l=i.useState(t.api.isVisible),r=l[0],p=l[1],o=i.useState(t.api.isFocused),d=o[0],m=o[1],u=i.useState({height:t.api.height,width:t.api.width}),s=u[0],k=u[1];return i.useEffect((function(){var e=t.api.onDidActiveChange((function(t){return a(t.isActive)})),n=t.api.onDidVisibilityChange((function(t){return p(t.isVisible)})),l=t.api.onDidFocusChange((function(t){return m(t.isFocused)})),i=t.api.onDidDimensionsChange((function(t){k({height:t.height,width:t.width})}));return function(){e.dispose(),n.dispose(),l.dispose(),i.dispose()}}),[]),i.createElement("div",{style:{padding:"20px",display:"grid",gridTemplateColumns:"100px 100px",lineHeight:"20px",gridTemplateRows:"repeat(6, 20px)"}},i.createElement("span",null,"Panel ID: "),i.createElement("span",null,t.api.id),i.createElement("span",null,"Height: "),i.createElement("span",null,s.height+"px"),i.createElement("span",null,"Width: "),i.createElement("span",null,s.width+"px"),i.createElement("span",null,"Focused: "),i.createElement("span",{style:{color:d?"green":"red"}},d?"True":"False"),i.createElement("span",null,"Active: "),i.createElement("span",{style:{color:n?"green":"red"}},n?"True":"False"),i.createElement("span",null,"Visible: "),i.createElement("span",{style:{color:r?"green":"red"}},r?"True":"False"))}},m=function(t){var e=i.useState([]),n=e[0],a=e[1],l=i.useCallback((function(t){t.api.onDidAddView((function(e){return a(t.api.panels)})),t.api.onDidRemoveView((function(e){return a(t.api.panels)})),t.api.addPanel({id:"panel_1",component:"default",params:{title:"Panel 1"},minimumSize:100}),t.api.addPanel({id:"panel_2",component:"default",params:{title:"Panel 2"},minimumSize:100}),t.api.addPanel({id:"panel_3",component:"default",params:{title:"Panel 3"},minimumSize:100})}),[]);return i.createElement(i.Fragment,null,i.createElement("div",{style:{height:"150px",backgroundColor:"rgb(30,30,30)",color:"white"}},i.createElement(o.TU,{components:d,proportionalLayout:t.proportional,onReady:l,orientation:o.i5.HORIZONTAL,className:"dockview-theme-dark"})),i.createElement("div",{style:{height:"20px",display:"flex"}},n.map((function(t){return i.createElement("div",{style:{padding:"0px 20px"}},i.createElement("div",null,t.id),i.createElement("div",null,i.createElement("button",{onClick:function(){return t.api.setVisible(!t.api.isVisible)}},"Toggle Visiblity"),i.createElement("button",{onClick:function(){return t.api.setActive()}},"Set Active")))}))))},u=n(9960),s=["components"],k={},c="Splitview",N={unversionedId:"api/splitview",id:"api/splitview",title:"Splitview",description:"Introduction",source:"@site/docs/api/splitview.mdx",sourceDirName:"api",slug:"/api/splitview",permalink:"/docs2/docs/api/splitview",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/api/splitview.mdx",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Paneview",permalink:"/docs2/docs/api/paneview"},next:{title:"Theme",permalink:"/docs2/docs/theme"}},g={},v=[{value:"Introduction",id:"introduction",level:2},{value:"SplitviewReact Component",id:"splitviewreact-component",level:2},{value:"Splitview API",id:"splitview-api",level:2},{value:"Splitview Panel API",id:"splitview-panel-api",level:2},{value:"Advanced Features",id:"advanced-features",level:2},{value:"Visibility",id:"visibility",level:3},{value:"Active",id:"active",level:3},{value:"Contraints",id:"contraints",level:3}],h={toc:v};function y(t){var e=t.components,n=(0,l.Z)(t,s);return(0,r.kt)("wrapper",(0,a.Z)({},h,n,{components:e,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"splitview"},"Splitview"),(0,r.kt)("h2",{id:"introduction"},"Introduction"),(0,r.kt)("p",null,"A Splitview is a collection resizable horizontally or vertically stacked panels.\nThe Splitview exposes a component level API through the ",(0,r.kt)("inlineCode",{parentName:"p"},"onReady")," event and through the ",(0,r.kt)("inlineCode",{parentName:"p"},"props.containerApi")," variable on the panel props.\nA panel level API is exposed on each panel through it's props as ",(0,r.kt)("inlineCode",{parentName:"p"},"props.api"),"."),(0,r.kt)("div",{style:{height:"100px",backgroundColor:"rgb(30,30,30)",color:"white",margin:"20px 0px"}},(0,r.kt)(p.B,{mdxType:"SimpleSplitview"})),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="Simple Splitview example"',title:'"Simple',Splitview:!0,'example"':!0},"import {\n    ISplitviewPanelProps,\n    Orientation,\n    SplitviewReact,\n    SplitviewReadyEvent,\n} from 'dockview';\n\nconst components = {\n    default: (props: ISplitviewPanelProps<{ title: string }>) => {\n        return <div style={{ padding: '20px' }}>{props.params.title}</div>;\n    },\n};\n\nexport const SimpleSplitview = () => {\n    const onReady = (event: SplitviewReadyEvent) => {\n        event.api.addPanel({\n            id: 'panel_1',\n            component: 'default',\n            params: {\n                title: 'Panel 1',\n            },\n        });\n\n        event.api.addPanel({\n            id: 'panel_2',\n            component: 'default',\n            params: {\n                title: 'Panel 2',\n            },\n        });\n\n        event.api.addPanel({\n            id: 'panel_3',\n            component: 'default',\n            params: {\n                title: 'Panel 3',\n            },\n        });\n    };\n\n    return (\n        <SplitviewReact\n            components={components}\n            onReady={onReady}\n            orientation={Orientation.HORIZONTAL}\n            className=\"dockview-theme-dark\"\n        />\n    );\n};\n")),(0,r.kt)("h2",{id:"splitviewreact-component"},"SplitviewReact Component"),(0,r.kt)("p",null,"You can create a Splitview through the use of the ",(0,r.kt)("inlineCode",{parentName:"p"},"ReactSplitview")," component."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},"import { ReactSplitview } from 'dockview';\n")),(0,r.kt)("p",null,"Using the ",(0,r.kt)("inlineCode",{parentName:"p"},"onReady")," prop you can access to the component ",(0,r.kt)("inlineCode",{parentName:"p"},"api")," and add panels either through deserialization or indivial addition of panels."),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Property"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Optional"),(0,r.kt)("th",{parentName:"tr",align:null},"Default"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"onReady"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"(event: SplitviewReadyEvent) => void")),(0,r.kt)("td",{parentName:"tr",align:null},"No"),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null},"Function")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"components"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"Record<string, ISplitviewPanelProps>")),(0,r.kt)("td",{parentName:"tr",align:null},"No"),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null},"Panel renderers")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"orientation"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"Orientation")),(0,r.kt)("td",{parentName:"tr",align:null},"Yes"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"Orientation.HORIZONTAL")),(0,r.kt)("td",{parentName:"tr",align:null},"Orientation of the Splitview")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"proportionalLayout"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"boolean")),(0,r.kt)("td",{parentName:"tr",align:null},"Yes"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"true")),(0,r.kt)("td",{parentName:"tr",align:null},"See ",(0,r.kt)(u.Z,{to:"/docs/basics/#proportional-layout",mdxType:"Link"},"Proportional layout"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"hideBorders"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"boolean")),(0,r.kt)("td",{parentName:"tr",align:null},"Yes"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"false")),(0,r.kt)("td",{parentName:"tr",align:null},"Hide the borders between panels")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"className"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"string")),(0,r.kt)("td",{parentName:"tr",align:null},"Yes"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"''")),(0,r.kt)("td",{parentName:"tr",align:null},"Attaches a classname")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"disableAutoResizing"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"boolean")),(0,r.kt)("td",{parentName:"tr",align:null},"Yes"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"false")),(0,r.kt)("td",{parentName:"tr",align:null},"See ",(0,r.kt)(u.Z,{to:"/docs/basics/#auto-resizing",mdxType:"Link"},"Auto Resizing"))))),(0,r.kt)("h2",{id:"splitview-api"},"Splitview API"),(0,r.kt)("p",null,"The Splitview API is exposed both at the ",(0,r.kt)("inlineCode",{parentName:"p"},"onReady")," event and on each panel through ",(0,r.kt)("inlineCode",{parentName:"p"},"props.containerApi"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="Splitview API via Panel component"',title:'"Splitview',API:!0,via:!0,Panel:!0,'component"':!0},"const MyComponent = (props: ISplitviewPanelProps<{ title: string }>) => {\n    // props.containerApi...\n\n    return <div>{`My first panel has the title: ${props.params.title}`}</div>;\n};\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="Splitview API via the onReady callback"',title:'"Splitview',API:!0,via:!0,the:!0,onReady:!0,'callback"':!0},"const onReady = (event: SplitviewReadyEvent) => {\n    // event.api...\n};\n")),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Property"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"height"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"number")),(0,r.kt)("td",{parentName:"tr",align:null},"Component pixel height")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"width"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"number")),(0,r.kt)("td",{parentName:"tr",align:null},"Component pixel width")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"minimumSize"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"number")),(0,r.kt)("td",{parentName:"tr",align:null},"The sum of the ",(0,r.kt)("inlineCode",{parentName:"td"},"minimumSize")," property for each panel")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"maximumSize"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"number")),(0,r.kt)("td",{parentName:"tr",align:null},"The sum of the ",(0,r.kt)("inlineCode",{parentName:"td"},"maximumSize")," property for each panel")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"length"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"number")),(0,r.kt)("td",{parentName:"tr",align:null},"Number of panels")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"panels"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"ISplitviewPanel[]")),(0,r.kt)("td",{parentName:"tr",align:null},"All panels")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"onDidLayoutChange"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"Event<void>")),(0,r.kt)("td",{parentName:"tr",align:null},"Fires on layout change")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"onDidLayoutFromJSON"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"Event<void>")),(0,r.kt)("td",{parentName:"tr",align:null},"Fires of layout change caused by a fromJSON deserialization call")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"onDidAddView"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"Event<IView>")),(0,r.kt)("td",{parentName:"tr",align:null},"Fires when a view is added")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"onDidRemoveView"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"Event<IView>")),(0,r.kt)("td",{parentName:"tr",align:null},"Fires when a view is removed")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"addPanel"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"addPanel(options: AddSplitviewComponentOptions): ISplitviewPanel")),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"removePanel"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"(panel: ISplitviewPanel, sizing?: Sizing): void")),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"getPanel"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"(id:string): ISplitviewPanel \\| undefined")),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"movePanel"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"(from: number, to: number): void")),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"updateOptions"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"(options: SplitviewComponentUpdateOptions): void")),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"focus"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"(): void")),(0,r.kt)("td",{parentName:"tr",align:null},"Focus the active panel, if exists")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"layout"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"(width: number, height:number): void")),(0,r.kt)("td",{parentName:"tr",align:null},"See ",(0,r.kt)(u.Z,{to:"/docs/basics/#auto-resizing",mdxType:"Link"},"Auto Resizing"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"fromJSON"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"(data: SerializedSplitview): void")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)(u.Z,{to:"/docs/basics/#serialization",mdxType:"Link"},"Serialization"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"toJSON"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"(): SerializedSplitview")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)(u.Z,{to:"/docs/basics/#serialization",mdxType:"Link"},"Serialization"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"clear"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"(): void")),(0,r.kt)("td",{parentName:"tr",align:null},"Clears the current layout")))),(0,r.kt)("h2",{id:"splitview-panel-api"},"Splitview Panel API"),(0,r.kt)("p",null,"The Splitview panel API is exposed on each panel and contains actions and variables specific to that panel."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="Splitview panel API via Panel component"',title:'"Splitview',panel:!0,API:!0,via:!0,Panel:!0,'component"':!0},"const MyComponent = (props: ISplitviewPanelProps<{ title: string }>) => {\n    // props.api...\n\n    return <div>{`My first panel has the title: ${props.params.title}`}</div>;\n};\n")),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Property"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"id"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"string")),(0,r.kt)("td",{parentName:"tr",align:null},"Panel id")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"isFocused"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"boolean")),(0,r.kt)("td",{parentName:"tr",align:null},"Is panel focsed")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"isActive"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"boolean")),(0,r.kt)("td",{parentName:"tr",align:null},"Is panel active")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"isVisible"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"boolean")),(0,r.kt)("td",{parentName:"tr",align:null},"Is panel visible")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"width"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"number")),(0,r.kt)("td",{parentName:"tr",align:null},"Panel width")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"height"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"number")),(0,r.kt)("td",{parentName:"tr",align:null},"Panel height")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"onDidDimensionsChange"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"Event<PanelDimensionChangeEvent>")),(0,r.kt)("td",{parentName:"tr",align:null},"Fires when panel dimensions change")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"onDidFocusChange"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"Event<FocusEvent>")),(0,r.kt)("td",{parentName:"tr",align:null},"Fire when panel is focused and blurred")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"onDidVisibilityChange"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"Event<VisibilityEvent>")),(0,r.kt)("td",{parentName:"tr",align:null},"Fires when the panels visiblity property is changed (see ",(0,r.kt)(u.Z,{to:"/docs/api/splitview/#visibility",mdxType:"Link"},"Panel Visibility"),")")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"onDidActiveChange"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"Event<ActiveEvent>")),(0,r.kt)("td",{parentName:"tr",align:null},"Fires when the panels active property is changed (see ",(0,r.kt)(u.Z,{to:"/docs/api/splitview/#active",mdxType:"Link"},"Active Panel"),")")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"onDidConstraintsChange"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"onDidConstraintsChange: Event<PanelConstraintChangeEvent>")),(0,r.kt)("td",{parentName:"tr",align:null},"Fires when the panels size contrainsts change (see ",(0,r.kt)(u.Z,{to:"/docs/api/splitview/#contraints",mdxType:"Link"},"Panel Constraints"),")")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"setVisible"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"(isVisible: boolean): void")),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"setActive"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"(): void")),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"setConstraints"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"(value: PanelConstraintChangeEvent2): void;")),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"setSize"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"(event: PanelSizeEvent): void")),(0,r.kt)("td",{parentName:"tr",align:null})))),(0,r.kt)("h2",{id:"advanced-features"},"Advanced Features"),(0,r.kt)("p",null,"Listed below are some functionality avalaible to you through both the panel and component APIs. The live demo shows examples of these in real-time."),(0,r.kt)("div",{style:{height:"200px",margin:"20px 0px"}},(0,r.kt)(m,{mdxType:"SplitviewExample1"})),(0,r.kt)("h3",{id:"visibility"},"Visibility"),(0,r.kt)("p",null,"A panels visibility can be controlled and monitoring through the following code.\nA panel with visibility set to ",(0,r.kt)("inlineCode",{parentName:"p"},"false")," will remain as a part of the components list of panels but will not be rendered."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},"const disposable = props.api.onDidVisibilityChange(({ isVisible }) => {\n    //\n});\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},"api.setVisible(true);\n")),(0,r.kt)("h3",{id:"active"},"Active"),(0,r.kt)("p",null,"Only one panel in the ",(0,r.kt)("inlineCode",{parentName:"p"},"splitview")," can be the active panel at any one time.\nSetting a panel as active will set all the others as inactive.\nA focused panel is always the active panel but an active panel is not always focused."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},"const disposable = props.api.onDidActiveChange(({ isActive }) => {\n    //\n});\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},"api.setActive();\n")),(0,r.kt)("h3",{id:"contraints"},"Contraints"),(0,r.kt)("p",null,"When adding a panel you can specify pixel size contraints"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},"event.api.addPanel({\n    id: 'panel_3',\n    component: 'default',\n    minimumSize: 100,\n    maximumSize: 1000,\n});\n")),(0,r.kt)("p",null,"These contraints can be updated throughout the lifecycle of the ",(0,r.kt)("inlineCode",{parentName:"p"},"splitview")," using the panel API"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},"props.api.onDidConstraintsChange(({ maximumSize, minimumSize }) => {\n    //\n});\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},"api.setConstraints({\n    maximumSize: 200,\n    minimumSize: 400,\n});\n")))}y.isMDXComponent=!0}}]);
//# sourceMappingURL=a013c660.25560c11.js.map