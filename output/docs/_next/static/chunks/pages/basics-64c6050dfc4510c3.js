(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[105],{6996:function(e,n,i){(window.__NEXT_P=window.__NEXT_P||[]).push(["/basics",function(){return i(3592)}])},6985:function(e,n,i){"use strict";i.d(n,{B:function(){return o}});var a=i(2322),t=i(1920),s={default:function(e){return(0,a.jsx)("div",{style:{padding:"20px"},children:e.params.title})}},o=function(e){return(0,a.jsx)(t.TU,{components:s,proportionalLayout:e.proportional,onReady:function(e){e.api.addPanel({id:"panel_1",component:"default",params:{title:"Panel 1"},minimumSize:100}),e.api.addPanel({id:"panel_2",component:"default",params:{title:"Panel 2"},minimumSize:100}),e.api.addPanel({id:"panel_3",component:"default",params:{title:"Panel 3"},minimumSize:100})},orientation:t.i5.HORIZONTAL,className:"dockview-theme-dark"})}},3592:function(e,n,i){"use strict";i.r(n);var a=i(2322),t=i(5392),s=i(6985);n.default=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},n=function(){var n=Object.assign({h2:"h2",a:"a",span:"span",p:"p",code:"code",h3:"h3",pre:"pre"},(0,t.ah)(),e.components);return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsxs)(n.h2,{id:"auto-resizing",children:["Auto resizing",(0,a.jsx)(n.a,{"aria-hidden":"true",tabIndex:"-1",href:"#auto-resizing",children:(0,a.jsx)(n.span,{className:"icon icon-link"})})]}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.code,{children:"SplitviewReact"}),", ",(0,a.jsx)(n.code,{children:"GridviewReact"}),", ",(0,a.jsx)(n.code,{children:"PaneviewReact"})," and ",(0,a.jsx)(n.code,{children:"DockviewReact"})," will all automatically resize to fill the size of their parent element.\nInternally this is achieved using a ",(0,a.jsx)(n.a,{href:"https://developer.mozilla.org/en-US/docs/Web/API/ResizeObserver",children:"ResizeObserver"}),".\nYou can disable this by settings the ",(0,a.jsx)(n.code,{children:"disableAutoResizing"})," prop to be ",(0,a.jsx)(n.code,{children:"true"}),"."]}),"\n",(0,a.jsxs)(n.p,{children:["You can manually resize a component using the API method ",(0,a.jsx)(n.code,{children:"layout(width: number, height: number): void"}),"."]}),"\n",(0,a.jsxs)(n.p,{children:["You can force a component to resize without providing any measurements using the API method ",(0,a.jsx)(n.code,{children:"resizeToFit(): void"}),".\nThis method will evaluate the width and height of the parent ",(0,a.jsx)(n.code,{children:"HTMLElement"})," container and use these values to relayout."]}),"\n",(0,a.jsxs)(n.h2,{id:"proportional-layout",children:["Proportional layout",(0,a.jsx)(n.a,{"aria-hidden":"true",tabIndex:"-1",href:"#proportional-layout",children:(0,a.jsx)(n.span,{className:"icon icon-link"})})]}),"\n",(0,a.jsx)("div",{style:{height:"100px",backgroundColor:"rgb(30,30,30)",color:"white",margin:"20px 0px"},children:(0,a.jsx)(s.B,{proportional:!1})}),"\n",(0,a.jsx)("div",{style:{height:"100px",backgroundColor:"rgb(30,30,30)",color:"white",margin:"20px 0px"},children:(0,a.jsx)(s.B,{proportional:!0})}),"\n",(0,a.jsxs)(n.h2,{id:"panels",children:["Panels",(0,a.jsx)(n.a,{"aria-hidden":"true",tabIndex:"-1",href:"#panels",children:(0,a.jsx)(n.span,{className:"icon icon-link"})})]}),"\n",(0,a.jsxs)(n.p,{children:["The below examples use ",(0,a.jsx)(n.code,{children:"ReactSplitview"})," but the logic holds for ",(0,a.jsx)(n.code,{children:"ReactPaneview"}),", ",(0,a.jsx)(n.code,{children:"ReactGridview"})," and ",(0,a.jsx)(n.code,{children:"ReactDockview"})," using their respective implementations and interfaces."]}),"\n",(0,a.jsxs)(n.h3,{id:"adding-a-panel-with-parameters",children:["Adding a panel with parameters",(0,a.jsx)(n.a,{"aria-hidden":"true",tabIndex:"-1",href:"#adding-a-panel-with-parameters",children:(0,a.jsx)(n.span,{className:"icon icon-link"})})]}),"\n",(0,a.jsxs)(n.p,{children:["You can pass parameters to a panel through the ",(0,a.jsx)(n.code,{children:"params"})," object"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-tsx",children:"const onReady = (event: SplitviewReadyEvent) => {\n    event.api.addPanel({\n        id: 'panel_1',\n        component: 'myComponent',\n        params: {\n            title: 'My Title',\n        },\n    });\n};\n"})}),"\n",(0,a.jsxs)(n.p,{children:["and you can access those properties through the ",(0,a.jsx)(n.code,{children:"props.params"})," object. The TypeScript interface accepts an optional generic type ",(0,a.jsx)(n.code,{children:"T"})," that corresponds to the params objects type."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-tsx",children:"const MyComponent = (props: ISplitviewPanelProps<{ title: string }>) => {\n    return <div>{`My first panel has the title: ${props.params.title}`}</div>;\n};\n"})}),"\n",(0,a.jsxs)(n.h3,{id:"accessing-the-panel-api",children:["Accessing the panel API",(0,a.jsx)(n.a,{"aria-hidden":"true",tabIndex:"-1",href:"#accessing-the-panel-api",children:(0,a.jsx)(n.span,{className:"icon icon-link"})})]}),"\n",(0,a.jsxs)(n.p,{children:["You can access an extensive set of functions in the panel via both the panel ",(0,a.jsx)(n.code,{children:"api"})," and ",(0,a.jsx)(n.code,{children:"containerApi"}),". The ",(0,a.jsx)(n.code,{children:"api"})," is specific to that particular panel and the ",(0,a.jsx)(n.code,{children:"containerApi"})," corresponds to that api which you access during the ",(0,a.jsx)(n.code,{children:"onReady"})," event."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-tsx",children:"const MyComponent = (props: ISplitviewPanelProps<{ title: string }>) => {\n    React.useEffect(() => {\n        const disposable = props.api.onDidActiveChange((event) => {\n            console.log(`is panel active: ${event.isActive}`);\n        });\n\n        return () => {\n            disposable.dispose(); // remember to dispose of any subscriptions\n        };\n    }, [props.api]);\n\n    const addAnotherPanel = React.useCallback(() => {\n        props.containerApi.addPanel({\n            id: 'another_id',\n            component: 'anotherComponent',\n        });\n    }, [props.containerApi]);\n\n    return (\n        <div>\n            <span>{`My first panel has the title: ${props.params.title}`}</span>\n            <button onClick={addAnotherPanel}>Add Panel</button>\n        </div>\n    );\n};\n"})}),"\n",(0,a.jsxs)(n.h3,{id:"serialization",children:["Serialization",(0,a.jsx)(n.a,{"aria-hidden":"true",tabIndex:"-1",href:"#serialization",children:(0,a.jsx)(n.span,{className:"icon icon-link"})})]}),"\n",(0,a.jsxs)(n.p,{children:["All components support ",(0,a.jsx)(n.code,{children:"toJSON(): T"})," which returns a Typed object representation of the components state. This same Typed object can be used to deserialize a view using ",(0,a.jsx)(n.code,{children:"fromJSON(object: T): void"}),"."]})]})},i=Object.assign({},(0,t.ah)(),e.components),o=i.wrapper;return o?(0,a.jsx)(o,Object.assign({},e,{children:(0,a.jsx)(n,{})})):n()}}},function(e){e.O(0,[774,888,179],(function(){return n=6996,e(e.s=n);var n}));var n=e.O();_N_E=n}]);