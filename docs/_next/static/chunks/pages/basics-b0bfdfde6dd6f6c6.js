(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[105],{6996:function(e,n,i){(window.__NEXT_P=window.__NEXT_P||[]).push(["/basics",function(){return i(6055)}])},6985:function(e,n,i){"use strict";i.d(n,{B:function(){return s}});var a=i(2322),t=i(1920),r={default:function(e){return(0,a.jsx)("div",{style:{padding:"20px"},children:e.params.title})}},s=function(e){return(0,a.jsx)(t.TU,{components:r,proportionalLayout:e.proportional,onReady:function(e){e.api.addPanel({id:"panel_1",component:"default",params:{title:"Panel 1"},minimumSize:100}),e.api.addPanel({id:"panel_2",component:"default",params:{title:"Panel 2"},minimumSize:100}),e.api.addPanel({id:"panel_3",component:"default",params:{title:"Panel 3"},minimumSize:100})},orientation:t.i5.HORIZONTAL,className:"dockview-theme-dark"})}},6055:function(e,n,i){"use strict";i.r(n),i.d(n,{default:function(){return d}});var a=i(2322),t=i(5392),r=i(6985),s=i(2784);function o(e,n){(null==n||n>e.length)&&(n=e.length);for(var i=0,a=new Array(n);i<n;i++)a[i]=e[i];return a}function l(e,n){return function(e){if(Array.isArray(e))return e}(e)||function(e,n){var i=null==e?null:"undefined"!==typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=i){var a,t,r=[],s=!0,o=!1;try{for(i=i.call(e);!(s=(a=i.next()).done)&&(r.push(a.value),!n||r.length!==n);s=!0);}catch(l){o=!0,t=l}finally{try{s||null==i.return||i.return()}finally{if(o)throw t}}return r}}(e,n)||function(e,n){if(!e)return;if("string"===typeof e)return o(e,n);var i=Object.prototype.toString.call(e).slice(8,-1);"Object"===i&&e.constructor&&(i=e.constructor.name);if("Map"===i||"Set"===i)return Array.from(i);if("Arguments"===i||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(i))return o(e,n)}(e,n)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}var c=function(e){var n=l(s.useState(50),2),i=n[0],t=n[1];return(0,a.jsxs)("div",{style:{display:"flex",flexDirection:"column",height:"100px",margin:"10px 0px"},children:[(0,a.jsxs)("div",{style:{height:"25px",display:"flex",alignItems:"center"},children:[(0,a.jsx)("input",{type:"range",min:20,max:100,defaultValue:50,value:i,onChange:function(e){t(Number(e.target.value))}}),(0,a.jsx)("span",{style:{padding:"0px 8px"},children:"Slide to resize the splitview container"})]}),(0,a.jsxs)("div",{style:{flexGrow:1,display:"grid",gridTemplateColumns:"".concat(i,"fr ").concat(100-i,"fr")},children:[(0,a.jsx)("div",{style:{backgroundColor:"rgb(30,30,30)",color:"white",flexGrow:1,border:"1px solid grey"},children:(0,a.jsx)(r.B,{proportional:e.proportional})}),(0,a.jsx)("div",{})]})]})};var d=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},n=function(){var n=Object.assign({h1:"h1",a:"a",span:"span",p:"p",h2:"h2",code:"code",h3:"h3",pre:"pre",ul:"ul",li:"li"},(0,t.ah)(),e.components);return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsxs)(n.h1,{id:"basics",children:["Basics",(0,a.jsx)(n.a,{"aria-hidden":"true",tabIndex:"-1",href:"#basics",children:(0,a.jsx)(n.span,{className:"icon icon-link"})})]}),"\n",(0,a.jsx)(n.p,{children:"This section will take you through a number of concepts that can be applied to all dockview components."}),"\n",(0,a.jsxs)(n.h2,{id:"panels",children:["Panels",(0,a.jsx)(n.a,{"aria-hidden":"true",tabIndex:"-1",href:"#panels",children:(0,a.jsx)(n.span,{className:"icon icon-link"})})]}),"\n",(0,a.jsxs)(n.p,{children:["The below examples use ",(0,a.jsx)(n.code,{children:"ReactSplitview"})," but the logic holds for ",(0,a.jsx)(n.code,{children:"ReactPaneview"}),", ",(0,a.jsx)(n.code,{children:"ReactGridview"})," and ",(0,a.jsx)(n.code,{children:"ReactDockview"})," using their respective implementations and interfaces."]}),"\n",(0,a.jsxs)(n.h3,{id:"adding-a-panel-with-parameters",children:["Adding a panel with parameters",(0,a.jsx)(n.a,{"aria-hidden":"true",tabIndex:"-1",href:"#adding-a-panel-with-parameters",children:(0,a.jsx)(n.span,{className:"icon icon-link"})})]}),"\n",(0,a.jsxs)(n.p,{children:["You can pass parameters to a panel through the ",(0,a.jsx)(n.code,{children:"params"})," object"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-tsx",children:"const onReady = (event: SplitviewReadyEvent) => {\n    event.api.addPanel({\n        id: 'panel_1',\n        component: 'myComponent',\n        params: {\n            title: 'My Title',\n        },\n    });\n};\n"})}),"\n",(0,a.jsxs)(n.p,{children:["and you can access those properties through the ",(0,a.jsx)(n.code,{children:"props.params"})," object. The TypeScript interface accepts an optional generic type ",(0,a.jsx)(n.code,{children:"T"})," that corresponds to the params objects type."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-tsx",children:"const MyComponent = (props: ISplitviewPanelProps<{ title: string }>) => {\n    return <div>{`My first panel has the title: ${props.params.title}`}</div>;\n};\n"})}),"\n",(0,a.jsxs)(n.h2,{id:"api",children:["API",(0,a.jsx)(n.a,{"aria-hidden":"true",tabIndex:"-1",href:"#api",children:(0,a.jsx)(n.span,{className:"icon icon-link"})})]}),"\n",(0,a.jsxs)(n.p,{children:["There are two types of API you will interact with using ",(0,a.jsx)(n.code,{children:"dockview"}),"."]}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:["The ",(0,a.jsx)(n.code,{children:"panel API"})," is accessible via ",(0,a.jsx)(n.code,{children:"props.api"})," in user defined panels and via the ",(0,a.jsx)(n.code,{children:".api"})," variable found on panel instances. This API contains actions and variable related to the the individual panel."]}),"\n",(0,a.jsxs)(n.li,{children:["The ",(0,a.jsx)(n.code,{children:"component API"})," is accessible via ",(0,a.jsx)(n.code,{children:"event.api"})," in the ",(0,a.jsx)(n.code,{children:"onReady"})," events and ",(0,a.jsx)(n.code,{children:"props.containerApi"})," in user defined panels. This API contains actions and variable related to the component as a whole."]}),"\n"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-tsx",children:"const MyComponent = (props: ISplitviewPanelProps<{ title: string }>) => {\n    React.useEffect(() => {\n        const disposable = props.api.onDidActiveChange((event) => {\n            console.log(`is panel active: ${event.isActive}`);\n        });\n\n        return () => {\n            disposable.dispose(); // remember to dispose of any subscriptions\n        };\n    }, [props.api]);\n\n    const addAnotherPanel = React.useCallback(() => {\n        props.containerApi.addPanel({\n            id: 'another_id',\n            component: 'anotherComponent',\n        });\n    }, [props.containerApi]);\n\n    return (\n        <div>\n            <span>{`My first panel has the title: ${props.params.title}`}</span>\n            <button onClick={addAnotherPanel}>Add Panel</button>\n        </div>\n    );\n};\n"})}),"\n",(0,a.jsxs)(n.h3,{id:"serialization",children:["Serialization",(0,a.jsx)(n.a,{"aria-hidden":"true",tabIndex:"-1",href:"#serialization",children:(0,a.jsx)(n.span,{className:"icon icon-link"})})]}),"\n",(0,a.jsxs)(n.p,{children:["All components support ",(0,a.jsx)(n.code,{children:"toJSON(): T"})," which returns a Typed object representation of the components state. This same Typed object can be used to deserialize a view using ",(0,a.jsx)(n.code,{children:"fromJSON(object: T): void"}),"."]}),"\n",(0,a.jsxs)(n.h2,{id:"auto-resizing",children:["Auto resizing",(0,a.jsx)(n.a,{"aria-hidden":"true",tabIndex:"-1",href:"#auto-resizing",children:(0,a.jsx)(n.span,{className:"icon icon-link"})})]}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.code,{children:"SplitviewReact"}),", ",(0,a.jsx)(n.code,{children:"GridviewReact"}),", ",(0,a.jsx)(n.code,{children:"PaneviewReact"})," and ",(0,a.jsx)(n.code,{children:"DockviewReact"})," will all automatically resize to fill the size of their parent element.\nInternally this is achieved using a ",(0,a.jsx)(n.a,{href:"https://developer.mozilla.org/en-US/docs/Web/API/ResizeObserver",children:"ResizeObserver"}),".\nYou can disable this by settings the ",(0,a.jsx)(n.code,{children:"disableAutoResizing"})," prop to be ",(0,a.jsx)(n.code,{children:"true"}),"."]}),"\n",(0,a.jsxs)(n.p,{children:["You can manually resize a component using the API method ",(0,a.jsx)(n.code,{children:"layout(width: number, height: number): void"}),"."]}),"\n",(0,a.jsxs)(n.h2,{id:"proportional-layout",children:["Proportional layout",(0,a.jsx)(n.a,{"aria-hidden":"true",tabIndex:"-1",href:"#proportional-layout",children:(0,a.jsx)(n.span,{className:"icon icon-link"})})]}),"\n",(0,a.jsxs)(n.p,{children:["The ",(0,a.jsx)(n.code,{children:"proportionalLayout"})," property indicates the expected behaviour of the component as it's container resizes, should all views resize equally or should just one view expand to fill the new space. ",(0,a.jsx)(n.code,{children:"proportionalLayout"})," can be set as a property on ",(0,a.jsx)(n.code,{children:"SplitviewReact"})," and ",(0,a.jsx)(n.code,{children:"GridviewReact"})," components.\nAlthough not configurable on ",(0,a.jsx)(n.code,{children:"DockviewReact"})," and ",(0,a.jsx)(n.code,{children:"PaneviewReact"})," these both behave as if ",(0,a.jsx)(n.code,{children:"proportionalLayout=true"})," was set for them."]}),"\n",(0,a.jsx)(c,{proportional:!1}),"\n",(0,a.jsx)(c,{proportional:!0})]})},i=Object.assign({},(0,t.ah)(),e.components),r=i.wrapper;return r?(0,a.jsx)(r,Object.assign({},e,{children:(0,a.jsx)(n,{})})):n()}}},function(e){e.O(0,[920,774,888,179],(function(){return n=6996,e(e.s=n);var n}));var n=e.O();_N_E=n}]);